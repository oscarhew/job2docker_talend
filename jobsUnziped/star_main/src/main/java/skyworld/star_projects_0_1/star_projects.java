// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package skyworld.star_projects_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: star_projects Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class star_projects implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(pipelineUUID != null){
				
					this.setProperty("pipelineUUID", pipelineUUID.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String pipelineUUID;
public String getPipelineUUID(){
	return this.pipelineUUID;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "star_projects";
	private final String projectName = "SKYWORLD";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_COL88GLPEe6qUseF1Lt1cQ", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				star_projects.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(star_projects.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_projects = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_projects = new byte[0];

	
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Integer TotalUnits;

				public Integer getTotalUnits () {
					return this.TotalUnits;
				}
				
			    public String PropertyType;

				public String getPropertyType () {
					return this.PropertyType;
				}
				
			    public String Tenure;

				public String getTenure () {
					return this.Tenure;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
					this.Name = readString(dis);
					
						this.TotalUnits = readInteger(dis);
					
					this.PropertyType = readString(dis);
					
					this.Tenure = readString(dis);
					
					this.City = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
					this.Name = readString(dis);
					
						this.TotalUnits = readInteger(dis);
					
					this.PropertyType = readString(dis);
					
					this.Tenure = readString(dis);
					
					this.City = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Integer
				
						writeInteger(this.TotalUnits,dos);
					
					// String
				
						writeString(this.PropertyType,dos);
					
					// String
				
						writeString(this.Tenure,dos);
					
					// String
				
						writeString(this.City,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Integer
				
						writeInteger(this.TotalUnits,dos);
					
					// String
				
						writeString(this.PropertyType,dos);
					
					// String
				
						writeString(this.Tenure,dos);
					
					// String
				
						writeString(this.City,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProjectID="+ProjectID);
		sb.append(",Name="+Name);
		sb.append(",TotalUnits="+String.valueOf(TotalUnits));
		sb.append(",PropertyType="+PropertyType);
		sb.append(",Tenure="+Tenure);
		sb.append(",City="+City);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class projectsPipelineStruct implements routines.system.IPersistableRow<projectsPipelineStruct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_projects = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_projects = new byte[0];

	
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Integer TotalUnits;

				public Integer getTotalUnits () {
					return this.TotalUnits;
				}
				
			    public String PropertyType;

				public String getPropertyType () {
					return this.PropertyType;
				}
				
			    public String Tenure;

				public String getTenure () {
					return this.Tenure;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
					this.Name = readString(dis);
					
						this.TotalUnits = readInteger(dis);
					
					this.PropertyType = readString(dis);
					
					this.Tenure = readString(dis);
					
					this.City = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
					this.Name = readString(dis);
					
						this.TotalUnits = readInteger(dis);
					
					this.PropertyType = readString(dis);
					
					this.Tenure = readString(dis);
					
					this.City = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Integer
				
						writeInteger(this.TotalUnits,dos);
					
					// String
				
						writeString(this.PropertyType,dos);
					
					// String
				
						writeString(this.Tenure,dos);
					
					// String
				
						writeString(this.City,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Integer
				
						writeInteger(this.TotalUnits,dos);
					
					// String
				
						writeString(this.PropertyType,dos);
					
					// String
				
						writeString(this.Tenure,dos);
					
					// String
				
						writeString(this.City,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProjectID="+ProjectID);
		sb.append(",Name="+Name);
		sb.append(",TotalUnits="+String.valueOf(TotalUnits));
		sb.append(",PropertyType="+PropertyType);
		sb.append(",Tenure="+Tenure);
		sb.append(",City="+City);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(projectsPipelineStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_projects = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_projects = new byte[0];

	
			    public String UUID;

				public String getUUID () {
					return this.UUID;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public boolean Deleted;

				public boolean getDeleted () {
					return this.Deleted;
				}
				
			    public Integer DeveloperID;

				public Integer getDeveloperID () {
					return this.DeveloperID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ShortDescription;

				public String getShortDescription () {
					return this.ShortDescription;
				}
				
			    public String FullDescription;

				public String getFullDescription () {
					return this.FullDescription;
				}
				
			    public String PictureURL;

				public String getPictureURL () {
					return this.PictureURL;
				}
				
			    public Integer TotalUnits;

				public Integer getTotalUnits () {
					return this.TotalUnits;
				}
				
			    public String PropertyType;

				public String getPropertyType () {
					return this.PropertyType;
				}
				
			    public String Tenure;

				public String getTenure () {
					return this.Tenure;
				}
				
			    public String LandArea;

				public String getLandArea () {
					return this.LandArea;
				}
				
			    public String BuiltUpArea;

				public String getBuiltUpArea () {
					return this.BuiltUpArea;
				}
				
			    public String CompletionDate;

				public String getCompletionDate () {
					return this.CompletionDate;
				}
				
			    public String MaintenanceFee;

				public String getMaintenanceFee () {
					return this.MaintenanceFee;
				}
				
			    public String Amenities;

				public String getAmenities () {
					return this.Amenities;
				}
				
			    public String Facilities;

				public String getFacilities () {
					return this.Facilities;
				}
				
			    public String Address;

				public String getAddress () {
					return this.Address;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String State;

				public String getState () {
					return this.State;
				}
				
			    public String Postcode;

				public String getPostcode () {
					return this.Postcode;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String PdfUrl;

				public String getPdfUrl () {
					return this.PdfUrl;
				}
				
			    public String VideoUrl;

				public String getVideoUrl () {
					return this.VideoUrl;
				}
				
			    public String View360Url;

				public String getView360Url () {
					return this.View360Url;
				}
				
			    public String LocationLatitude;

				public String getLocationLatitude () {
					return this.LocationLatitude;
				}
				
			    public String LocationLongitude;

				public String getLocationLongitude () {
					return this.LocationLongitude;
				}
				
			    public String WebsiteURL;

				public String getWebsiteURL () {
					return this.WebsiteURL;
				}
				
			    public String SalesEmail;

				public String getSalesEmail () {
					return this.SalesEmail;
				}
				
			    public String SalesContactNo;

				public String getSalesContactNo () {
					return this.SalesContactNo;
				}
				
			    public String SalesAddress;

				public String getSalesAddress () {
					return this.SalesAddress;
				}
				
			    public Integer isCompleted;

				public Integer getIsCompleted () {
					return this.isCompleted;
				}
				
			    public Integer Published;

				public Integer getPublished () {
					return this.Published;
				}
				
			    public Integer PublishedToPublic;

				public Integer getPublishedToPublic () {
					return this.PublishedToPublic;
				}
				
			    public Integer Ordering;

				public Integer getOrdering () {
					return this.Ordering;
				}
				
			    public String NameCn;

				public String getNameCn () {
					return this.NameCn;
				}
				
			    public String ShortDescriptionCn;

				public String getShortDescriptionCn () {
					return this.ShortDescriptionCn;
				}
				
			    public String FullDescriptionCn;

				public String getFullDescriptionCn () {
					return this.FullDescriptionCn;
				}
				
			    public String PropertyTypeCn;

				public String getPropertyTypeCn () {
					return this.PropertyTypeCn;
				}
				
			    public String TenureCn;

				public String getTenureCn () {
					return this.TenureCn;
				}
				
			    public String LandAreaCn;

				public String getLandAreaCn () {
					return this.LandAreaCn;
				}
				
			    public String CompletionDateCn;

				public String getCompletionDateCn () {
					return this.CompletionDateCn;
				}
				
			    public String MaintenanceFeeCn;

				public String getMaintenanceFeeCn () {
					return this.MaintenanceFeeCn;
				}
				
			    public String AmenitiesCn;

				public String getAmenitiesCn () {
					return this.AmenitiesCn;
				}
				
			    public String FacilitiesCn;

				public String getFacilitiesCn () {
					return this.FacilitiesCn;
				}
				
			    public String AddressCn;

				public String getAddressCn () {
					return this.AddressCn;
				}
				
			    public String CityCn;

				public String getCityCn () {
					return this.CityCn;
				}
				
			    public String StateCn;

				public String getStateCn () {
					return this.StateCn;
				}
				
			    public String CountryCn;

				public String getCountryCn () {
					return this.CountryCn;
				}
				
			    public Double MinSqft;

				public Double getMinSqft () {
					return this.MinSqft;
				}
				
			    public Double MaxSqft;

				public Double getMaxSqft () {
					return this.MaxSqft;
				}
				
			    public BigDecimal MinPurchasePrice;

				public BigDecimal getMinPurchasePrice () {
					return this.MinPurchasePrice;
				}
				
			    public BigDecimal MaxPurchasePrice;

				public BigDecimal getMaxPurchasePrice () {
					return this.MaxPurchasePrice;
				}
				
			    public String MinBathrooms;

				public String getMinBathrooms () {
					return this.MinBathrooms;
				}
				
			    public String MaxBathrooms;

				public String getMaxBathrooms () {
					return this.MaxBathrooms;
				}
				
			    public String MinBedrooms;

				public String getMinBedrooms () {
					return this.MinBedrooms;
				}
				
			    public String MaxBedrooms;

				public String getMaxBedrooms () {
					return this.MaxBedrooms;
				}
				
			    public String SMOEmail;

				public String getSMOEmail () {
					return this.SMOEmail;
				}
				
			    public Boolean IsGovBased;

				public Boolean getIsGovBased () {
					return this.IsGovBased;
				}
				
			    public String PriceRange;

				public String getPriceRange () {
					return this.PriceRange;
				}
				
			    public String SubPath;

				public String getSubPath () {
					return this.SubPath;
				}
				
			    public Integer SmsGroupID;

				public Integer getSmsGroupID () {
					return this.SmsGroupID;
				}
				
			    public Boolean OnlineBookingActivation;

				public Boolean getOnlineBookingActivation () {
					return this.OnlineBookingActivation;
				}
				
			    public String KeyPlanViewAction;

				public String getKeyPlanViewAction () {
					return this.KeyPlanViewAction;
				}
				
			    public Boolean IsEmailEnabled;

				public Boolean getIsEmailEnabled () {
					return this.IsEmailEnabled;
				}
				
			    public Boolean IsEmailCustomerDisabled;

				public Boolean getIsEmailCustomerDisabled () {
					return this.IsEmailCustomerDisabled;
				}
				
			    public Integer BookingExpiryInDay;

				public Integer getBookingExpiryInDay () {
					return this.BookingExpiryInDay;
				}
				
			    public Integer BookingExtensionInDay;

				public Integer getBookingExtensionInDay () {
					return this.BookingExtensionInDay;
				}
				
			    public String PaymentGatewayMerchantId;

				public String getPaymentGatewayMerchantId () {
					return this.PaymentGatewayMerchantId;
				}
				
			    public String PaymentGatewayVerifyKey;

				public String getPaymentGatewayVerifyKey () {
					return this.PaymentGatewayVerifyKey;
				}
				
			    public String PaymentGatewaySecretKey;

				public String getPaymentGatewaySecretKey () {
					return this.PaymentGatewaySecretKey;
				}
				
			    public BigDecimal DepositAmount;

				public BigDecimal getDepositAmount () {
					return this.DepositAmount;
				}
				
			    public String LogoPath;

				public String getLogoPath () {
					return this.LogoPath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.UUID = readString(dis);
					
					this.CreatedBy = readString(dis);
					
					this.DateCreated = readDate(dis);
					
					this.ModifiedBy = readString(dis);
					
					this.DateModified = readDate(dis);
					
			        this.Deleted = dis.readBoolean();
					
						this.DeveloperID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Name = readString(dis);
					
					this.ShortDescription = readString(dis);
					
					this.FullDescription = readString(dis);
					
					this.PictureURL = readString(dis);
					
						this.TotalUnits = readInteger(dis);
					
					this.PropertyType = readString(dis);
					
					this.Tenure = readString(dis);
					
					this.LandArea = readString(dis);
					
					this.BuiltUpArea = readString(dis);
					
					this.CompletionDate = readString(dis);
					
					this.MaintenanceFee = readString(dis);
					
					this.Amenities = readString(dis);
					
					this.Facilities = readString(dis);
					
					this.Address = readString(dis);
					
					this.City = readString(dis);
					
					this.State = readString(dis);
					
					this.Postcode = readString(dis);
					
					this.Country = readString(dis);
					
					this.PdfUrl = readString(dis);
					
					this.VideoUrl = readString(dis);
					
					this.View360Url = readString(dis);
					
					this.LocationLatitude = readString(dis);
					
					this.LocationLongitude = readString(dis);
					
					this.WebsiteURL = readString(dis);
					
					this.SalesEmail = readString(dis);
					
					this.SalesContactNo = readString(dis);
					
					this.SalesAddress = readString(dis);
					
						this.isCompleted = readInteger(dis);
					
						this.Published = readInteger(dis);
					
						this.PublishedToPublic = readInteger(dis);
					
						this.Ordering = readInteger(dis);
					
					this.NameCn = readString(dis);
					
					this.ShortDescriptionCn = readString(dis);
					
					this.FullDescriptionCn = readString(dis);
					
					this.PropertyTypeCn = readString(dis);
					
					this.TenureCn = readString(dis);
					
					this.LandAreaCn = readString(dis);
					
					this.CompletionDateCn = readString(dis);
					
					this.MaintenanceFeeCn = readString(dis);
					
					this.AmenitiesCn = readString(dis);
					
					this.FacilitiesCn = readString(dis);
					
					this.AddressCn = readString(dis);
					
					this.CityCn = readString(dis);
					
					this.StateCn = readString(dis);
					
					this.CountryCn = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MinSqft = null;
           				} else {
           			    	this.MinSqft = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MaxSqft = null;
           				} else {
           			    	this.MaxSqft = dis.readDouble();
           				}
					
						this.MinPurchasePrice = (BigDecimal) dis.readObject();
					
						this.MaxPurchasePrice = (BigDecimal) dis.readObject();
					
					this.MinBathrooms = readString(dis);
					
					this.MaxBathrooms = readString(dis);
					
					this.MinBedrooms = readString(dis);
					
					this.MaxBedrooms = readString(dis);
					
					this.SMOEmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsGovBased = null;
           				} else {
           			    	this.IsGovBased = dis.readBoolean();
           				}
					
					this.PriceRange = readString(dis);
					
					this.SubPath = readString(dis);
					
						this.SmsGroupID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OnlineBookingActivation = null;
           				} else {
           			    	this.OnlineBookingActivation = dis.readBoolean();
           				}
					
					this.KeyPlanViewAction = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsEmailEnabled = null;
           				} else {
           			    	this.IsEmailEnabled = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsEmailCustomerDisabled = null;
           				} else {
           			    	this.IsEmailCustomerDisabled = dis.readBoolean();
           				}
					
						this.BookingExpiryInDay = readInteger(dis);
					
						this.BookingExtensionInDay = readInteger(dis);
					
					this.PaymentGatewayMerchantId = readString(dis);
					
					this.PaymentGatewayVerifyKey = readString(dis);
					
					this.PaymentGatewaySecretKey = readString(dis);
					
						this.DepositAmount = (BigDecimal) dis.readObject();
					
					this.LogoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.UUID = readString(dis);
					
					this.CreatedBy = readString(dis);
					
					this.DateCreated = readDate(dis);
					
					this.ModifiedBy = readString(dis);
					
					this.DateModified = readDate(dis);
					
			        this.Deleted = dis.readBoolean();
					
						this.DeveloperID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Name = readString(dis);
					
					this.ShortDescription = readString(dis);
					
					this.FullDescription = readString(dis);
					
					this.PictureURL = readString(dis);
					
						this.TotalUnits = readInteger(dis);
					
					this.PropertyType = readString(dis);
					
					this.Tenure = readString(dis);
					
					this.LandArea = readString(dis);
					
					this.BuiltUpArea = readString(dis);
					
					this.CompletionDate = readString(dis);
					
					this.MaintenanceFee = readString(dis);
					
					this.Amenities = readString(dis);
					
					this.Facilities = readString(dis);
					
					this.Address = readString(dis);
					
					this.City = readString(dis);
					
					this.State = readString(dis);
					
					this.Postcode = readString(dis);
					
					this.Country = readString(dis);
					
					this.PdfUrl = readString(dis);
					
					this.VideoUrl = readString(dis);
					
					this.View360Url = readString(dis);
					
					this.LocationLatitude = readString(dis);
					
					this.LocationLongitude = readString(dis);
					
					this.WebsiteURL = readString(dis);
					
					this.SalesEmail = readString(dis);
					
					this.SalesContactNo = readString(dis);
					
					this.SalesAddress = readString(dis);
					
						this.isCompleted = readInteger(dis);
					
						this.Published = readInteger(dis);
					
						this.PublishedToPublic = readInteger(dis);
					
						this.Ordering = readInteger(dis);
					
					this.NameCn = readString(dis);
					
					this.ShortDescriptionCn = readString(dis);
					
					this.FullDescriptionCn = readString(dis);
					
					this.PropertyTypeCn = readString(dis);
					
					this.TenureCn = readString(dis);
					
					this.LandAreaCn = readString(dis);
					
					this.CompletionDateCn = readString(dis);
					
					this.MaintenanceFeeCn = readString(dis);
					
					this.AmenitiesCn = readString(dis);
					
					this.FacilitiesCn = readString(dis);
					
					this.AddressCn = readString(dis);
					
					this.CityCn = readString(dis);
					
					this.StateCn = readString(dis);
					
					this.CountryCn = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MinSqft = null;
           				} else {
           			    	this.MinSqft = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MaxSqft = null;
           				} else {
           			    	this.MaxSqft = dis.readDouble();
           				}
					
						this.MinPurchasePrice = (BigDecimal) dis.readObject();
					
						this.MaxPurchasePrice = (BigDecimal) dis.readObject();
					
					this.MinBathrooms = readString(dis);
					
					this.MaxBathrooms = readString(dis);
					
					this.MinBedrooms = readString(dis);
					
					this.MaxBedrooms = readString(dis);
					
					this.SMOEmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsGovBased = null;
           				} else {
           			    	this.IsGovBased = dis.readBoolean();
           				}
					
					this.PriceRange = readString(dis);
					
					this.SubPath = readString(dis);
					
						this.SmsGroupID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OnlineBookingActivation = null;
           				} else {
           			    	this.OnlineBookingActivation = dis.readBoolean();
           				}
					
					this.KeyPlanViewAction = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsEmailEnabled = null;
           				} else {
           			    	this.IsEmailEnabled = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsEmailCustomerDisabled = null;
           				} else {
           			    	this.IsEmailCustomerDisabled = dis.readBoolean();
           				}
					
						this.BookingExpiryInDay = readInteger(dis);
					
						this.BookingExtensionInDay = readInteger(dis);
					
					this.PaymentGatewayMerchantId = readString(dis);
					
					this.PaymentGatewayVerifyKey = readString(dis);
					
					this.PaymentGatewaySecretKey = readString(dis);
					
						this.DepositAmount = (BigDecimal) dis.readObject();
					
					this.LogoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.UUID,dos);
					
					// String
				
						writeString(this.CreatedBy,dos);
					
					// java.util.Date
				
						writeDate(this.DateCreated,dos);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
					// java.util.Date
				
						writeDate(this.DateModified,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Deleted);
					
					// Integer
				
						writeInteger(this.DeveloperID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ShortDescription,dos);
					
					// String
				
						writeString(this.FullDescription,dos);
					
					// String
				
						writeString(this.PictureURL,dos);
					
					// Integer
				
						writeInteger(this.TotalUnits,dos);
					
					// String
				
						writeString(this.PropertyType,dos);
					
					// String
				
						writeString(this.Tenure,dos);
					
					// String
				
						writeString(this.LandArea,dos);
					
					// String
				
						writeString(this.BuiltUpArea,dos);
					
					// String
				
						writeString(this.CompletionDate,dos);
					
					// String
				
						writeString(this.MaintenanceFee,dos);
					
					// String
				
						writeString(this.Amenities,dos);
					
					// String
				
						writeString(this.Facilities,dos);
					
					// String
				
						writeString(this.Address,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.State,dos);
					
					// String
				
						writeString(this.Postcode,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.PdfUrl,dos);
					
					// String
				
						writeString(this.VideoUrl,dos);
					
					// String
				
						writeString(this.View360Url,dos);
					
					// String
				
						writeString(this.LocationLatitude,dos);
					
					// String
				
						writeString(this.LocationLongitude,dos);
					
					// String
				
						writeString(this.WebsiteURL,dos);
					
					// String
				
						writeString(this.SalesEmail,dos);
					
					// String
				
						writeString(this.SalesContactNo,dos);
					
					// String
				
						writeString(this.SalesAddress,dos);
					
					// Integer
				
						writeInteger(this.isCompleted,dos);
					
					// Integer
				
						writeInteger(this.Published,dos);
					
					// Integer
				
						writeInteger(this.PublishedToPublic,dos);
					
					// Integer
				
						writeInteger(this.Ordering,dos);
					
					// String
				
						writeString(this.NameCn,dos);
					
					// String
				
						writeString(this.ShortDescriptionCn,dos);
					
					// String
				
						writeString(this.FullDescriptionCn,dos);
					
					// String
				
						writeString(this.PropertyTypeCn,dos);
					
					// String
				
						writeString(this.TenureCn,dos);
					
					// String
				
						writeString(this.LandAreaCn,dos);
					
					// String
				
						writeString(this.CompletionDateCn,dos);
					
					// String
				
						writeString(this.MaintenanceFeeCn,dos);
					
					// String
				
						writeString(this.AmenitiesCn,dos);
					
					// String
				
						writeString(this.FacilitiesCn,dos);
					
					// String
				
						writeString(this.AddressCn,dos);
					
					// String
				
						writeString(this.CityCn,dos);
					
					// String
				
						writeString(this.StateCn,dos);
					
					// String
				
						writeString(this.CountryCn,dos);
					
					// Double
				
						if(this.MinSqft == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.MinSqft);
		            	}
					
					// Double
				
						if(this.MaxSqft == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.MaxSqft);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.MinPurchasePrice);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MaxPurchasePrice);
					
					// String
				
						writeString(this.MinBathrooms,dos);
					
					// String
				
						writeString(this.MaxBathrooms,dos);
					
					// String
				
						writeString(this.MinBedrooms,dos);
					
					// String
				
						writeString(this.MaxBedrooms,dos);
					
					// String
				
						writeString(this.SMOEmail,dos);
					
					// Boolean
				
						if(this.IsGovBased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsGovBased);
		            	}
					
					// String
				
						writeString(this.PriceRange,dos);
					
					// String
				
						writeString(this.SubPath,dos);
					
					// Integer
				
						writeInteger(this.SmsGroupID,dos);
					
					// Boolean
				
						if(this.OnlineBookingActivation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.OnlineBookingActivation);
		            	}
					
					// String
				
						writeString(this.KeyPlanViewAction,dos);
					
					// Boolean
				
						if(this.IsEmailEnabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsEmailEnabled);
		            	}
					
					// Boolean
				
						if(this.IsEmailCustomerDisabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsEmailCustomerDisabled);
		            	}
					
					// Integer
				
						writeInteger(this.BookingExpiryInDay,dos);
					
					// Integer
				
						writeInteger(this.BookingExtensionInDay,dos);
					
					// String
				
						writeString(this.PaymentGatewayMerchantId,dos);
					
					// String
				
						writeString(this.PaymentGatewayVerifyKey,dos);
					
					// String
				
						writeString(this.PaymentGatewaySecretKey,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DepositAmount);
					
					// String
				
						writeString(this.LogoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.UUID,dos);
					
					// String
				
						writeString(this.CreatedBy,dos);
					
					// java.util.Date
				
						writeDate(this.DateCreated,dos);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
					// java.util.Date
				
						writeDate(this.DateModified,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Deleted);
					
					// Integer
				
						writeInteger(this.DeveloperID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ShortDescription,dos);
					
					// String
				
						writeString(this.FullDescription,dos);
					
					// String
				
						writeString(this.PictureURL,dos);
					
					// Integer
				
						writeInteger(this.TotalUnits,dos);
					
					// String
				
						writeString(this.PropertyType,dos);
					
					// String
				
						writeString(this.Tenure,dos);
					
					// String
				
						writeString(this.LandArea,dos);
					
					// String
				
						writeString(this.BuiltUpArea,dos);
					
					// String
				
						writeString(this.CompletionDate,dos);
					
					// String
				
						writeString(this.MaintenanceFee,dos);
					
					// String
				
						writeString(this.Amenities,dos);
					
					// String
				
						writeString(this.Facilities,dos);
					
					// String
				
						writeString(this.Address,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.State,dos);
					
					// String
				
						writeString(this.Postcode,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.PdfUrl,dos);
					
					// String
				
						writeString(this.VideoUrl,dos);
					
					// String
				
						writeString(this.View360Url,dos);
					
					// String
				
						writeString(this.LocationLatitude,dos);
					
					// String
				
						writeString(this.LocationLongitude,dos);
					
					// String
				
						writeString(this.WebsiteURL,dos);
					
					// String
				
						writeString(this.SalesEmail,dos);
					
					// String
				
						writeString(this.SalesContactNo,dos);
					
					// String
				
						writeString(this.SalesAddress,dos);
					
					// Integer
				
						writeInteger(this.isCompleted,dos);
					
					// Integer
				
						writeInteger(this.Published,dos);
					
					// Integer
				
						writeInteger(this.PublishedToPublic,dos);
					
					// Integer
				
						writeInteger(this.Ordering,dos);
					
					// String
				
						writeString(this.NameCn,dos);
					
					// String
				
						writeString(this.ShortDescriptionCn,dos);
					
					// String
				
						writeString(this.FullDescriptionCn,dos);
					
					// String
				
						writeString(this.PropertyTypeCn,dos);
					
					// String
				
						writeString(this.TenureCn,dos);
					
					// String
				
						writeString(this.LandAreaCn,dos);
					
					// String
				
						writeString(this.CompletionDateCn,dos);
					
					// String
				
						writeString(this.MaintenanceFeeCn,dos);
					
					// String
				
						writeString(this.AmenitiesCn,dos);
					
					// String
				
						writeString(this.FacilitiesCn,dos);
					
					// String
				
						writeString(this.AddressCn,dos);
					
					// String
				
						writeString(this.CityCn,dos);
					
					// String
				
						writeString(this.StateCn,dos);
					
					// String
				
						writeString(this.CountryCn,dos);
					
					// Double
				
						if(this.MinSqft == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.MinSqft);
		            	}
					
					// Double
				
						if(this.MaxSqft == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.MaxSqft);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.MinPurchasePrice);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MaxPurchasePrice);
					
					// String
				
						writeString(this.MinBathrooms,dos);
					
					// String
				
						writeString(this.MaxBathrooms,dos);
					
					// String
				
						writeString(this.MinBedrooms,dos);
					
					// String
				
						writeString(this.MaxBedrooms,dos);
					
					// String
				
						writeString(this.SMOEmail,dos);
					
					// Boolean
				
						if(this.IsGovBased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsGovBased);
		            	}
					
					// String
				
						writeString(this.PriceRange,dos);
					
					// String
				
						writeString(this.SubPath,dos);
					
					// Integer
				
						writeInteger(this.SmsGroupID,dos);
					
					// Boolean
				
						if(this.OnlineBookingActivation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.OnlineBookingActivation);
		            	}
					
					// String
				
						writeString(this.KeyPlanViewAction,dos);
					
					// Boolean
				
						if(this.IsEmailEnabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsEmailEnabled);
		            	}
					
					// Boolean
				
						if(this.IsEmailCustomerDisabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsEmailCustomerDisabled);
		            	}
					
					// Integer
				
						writeInteger(this.BookingExpiryInDay,dos);
					
					// Integer
				
						writeInteger(this.BookingExtensionInDay,dos);
					
					// String
				
						writeString(this.PaymentGatewayMerchantId,dos);
					
					// String
				
						writeString(this.PaymentGatewayVerifyKey,dos);
					
					// String
				
						writeString(this.PaymentGatewaySecretKey,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DepositAmount);
					
					// String
				
						writeString(this.LogoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UUID="+UUID);
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",ModifiedBy="+ModifiedBy);
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DeveloperID="+String.valueOf(DeveloperID));
		sb.append(",Category="+Category);
		sb.append(",Name="+Name);
		sb.append(",ShortDescription="+ShortDescription);
		sb.append(",FullDescription="+FullDescription);
		sb.append(",PictureURL="+PictureURL);
		sb.append(",TotalUnits="+String.valueOf(TotalUnits));
		sb.append(",PropertyType="+PropertyType);
		sb.append(",Tenure="+Tenure);
		sb.append(",LandArea="+LandArea);
		sb.append(",BuiltUpArea="+BuiltUpArea);
		sb.append(",CompletionDate="+CompletionDate);
		sb.append(",MaintenanceFee="+MaintenanceFee);
		sb.append(",Amenities="+Amenities);
		sb.append(",Facilities="+Facilities);
		sb.append(",Address="+Address);
		sb.append(",City="+City);
		sb.append(",State="+State);
		sb.append(",Postcode="+Postcode);
		sb.append(",Country="+Country);
		sb.append(",PdfUrl="+PdfUrl);
		sb.append(",VideoUrl="+VideoUrl);
		sb.append(",View360Url="+View360Url);
		sb.append(",LocationLatitude="+LocationLatitude);
		sb.append(",LocationLongitude="+LocationLongitude);
		sb.append(",WebsiteURL="+WebsiteURL);
		sb.append(",SalesEmail="+SalesEmail);
		sb.append(",SalesContactNo="+SalesContactNo);
		sb.append(",SalesAddress="+SalesAddress);
		sb.append(",isCompleted="+String.valueOf(isCompleted));
		sb.append(",Published="+String.valueOf(Published));
		sb.append(",PublishedToPublic="+String.valueOf(PublishedToPublic));
		sb.append(",Ordering="+String.valueOf(Ordering));
		sb.append(",NameCn="+NameCn);
		sb.append(",ShortDescriptionCn="+ShortDescriptionCn);
		sb.append(",FullDescriptionCn="+FullDescriptionCn);
		sb.append(",PropertyTypeCn="+PropertyTypeCn);
		sb.append(",TenureCn="+TenureCn);
		sb.append(",LandAreaCn="+LandAreaCn);
		sb.append(",CompletionDateCn="+CompletionDateCn);
		sb.append(",MaintenanceFeeCn="+MaintenanceFeeCn);
		sb.append(",AmenitiesCn="+AmenitiesCn);
		sb.append(",FacilitiesCn="+FacilitiesCn);
		sb.append(",AddressCn="+AddressCn);
		sb.append(",CityCn="+CityCn);
		sb.append(",StateCn="+StateCn);
		sb.append(",CountryCn="+CountryCn);
		sb.append(",MinSqft="+String.valueOf(MinSqft));
		sb.append(",MaxSqft="+String.valueOf(MaxSqft));
		sb.append(",MinPurchasePrice="+String.valueOf(MinPurchasePrice));
		sb.append(",MaxPurchasePrice="+String.valueOf(MaxPurchasePrice));
		sb.append(",MinBathrooms="+MinBathrooms);
		sb.append(",MaxBathrooms="+MaxBathrooms);
		sb.append(",MinBedrooms="+MinBedrooms);
		sb.append(",MaxBedrooms="+MaxBedrooms);
		sb.append(",SMOEmail="+SMOEmail);
		sb.append(",IsGovBased="+String.valueOf(IsGovBased));
		sb.append(",PriceRange="+PriceRange);
		sb.append(",SubPath="+SubPath);
		sb.append(",SmsGroupID="+String.valueOf(SmsGroupID));
		sb.append(",OnlineBookingActivation="+String.valueOf(OnlineBookingActivation));
		sb.append(",KeyPlanViewAction="+KeyPlanViewAction);
		sb.append(",IsEmailEnabled="+String.valueOf(IsEmailEnabled));
		sb.append(",IsEmailCustomerDisabled="+String.valueOf(IsEmailCustomerDisabled));
		sb.append(",BookingExpiryInDay="+String.valueOf(BookingExpiryInDay));
		sb.append(",BookingExtensionInDay="+String.valueOf(BookingExtensionInDay));
		sb.append(",PaymentGatewayMerchantId="+PaymentGatewayMerchantId);
		sb.append(",PaymentGatewayVerifyKey="+PaymentGatewayVerifyKey);
		sb.append(",PaymentGatewaySecretKey="+PaymentGatewaySecretKey);
		sb.append(",DepositAmount="+String.valueOf(DepositAmount));
		sb.append(",LogoPath="+LogoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_projects = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_projects = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String UUID;

				public String getUUID () {
					return this.UUID;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public boolean Deleted;

				public boolean getDeleted () {
					return this.Deleted;
				}
				
			    public Integer DeveloperID;

				public Integer getDeveloperID () {
					return this.DeveloperID;
				}
				
			    public String Category;

				public String getCategory () {
					return this.Category;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ShortDescription;

				public String getShortDescription () {
					return this.ShortDescription;
				}
				
			    public String FullDescription;

				public String getFullDescription () {
					return this.FullDescription;
				}
				
			    public String PictureURL;

				public String getPictureURL () {
					return this.PictureURL;
				}
				
			    public Integer TotalUnits;

				public Integer getTotalUnits () {
					return this.TotalUnits;
				}
				
			    public String PropertyType;

				public String getPropertyType () {
					return this.PropertyType;
				}
				
			    public String Tenure;

				public String getTenure () {
					return this.Tenure;
				}
				
			    public String LandArea;

				public String getLandArea () {
					return this.LandArea;
				}
				
			    public String BuiltUpArea;

				public String getBuiltUpArea () {
					return this.BuiltUpArea;
				}
				
			    public String CompletionDate;

				public String getCompletionDate () {
					return this.CompletionDate;
				}
				
			    public String MaintenanceFee;

				public String getMaintenanceFee () {
					return this.MaintenanceFee;
				}
				
			    public String Amenities;

				public String getAmenities () {
					return this.Amenities;
				}
				
			    public String Facilities;

				public String getFacilities () {
					return this.Facilities;
				}
				
			    public String Address;

				public String getAddress () {
					return this.Address;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String State;

				public String getState () {
					return this.State;
				}
				
			    public String Postcode;

				public String getPostcode () {
					return this.Postcode;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String PdfUrl;

				public String getPdfUrl () {
					return this.PdfUrl;
				}
				
			    public String VideoUrl;

				public String getVideoUrl () {
					return this.VideoUrl;
				}
				
			    public String View360Url;

				public String getView360Url () {
					return this.View360Url;
				}
				
			    public String LocationLatitude;

				public String getLocationLatitude () {
					return this.LocationLatitude;
				}
				
			    public String LocationLongitude;

				public String getLocationLongitude () {
					return this.LocationLongitude;
				}
				
			    public String WebsiteURL;

				public String getWebsiteURL () {
					return this.WebsiteURL;
				}
				
			    public String SalesEmail;

				public String getSalesEmail () {
					return this.SalesEmail;
				}
				
			    public String SalesContactNo;

				public String getSalesContactNo () {
					return this.SalesContactNo;
				}
				
			    public String SalesAddress;

				public String getSalesAddress () {
					return this.SalesAddress;
				}
				
			    public Integer isCompleted;

				public Integer getIsCompleted () {
					return this.isCompleted;
				}
				
			    public Integer Published;

				public Integer getPublished () {
					return this.Published;
				}
				
			    public Integer PublishedToPublic;

				public Integer getPublishedToPublic () {
					return this.PublishedToPublic;
				}
				
			    public Integer Ordering;

				public Integer getOrdering () {
					return this.Ordering;
				}
				
			    public String NameCn;

				public String getNameCn () {
					return this.NameCn;
				}
				
			    public String ShortDescriptionCn;

				public String getShortDescriptionCn () {
					return this.ShortDescriptionCn;
				}
				
			    public String FullDescriptionCn;

				public String getFullDescriptionCn () {
					return this.FullDescriptionCn;
				}
				
			    public String PropertyTypeCn;

				public String getPropertyTypeCn () {
					return this.PropertyTypeCn;
				}
				
			    public String TenureCn;

				public String getTenureCn () {
					return this.TenureCn;
				}
				
			    public String LandAreaCn;

				public String getLandAreaCn () {
					return this.LandAreaCn;
				}
				
			    public String CompletionDateCn;

				public String getCompletionDateCn () {
					return this.CompletionDateCn;
				}
				
			    public String MaintenanceFeeCn;

				public String getMaintenanceFeeCn () {
					return this.MaintenanceFeeCn;
				}
				
			    public String AmenitiesCn;

				public String getAmenitiesCn () {
					return this.AmenitiesCn;
				}
				
			    public String FacilitiesCn;

				public String getFacilitiesCn () {
					return this.FacilitiesCn;
				}
				
			    public String AddressCn;

				public String getAddressCn () {
					return this.AddressCn;
				}
				
			    public String CityCn;

				public String getCityCn () {
					return this.CityCn;
				}
				
			    public String StateCn;

				public String getStateCn () {
					return this.StateCn;
				}
				
			    public String CountryCn;

				public String getCountryCn () {
					return this.CountryCn;
				}
				
			    public Double MinSqft;

				public Double getMinSqft () {
					return this.MinSqft;
				}
				
			    public Double MaxSqft;

				public Double getMaxSqft () {
					return this.MaxSqft;
				}
				
			    public BigDecimal MinPurchasePrice;

				public BigDecimal getMinPurchasePrice () {
					return this.MinPurchasePrice;
				}
				
			    public BigDecimal MaxPurchasePrice;

				public BigDecimal getMaxPurchasePrice () {
					return this.MaxPurchasePrice;
				}
				
			    public String MinBathrooms;

				public String getMinBathrooms () {
					return this.MinBathrooms;
				}
				
			    public String MaxBathrooms;

				public String getMaxBathrooms () {
					return this.MaxBathrooms;
				}
				
			    public String MinBedrooms;

				public String getMinBedrooms () {
					return this.MinBedrooms;
				}
				
			    public String MaxBedrooms;

				public String getMaxBedrooms () {
					return this.MaxBedrooms;
				}
				
			    public String SMOEmail;

				public String getSMOEmail () {
					return this.SMOEmail;
				}
				
			    public Boolean IsGovBased;

				public Boolean getIsGovBased () {
					return this.IsGovBased;
				}
				
			    public String PriceRange;

				public String getPriceRange () {
					return this.PriceRange;
				}
				
			    public String SubPath;

				public String getSubPath () {
					return this.SubPath;
				}
				
			    public Integer SmsGroupID;

				public Integer getSmsGroupID () {
					return this.SmsGroupID;
				}
				
			    public Boolean OnlineBookingActivation;

				public Boolean getOnlineBookingActivation () {
					return this.OnlineBookingActivation;
				}
				
			    public String KeyPlanViewAction;

				public String getKeyPlanViewAction () {
					return this.KeyPlanViewAction;
				}
				
			    public Boolean IsEmailEnabled;

				public Boolean getIsEmailEnabled () {
					return this.IsEmailEnabled;
				}
				
			    public Boolean IsEmailCustomerDisabled;

				public Boolean getIsEmailCustomerDisabled () {
					return this.IsEmailCustomerDisabled;
				}
				
			    public Integer BookingExpiryInDay;

				public Integer getBookingExpiryInDay () {
					return this.BookingExpiryInDay;
				}
				
			    public Integer BookingExtensionInDay;

				public Integer getBookingExtensionInDay () {
					return this.BookingExtensionInDay;
				}
				
			    public String PaymentGatewayMerchantId;

				public String getPaymentGatewayMerchantId () {
					return this.PaymentGatewayMerchantId;
				}
				
			    public String PaymentGatewayVerifyKey;

				public String getPaymentGatewayVerifyKey () {
					return this.PaymentGatewayVerifyKey;
				}
				
			    public String PaymentGatewaySecretKey;

				public String getPaymentGatewaySecretKey () {
					return this.PaymentGatewaySecretKey;
				}
				
			    public BigDecimal DepositAmount;

				public BigDecimal getDepositAmount () {
					return this.DepositAmount;
				}
				
			    public String LogoPath;

				public String getLogoPath () {
					return this.LogoPath;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UUID == null) ? 0 : this.UUID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.UUID == null) {
							if (other.UUID != null)
								return false;
						
						} else if (!this.UUID.equals(other.UUID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.UUID = this.UUID;
	            other.CreatedBy = this.CreatedBy;
	            other.DateCreated = this.DateCreated;
	            other.ModifiedBy = this.ModifiedBy;
	            other.DateModified = this.DateModified;
	            other.Deleted = this.Deleted;
	            other.DeveloperID = this.DeveloperID;
	            other.Category = this.Category;
	            other.Name = this.Name;
	            other.ShortDescription = this.ShortDescription;
	            other.FullDescription = this.FullDescription;
	            other.PictureURL = this.PictureURL;
	            other.TotalUnits = this.TotalUnits;
	            other.PropertyType = this.PropertyType;
	            other.Tenure = this.Tenure;
	            other.LandArea = this.LandArea;
	            other.BuiltUpArea = this.BuiltUpArea;
	            other.CompletionDate = this.CompletionDate;
	            other.MaintenanceFee = this.MaintenanceFee;
	            other.Amenities = this.Amenities;
	            other.Facilities = this.Facilities;
	            other.Address = this.Address;
	            other.City = this.City;
	            other.State = this.State;
	            other.Postcode = this.Postcode;
	            other.Country = this.Country;
	            other.PdfUrl = this.PdfUrl;
	            other.VideoUrl = this.VideoUrl;
	            other.View360Url = this.View360Url;
	            other.LocationLatitude = this.LocationLatitude;
	            other.LocationLongitude = this.LocationLongitude;
	            other.WebsiteURL = this.WebsiteURL;
	            other.SalesEmail = this.SalesEmail;
	            other.SalesContactNo = this.SalesContactNo;
	            other.SalesAddress = this.SalesAddress;
	            other.isCompleted = this.isCompleted;
	            other.Published = this.Published;
	            other.PublishedToPublic = this.PublishedToPublic;
	            other.Ordering = this.Ordering;
	            other.NameCn = this.NameCn;
	            other.ShortDescriptionCn = this.ShortDescriptionCn;
	            other.FullDescriptionCn = this.FullDescriptionCn;
	            other.PropertyTypeCn = this.PropertyTypeCn;
	            other.TenureCn = this.TenureCn;
	            other.LandAreaCn = this.LandAreaCn;
	            other.CompletionDateCn = this.CompletionDateCn;
	            other.MaintenanceFeeCn = this.MaintenanceFeeCn;
	            other.AmenitiesCn = this.AmenitiesCn;
	            other.FacilitiesCn = this.FacilitiesCn;
	            other.AddressCn = this.AddressCn;
	            other.CityCn = this.CityCn;
	            other.StateCn = this.StateCn;
	            other.CountryCn = this.CountryCn;
	            other.MinSqft = this.MinSqft;
	            other.MaxSqft = this.MaxSqft;
	            other.MinPurchasePrice = this.MinPurchasePrice;
	            other.MaxPurchasePrice = this.MaxPurchasePrice;
	            other.MinBathrooms = this.MinBathrooms;
	            other.MaxBathrooms = this.MaxBathrooms;
	            other.MinBedrooms = this.MinBedrooms;
	            other.MaxBedrooms = this.MaxBedrooms;
	            other.SMOEmail = this.SMOEmail;
	            other.IsGovBased = this.IsGovBased;
	            other.PriceRange = this.PriceRange;
	            other.SubPath = this.SubPath;
	            other.SmsGroupID = this.SmsGroupID;
	            other.OnlineBookingActivation = this.OnlineBookingActivation;
	            other.KeyPlanViewAction = this.KeyPlanViewAction;
	            other.IsEmailEnabled = this.IsEmailEnabled;
	            other.IsEmailCustomerDisabled = this.IsEmailCustomerDisabled;
	            other.BookingExpiryInDay = this.BookingExpiryInDay;
	            other.BookingExtensionInDay = this.BookingExtensionInDay;
	            other.PaymentGatewayMerchantId = this.PaymentGatewayMerchantId;
	            other.PaymentGatewayVerifyKey = this.PaymentGatewayVerifyKey;
	            other.PaymentGatewaySecretKey = this.PaymentGatewaySecretKey;
	            other.DepositAmount = this.DepositAmount;
	            other.LogoPath = this.LogoPath;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.UUID = this.UUID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.UUID = readString(dis);
					
					this.CreatedBy = readString(dis);
					
					this.DateCreated = readDate(dis);
					
					this.ModifiedBy = readString(dis);
					
					this.DateModified = readDate(dis);
					
			        this.Deleted = dis.readBoolean();
					
						this.DeveloperID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Name = readString(dis);
					
					this.ShortDescription = readString(dis);
					
					this.FullDescription = readString(dis);
					
					this.PictureURL = readString(dis);
					
						this.TotalUnits = readInteger(dis);
					
					this.PropertyType = readString(dis);
					
					this.Tenure = readString(dis);
					
					this.LandArea = readString(dis);
					
					this.BuiltUpArea = readString(dis);
					
					this.CompletionDate = readString(dis);
					
					this.MaintenanceFee = readString(dis);
					
					this.Amenities = readString(dis);
					
					this.Facilities = readString(dis);
					
					this.Address = readString(dis);
					
					this.City = readString(dis);
					
					this.State = readString(dis);
					
					this.Postcode = readString(dis);
					
					this.Country = readString(dis);
					
					this.PdfUrl = readString(dis);
					
					this.VideoUrl = readString(dis);
					
					this.View360Url = readString(dis);
					
					this.LocationLatitude = readString(dis);
					
					this.LocationLongitude = readString(dis);
					
					this.WebsiteURL = readString(dis);
					
					this.SalesEmail = readString(dis);
					
					this.SalesContactNo = readString(dis);
					
					this.SalesAddress = readString(dis);
					
						this.isCompleted = readInteger(dis);
					
						this.Published = readInteger(dis);
					
						this.PublishedToPublic = readInteger(dis);
					
						this.Ordering = readInteger(dis);
					
					this.NameCn = readString(dis);
					
					this.ShortDescriptionCn = readString(dis);
					
					this.FullDescriptionCn = readString(dis);
					
					this.PropertyTypeCn = readString(dis);
					
					this.TenureCn = readString(dis);
					
					this.LandAreaCn = readString(dis);
					
					this.CompletionDateCn = readString(dis);
					
					this.MaintenanceFeeCn = readString(dis);
					
					this.AmenitiesCn = readString(dis);
					
					this.FacilitiesCn = readString(dis);
					
					this.AddressCn = readString(dis);
					
					this.CityCn = readString(dis);
					
					this.StateCn = readString(dis);
					
					this.CountryCn = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MinSqft = null;
           				} else {
           			    	this.MinSqft = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MaxSqft = null;
           				} else {
           			    	this.MaxSqft = dis.readDouble();
           				}
					
						this.MinPurchasePrice = (BigDecimal) dis.readObject();
					
						this.MaxPurchasePrice = (BigDecimal) dis.readObject();
					
					this.MinBathrooms = readString(dis);
					
					this.MaxBathrooms = readString(dis);
					
					this.MinBedrooms = readString(dis);
					
					this.MaxBedrooms = readString(dis);
					
					this.SMOEmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsGovBased = null;
           				} else {
           			    	this.IsGovBased = dis.readBoolean();
           				}
					
					this.PriceRange = readString(dis);
					
					this.SubPath = readString(dis);
					
						this.SmsGroupID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OnlineBookingActivation = null;
           				} else {
           			    	this.OnlineBookingActivation = dis.readBoolean();
           				}
					
					this.KeyPlanViewAction = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsEmailEnabled = null;
           				} else {
           			    	this.IsEmailEnabled = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsEmailCustomerDisabled = null;
           				} else {
           			    	this.IsEmailCustomerDisabled = dis.readBoolean();
           				}
					
						this.BookingExpiryInDay = readInteger(dis);
					
						this.BookingExtensionInDay = readInteger(dis);
					
					this.PaymentGatewayMerchantId = readString(dis);
					
					this.PaymentGatewayVerifyKey = readString(dis);
					
					this.PaymentGatewaySecretKey = readString(dis);
					
						this.DepositAmount = (BigDecimal) dis.readObject();
					
					this.LogoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.UUID = readString(dis);
					
					this.CreatedBy = readString(dis);
					
					this.DateCreated = readDate(dis);
					
					this.ModifiedBy = readString(dis);
					
					this.DateModified = readDate(dis);
					
			        this.Deleted = dis.readBoolean();
					
						this.DeveloperID = readInteger(dis);
					
					this.Category = readString(dis);
					
					this.Name = readString(dis);
					
					this.ShortDescription = readString(dis);
					
					this.FullDescription = readString(dis);
					
					this.PictureURL = readString(dis);
					
						this.TotalUnits = readInteger(dis);
					
					this.PropertyType = readString(dis);
					
					this.Tenure = readString(dis);
					
					this.LandArea = readString(dis);
					
					this.BuiltUpArea = readString(dis);
					
					this.CompletionDate = readString(dis);
					
					this.MaintenanceFee = readString(dis);
					
					this.Amenities = readString(dis);
					
					this.Facilities = readString(dis);
					
					this.Address = readString(dis);
					
					this.City = readString(dis);
					
					this.State = readString(dis);
					
					this.Postcode = readString(dis);
					
					this.Country = readString(dis);
					
					this.PdfUrl = readString(dis);
					
					this.VideoUrl = readString(dis);
					
					this.View360Url = readString(dis);
					
					this.LocationLatitude = readString(dis);
					
					this.LocationLongitude = readString(dis);
					
					this.WebsiteURL = readString(dis);
					
					this.SalesEmail = readString(dis);
					
					this.SalesContactNo = readString(dis);
					
					this.SalesAddress = readString(dis);
					
						this.isCompleted = readInteger(dis);
					
						this.Published = readInteger(dis);
					
						this.PublishedToPublic = readInteger(dis);
					
						this.Ordering = readInteger(dis);
					
					this.NameCn = readString(dis);
					
					this.ShortDescriptionCn = readString(dis);
					
					this.FullDescriptionCn = readString(dis);
					
					this.PropertyTypeCn = readString(dis);
					
					this.TenureCn = readString(dis);
					
					this.LandAreaCn = readString(dis);
					
					this.CompletionDateCn = readString(dis);
					
					this.MaintenanceFeeCn = readString(dis);
					
					this.AmenitiesCn = readString(dis);
					
					this.FacilitiesCn = readString(dis);
					
					this.AddressCn = readString(dis);
					
					this.CityCn = readString(dis);
					
					this.StateCn = readString(dis);
					
					this.CountryCn = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MinSqft = null;
           				} else {
           			    	this.MinSqft = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MaxSqft = null;
           				} else {
           			    	this.MaxSqft = dis.readDouble();
           				}
					
						this.MinPurchasePrice = (BigDecimal) dis.readObject();
					
						this.MaxPurchasePrice = (BigDecimal) dis.readObject();
					
					this.MinBathrooms = readString(dis);
					
					this.MaxBathrooms = readString(dis);
					
					this.MinBedrooms = readString(dis);
					
					this.MaxBedrooms = readString(dis);
					
					this.SMOEmail = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsGovBased = null;
           				} else {
           			    	this.IsGovBased = dis.readBoolean();
           				}
					
					this.PriceRange = readString(dis);
					
					this.SubPath = readString(dis);
					
						this.SmsGroupID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OnlineBookingActivation = null;
           				} else {
           			    	this.OnlineBookingActivation = dis.readBoolean();
           				}
					
					this.KeyPlanViewAction = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsEmailEnabled = null;
           				} else {
           			    	this.IsEmailEnabled = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IsEmailCustomerDisabled = null;
           				} else {
           			    	this.IsEmailCustomerDisabled = dis.readBoolean();
           				}
					
						this.BookingExpiryInDay = readInteger(dis);
					
						this.BookingExtensionInDay = readInteger(dis);
					
					this.PaymentGatewayMerchantId = readString(dis);
					
					this.PaymentGatewayVerifyKey = readString(dis);
					
					this.PaymentGatewaySecretKey = readString(dis);
					
						this.DepositAmount = (BigDecimal) dis.readObject();
					
					this.LogoPath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.UUID,dos);
					
					// String
				
						writeString(this.CreatedBy,dos);
					
					// java.util.Date
				
						writeDate(this.DateCreated,dos);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
					// java.util.Date
				
						writeDate(this.DateModified,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Deleted);
					
					// Integer
				
						writeInteger(this.DeveloperID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ShortDescription,dos);
					
					// String
				
						writeString(this.FullDescription,dos);
					
					// String
				
						writeString(this.PictureURL,dos);
					
					// Integer
				
						writeInteger(this.TotalUnits,dos);
					
					// String
				
						writeString(this.PropertyType,dos);
					
					// String
				
						writeString(this.Tenure,dos);
					
					// String
				
						writeString(this.LandArea,dos);
					
					// String
				
						writeString(this.BuiltUpArea,dos);
					
					// String
				
						writeString(this.CompletionDate,dos);
					
					// String
				
						writeString(this.MaintenanceFee,dos);
					
					// String
				
						writeString(this.Amenities,dos);
					
					// String
				
						writeString(this.Facilities,dos);
					
					// String
				
						writeString(this.Address,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.State,dos);
					
					// String
				
						writeString(this.Postcode,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.PdfUrl,dos);
					
					// String
				
						writeString(this.VideoUrl,dos);
					
					// String
				
						writeString(this.View360Url,dos);
					
					// String
				
						writeString(this.LocationLatitude,dos);
					
					// String
				
						writeString(this.LocationLongitude,dos);
					
					// String
				
						writeString(this.WebsiteURL,dos);
					
					// String
				
						writeString(this.SalesEmail,dos);
					
					// String
				
						writeString(this.SalesContactNo,dos);
					
					// String
				
						writeString(this.SalesAddress,dos);
					
					// Integer
				
						writeInteger(this.isCompleted,dos);
					
					// Integer
				
						writeInteger(this.Published,dos);
					
					// Integer
				
						writeInteger(this.PublishedToPublic,dos);
					
					// Integer
				
						writeInteger(this.Ordering,dos);
					
					// String
				
						writeString(this.NameCn,dos);
					
					// String
				
						writeString(this.ShortDescriptionCn,dos);
					
					// String
				
						writeString(this.FullDescriptionCn,dos);
					
					// String
				
						writeString(this.PropertyTypeCn,dos);
					
					// String
				
						writeString(this.TenureCn,dos);
					
					// String
				
						writeString(this.LandAreaCn,dos);
					
					// String
				
						writeString(this.CompletionDateCn,dos);
					
					// String
				
						writeString(this.MaintenanceFeeCn,dos);
					
					// String
				
						writeString(this.AmenitiesCn,dos);
					
					// String
				
						writeString(this.FacilitiesCn,dos);
					
					// String
				
						writeString(this.AddressCn,dos);
					
					// String
				
						writeString(this.CityCn,dos);
					
					// String
				
						writeString(this.StateCn,dos);
					
					// String
				
						writeString(this.CountryCn,dos);
					
					// Double
				
						if(this.MinSqft == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.MinSqft);
		            	}
					
					// Double
				
						if(this.MaxSqft == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.MaxSqft);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.MinPurchasePrice);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MaxPurchasePrice);
					
					// String
				
						writeString(this.MinBathrooms,dos);
					
					// String
				
						writeString(this.MaxBathrooms,dos);
					
					// String
				
						writeString(this.MinBedrooms,dos);
					
					// String
				
						writeString(this.MaxBedrooms,dos);
					
					// String
				
						writeString(this.SMOEmail,dos);
					
					// Boolean
				
						if(this.IsGovBased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsGovBased);
		            	}
					
					// String
				
						writeString(this.PriceRange,dos);
					
					// String
				
						writeString(this.SubPath,dos);
					
					// Integer
				
						writeInteger(this.SmsGroupID,dos);
					
					// Boolean
				
						if(this.OnlineBookingActivation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.OnlineBookingActivation);
		            	}
					
					// String
				
						writeString(this.KeyPlanViewAction,dos);
					
					// Boolean
				
						if(this.IsEmailEnabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsEmailEnabled);
		            	}
					
					// Boolean
				
						if(this.IsEmailCustomerDisabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsEmailCustomerDisabled);
		            	}
					
					// Integer
				
						writeInteger(this.BookingExpiryInDay,dos);
					
					// Integer
				
						writeInteger(this.BookingExtensionInDay,dos);
					
					// String
				
						writeString(this.PaymentGatewayMerchantId,dos);
					
					// String
				
						writeString(this.PaymentGatewayVerifyKey,dos);
					
					// String
				
						writeString(this.PaymentGatewaySecretKey,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DepositAmount);
					
					// String
				
						writeString(this.LogoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.UUID,dos);
					
					// String
				
						writeString(this.CreatedBy,dos);
					
					// java.util.Date
				
						writeDate(this.DateCreated,dos);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
					// java.util.Date
				
						writeDate(this.DateModified,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Deleted);
					
					// Integer
				
						writeInteger(this.DeveloperID,dos);
					
					// String
				
						writeString(this.Category,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ShortDescription,dos);
					
					// String
				
						writeString(this.FullDescription,dos);
					
					// String
				
						writeString(this.PictureURL,dos);
					
					// Integer
				
						writeInteger(this.TotalUnits,dos);
					
					// String
				
						writeString(this.PropertyType,dos);
					
					// String
				
						writeString(this.Tenure,dos);
					
					// String
				
						writeString(this.LandArea,dos);
					
					// String
				
						writeString(this.BuiltUpArea,dos);
					
					// String
				
						writeString(this.CompletionDate,dos);
					
					// String
				
						writeString(this.MaintenanceFee,dos);
					
					// String
				
						writeString(this.Amenities,dos);
					
					// String
				
						writeString(this.Facilities,dos);
					
					// String
				
						writeString(this.Address,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.State,dos);
					
					// String
				
						writeString(this.Postcode,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.PdfUrl,dos);
					
					// String
				
						writeString(this.VideoUrl,dos);
					
					// String
				
						writeString(this.View360Url,dos);
					
					// String
				
						writeString(this.LocationLatitude,dos);
					
					// String
				
						writeString(this.LocationLongitude,dos);
					
					// String
				
						writeString(this.WebsiteURL,dos);
					
					// String
				
						writeString(this.SalesEmail,dos);
					
					// String
				
						writeString(this.SalesContactNo,dos);
					
					// String
				
						writeString(this.SalesAddress,dos);
					
					// Integer
				
						writeInteger(this.isCompleted,dos);
					
					// Integer
				
						writeInteger(this.Published,dos);
					
					// Integer
				
						writeInteger(this.PublishedToPublic,dos);
					
					// Integer
				
						writeInteger(this.Ordering,dos);
					
					// String
				
						writeString(this.NameCn,dos);
					
					// String
				
						writeString(this.ShortDescriptionCn,dos);
					
					// String
				
						writeString(this.FullDescriptionCn,dos);
					
					// String
				
						writeString(this.PropertyTypeCn,dos);
					
					// String
				
						writeString(this.TenureCn,dos);
					
					// String
				
						writeString(this.LandAreaCn,dos);
					
					// String
				
						writeString(this.CompletionDateCn,dos);
					
					// String
				
						writeString(this.MaintenanceFeeCn,dos);
					
					// String
				
						writeString(this.AmenitiesCn,dos);
					
					// String
				
						writeString(this.FacilitiesCn,dos);
					
					// String
				
						writeString(this.AddressCn,dos);
					
					// String
				
						writeString(this.CityCn,dos);
					
					// String
				
						writeString(this.StateCn,dos);
					
					// String
				
						writeString(this.CountryCn,dos);
					
					// Double
				
						if(this.MinSqft == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.MinSqft);
		            	}
					
					// Double
				
						if(this.MaxSqft == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.MaxSqft);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.MinPurchasePrice);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MaxPurchasePrice);
					
					// String
				
						writeString(this.MinBathrooms,dos);
					
					// String
				
						writeString(this.MaxBathrooms,dos);
					
					// String
				
						writeString(this.MinBedrooms,dos);
					
					// String
				
						writeString(this.MaxBedrooms,dos);
					
					// String
				
						writeString(this.SMOEmail,dos);
					
					// Boolean
				
						if(this.IsGovBased == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsGovBased);
		            	}
					
					// String
				
						writeString(this.PriceRange,dos);
					
					// String
				
						writeString(this.SubPath,dos);
					
					// Integer
				
						writeInteger(this.SmsGroupID,dos);
					
					// Boolean
				
						if(this.OnlineBookingActivation == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.OnlineBookingActivation);
		            	}
					
					// String
				
						writeString(this.KeyPlanViewAction,dos);
					
					// Boolean
				
						if(this.IsEmailEnabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsEmailEnabled);
		            	}
					
					// Boolean
				
						if(this.IsEmailCustomerDisabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IsEmailCustomerDisabled);
		            	}
					
					// Integer
				
						writeInteger(this.BookingExpiryInDay,dos);
					
					// Integer
				
						writeInteger(this.BookingExtensionInDay,dos);
					
					// String
				
						writeString(this.PaymentGatewayMerchantId,dos);
					
					// String
				
						writeString(this.PaymentGatewayVerifyKey,dos);
					
					// String
				
						writeString(this.PaymentGatewaySecretKey,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DepositAmount);
					
					// String
				
						writeString(this.LogoPath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UUID="+UUID);
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",ModifiedBy="+ModifiedBy);
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DeveloperID="+String.valueOf(DeveloperID));
		sb.append(",Category="+Category);
		sb.append(",Name="+Name);
		sb.append(",ShortDescription="+ShortDescription);
		sb.append(",FullDescription="+FullDescription);
		sb.append(",PictureURL="+PictureURL);
		sb.append(",TotalUnits="+String.valueOf(TotalUnits));
		sb.append(",PropertyType="+PropertyType);
		sb.append(",Tenure="+Tenure);
		sb.append(",LandArea="+LandArea);
		sb.append(",BuiltUpArea="+BuiltUpArea);
		sb.append(",CompletionDate="+CompletionDate);
		sb.append(",MaintenanceFee="+MaintenanceFee);
		sb.append(",Amenities="+Amenities);
		sb.append(",Facilities="+Facilities);
		sb.append(",Address="+Address);
		sb.append(",City="+City);
		sb.append(",State="+State);
		sb.append(",Postcode="+Postcode);
		sb.append(",Country="+Country);
		sb.append(",PdfUrl="+PdfUrl);
		sb.append(",VideoUrl="+VideoUrl);
		sb.append(",View360Url="+View360Url);
		sb.append(",LocationLatitude="+LocationLatitude);
		sb.append(",LocationLongitude="+LocationLongitude);
		sb.append(",WebsiteURL="+WebsiteURL);
		sb.append(",SalesEmail="+SalesEmail);
		sb.append(",SalesContactNo="+SalesContactNo);
		sb.append(",SalesAddress="+SalesAddress);
		sb.append(",isCompleted="+String.valueOf(isCompleted));
		sb.append(",Published="+String.valueOf(Published));
		sb.append(",PublishedToPublic="+String.valueOf(PublishedToPublic));
		sb.append(",Ordering="+String.valueOf(Ordering));
		sb.append(",NameCn="+NameCn);
		sb.append(",ShortDescriptionCn="+ShortDescriptionCn);
		sb.append(",FullDescriptionCn="+FullDescriptionCn);
		sb.append(",PropertyTypeCn="+PropertyTypeCn);
		sb.append(",TenureCn="+TenureCn);
		sb.append(",LandAreaCn="+LandAreaCn);
		sb.append(",CompletionDateCn="+CompletionDateCn);
		sb.append(",MaintenanceFeeCn="+MaintenanceFeeCn);
		sb.append(",AmenitiesCn="+AmenitiesCn);
		sb.append(",FacilitiesCn="+FacilitiesCn);
		sb.append(",AddressCn="+AddressCn);
		sb.append(",CityCn="+CityCn);
		sb.append(",StateCn="+StateCn);
		sb.append(",CountryCn="+CountryCn);
		sb.append(",MinSqft="+String.valueOf(MinSqft));
		sb.append(",MaxSqft="+String.valueOf(MaxSqft));
		sb.append(",MinPurchasePrice="+String.valueOf(MinPurchasePrice));
		sb.append(",MaxPurchasePrice="+String.valueOf(MaxPurchasePrice));
		sb.append(",MinBathrooms="+MinBathrooms);
		sb.append(",MaxBathrooms="+MaxBathrooms);
		sb.append(",MinBedrooms="+MinBedrooms);
		sb.append(",MaxBedrooms="+MaxBedrooms);
		sb.append(",SMOEmail="+SMOEmail);
		sb.append(",IsGovBased="+String.valueOf(IsGovBased));
		sb.append(",PriceRange="+PriceRange);
		sb.append(",SubPath="+SubPath);
		sb.append(",SmsGroupID="+String.valueOf(SmsGroupID));
		sb.append(",OnlineBookingActivation="+String.valueOf(OnlineBookingActivation));
		sb.append(",KeyPlanViewAction="+KeyPlanViewAction);
		sb.append(",IsEmailEnabled="+String.valueOf(IsEmailEnabled));
		sb.append(",IsEmailCustomerDisabled="+String.valueOf(IsEmailCustomerDisabled));
		sb.append(",BookingExpiryInDay="+String.valueOf(BookingExpiryInDay));
		sb.append(",BookingExtensionInDay="+String.valueOf(BookingExtensionInDay));
		sb.append(",PaymentGatewayMerchantId="+PaymentGatewayMerchantId);
		sb.append(",PaymentGatewayVerifyKey="+PaymentGatewayVerifyKey);
		sb.append(",PaymentGatewaySecretKey="+PaymentGatewaySecretKey);
		sb.append(",DepositAmount="+String.valueOf(DepositAmount));
		sb.append(",LogoPath="+LogoPath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UUID, other.UUID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
projectsPipelineStruct projectsPipeline = new projectsPipelineStruct();
projectsPipelineStruct row3 = projectsPipeline;







	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "property_projects";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		
        String properties_tDBOutput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
            properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_1 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_DataWarehouse" + "?" + properties_tDBOutput_1;
		
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "skyuser";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:BKnJ8Ky11DwWigpQIkeVR8z/E9U4MUNz0y7kkjlJ8kNaUSKN5NkzYDIu");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	

				String insert_tDBOutput_1 = "INSERT INTO `" + "property_projects" + "` (`ProjectID`,`Name`,`TotalUnits`,`PropertyType`,`Tenure`,`City`) VALUES (?,?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 100;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
		        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tFlowMeter_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_4", false);
		start_Hash.put("tFlowMeter_4", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"projectsPipeline");
					}
				
		int tos_count_tFlowMeter_4 = 0;
		

    int count_tFlowMeter_4 = 0; 
 



/**
 * [tFlowMeter_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
projectsPipelineStruct projectsPipeline_tmp = new projectsPipelineStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0; 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "skyuser";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:DYRFQmoHuGoMRGaDLmk9uKoxbdoMi95W38tsJmknprMnJyW/wk8Ax6KB");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
        String properties_tDBInput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_1 == null || properties_tDBInput_1.trim().length() == 0) {
            properties_tDBInput_1 = "";
        }
        String url_tDBInput_1 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_STUDENT" + "?" + properties_tDBInput_1;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `projects`.`UUID`, \n  `projects`.`CreatedBy`, \n  `projects`.`DateCreated`, \n  `projects`.`ModifiedBy`, \n  `pr"
+"ojects`.`DateModified`, \n  `projects`.`Deleted`, \n  `projects`.`DeveloperID`, \n  `projects`.`Category`, \n  `projects`.`N"
+"ame`, \n  `projects`.`ShortDescription`, \n  `projects`.`FullDescription`, \n  `projects`.`PictureURL`, \n  `projects`.`Tota"
+"lUnits`, \n  `projects`.`PropertyType`, \n  `projects`.`Tenure`, \n  `projects`.`LandArea`, \n  `projects`.`BuiltUpArea`, \n "
+" `projects`.`CompletionDate`, \n  `projects`.`MaintenanceFee`, \n  `projects`.`Amenities`, \n  `projects`.`Facilities`, \n  "
+"`projects`.`Address`, \n  `projects`.`City`, \n  `projects`.`State`, \n  `projects`.`Postcode`, \n  `projects`.`Country`, \n "
+" `projects`.`PdfUrl`, \n  `projects`.`VideoUrl`, \n  `projects`.`View360Url`, \n  `projects`.`LocationLatitude`, \n  `projec"
+"ts`.`LocationLongitude`, \n  `projects`.`WebsiteURL`, \n  `projects`.`SalesEmail`, \n  `projects`.`SalesContactNo`, \n  `pro"
+"jects`.`SalesAddress`, \n  `projects`.`isCompleted`, \n  `projects`.`Published`, \n  `projects`.`PublishedToPublic`, \n  `pr"
+"ojects`.`Ordering`, \n  `projects`.`NameCn`, \n  `projects`.`ShortDescriptionCn`, \n  `projects`.`FullDescriptionCn`, \n  `p"
+"rojects`.`PropertyTypeCn`, \n  `projects`.`TenureCn`, \n  `projects`.`LandAreaCn`, \n  `projects`.`CompletionDateCn`, \n  `p"
+"rojects`.`MaintenanceFeeCn`, \n  `projects`.`AmenitiesCn`, \n  `projects`.`FacilitiesCn`, \n  `projects`.`AddressCn`, \n  `p"
+"rojects`.`CityCn`, \n  `projects`.`StateCn`, \n  `projects`.`CountryCn`, \n  `projects`.`MinSqft`, \n  `projects`.`MaxSqft`,"
+" \n  `projects`.`MinPurchasePrice`, \n  `projects`.`MaxPurchasePrice`, \n  `projects`.`MinBathrooms`, \n  `projects`.`MaxBat"
+"hrooms`, \n  `projects`.`MinBedrooms`, \n  `projects`.`MaxBedrooms`, \n  `projects`.`SMOEmail`, \n  `projects`.`IsGovBased`,"
+" \n  `projects`.`PriceRange`, \n  `projects`.`SubPath`, \n  `projects`.`SmsGroupID`, \n  `projects`.`OnlineBookingActivation"
+"`, \n  `projects`.`KeyPlanViewAction`, \n  `projects`.`IsEmailEnabled`, \n  `projects`.`IsEmailCustomerDisabled`, \n  `proje"
+"cts`.`BookingExpiryInDay`, \n  `projects`.`BookingExtensionInDay`, \n  `projects`.`PaymentGatewayMerchantId`, \n  `projects"
+"`.`PaymentGatewayVerifyKey`, \n  `projects`.`PaymentGatewaySecretKey`, \n  `projects`.`DepositAmount`, \n  `projects`.`Logo"
+"Path`\nFROM `projects`";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.UUID = null;
							} else {
	                         		
        	row1.UUID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.CreatedBy = null;
							} else {
	                         		
        	row1.CreatedBy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.DateCreated = null;
							} else {
										
				if(rs_tDBInput_1.getString(3) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(3);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DateCreated = rs_tDBInput_1.getTimestamp(3);
					} else {
						row1.DateCreated = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DateCreated =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.ModifiedBy = null;
							} else {
	                         		
        	row1.ModifiedBy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.DateModified = null;
							} else {
										
				if(rs_tDBInput_1.getString(5) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DateModified = rs_tDBInput_1.getTimestamp(5);
					} else {
						row1.DateModified = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DateModified =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.Deleted = false;
							} else {
	                         		
            row1.Deleted = rs_tDBInput_1.getBoolean(6);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.DeveloperID = null;
							} else {
		                          
            row1.DeveloperID = rs_tDBInput_1.getInt(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.DeveloperID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.Category = null;
							} else {
	                         		
        	row1.Category = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.Name = null;
							} else {
	                         		
        	row1.Name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.ShortDescription = null;
							} else {
	                         		
        	row1.ShortDescription = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.FullDescription = null;
							} else {
	                         		
        	row1.FullDescription = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.PictureURL = null;
							} else {
	                         		
        	row1.PictureURL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.TotalUnits = null;
							} else {
		                          
            row1.TotalUnits = rs_tDBInput_1.getInt(13);
            if(rs_tDBInput_1.wasNull()){
                    row1.TotalUnits = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.PropertyType = null;
							} else {
	                         		
        	row1.PropertyType = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.Tenure = null;
							} else {
	                         		
        	row1.Tenure = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.LandArea = null;
							} else {
	                         		
        	row1.LandArea = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.BuiltUpArea = null;
							} else {
	                         		
        	row1.BuiltUpArea = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.CompletionDate = null;
							} else {
	                         		
        	row1.CompletionDate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.MaintenanceFee = null;
							} else {
	                         		
        	row1.MaintenanceFee = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.Amenities = null;
							} else {
	                         		
        	row1.Amenities = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.Facilities = null;
							} else {
	                         		
        	row1.Facilities = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.Address = null;
							} else {
	                         		
        	row1.Address = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.City = null;
							} else {
	                         		
        	row1.City = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.State = null;
							} else {
	                         		
        	row1.State = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.Postcode = null;
							} else {
	                         		
        	row1.Postcode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.Country = null;
							} else {
	                         		
        	row1.Country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.PdfUrl = null;
							} else {
	                         		
        	row1.PdfUrl = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.VideoUrl = null;
							} else {
	                         		
        	row1.VideoUrl = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.View360Url = null;
							} else {
	                         		
        	row1.View360Url = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.LocationLatitude = null;
							} else {
	                         		
        	row1.LocationLatitude = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.LocationLongitude = null;
							} else {
	                         		
        	row1.LocationLongitude = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.WebsiteURL = null;
							} else {
	                         		
        	row1.WebsiteURL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.SalesEmail = null;
							} else {
	                         		
        	row1.SalesEmail = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.SalesContactNo = null;
							} else {
	                         		
        	row1.SalesContactNo = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.SalesAddress = null;
							} else {
	                         		
        	row1.SalesAddress = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.isCompleted = null;
							} else {
		                          
            row1.isCompleted = rs_tDBInput_1.getInt(36);
            if(rs_tDBInput_1.wasNull()){
                    row1.isCompleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.Published = null;
							} else {
		                          
            row1.Published = rs_tDBInput_1.getInt(37);
            if(rs_tDBInput_1.wasNull()){
                    row1.Published = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.PublishedToPublic = null;
							} else {
		                          
            row1.PublishedToPublic = rs_tDBInput_1.getInt(38);
            if(rs_tDBInput_1.wasNull()){
                    row1.PublishedToPublic = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.Ordering = null;
							} else {
		                          
            row1.Ordering = rs_tDBInput_1.getInt(39);
            if(rs_tDBInput_1.wasNull()){
                    row1.Ordering = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.NameCn = null;
							} else {
	                         		
        	row1.NameCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.ShortDescriptionCn = null;
							} else {
	                         		
        	row1.ShortDescriptionCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.FullDescriptionCn = null;
							} else {
	                         		
        	row1.FullDescriptionCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.PropertyTypeCn = null;
							} else {
	                         		
        	row1.PropertyTypeCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.TenureCn = null;
							} else {
	                         		
        	row1.TenureCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.LandAreaCn = null;
							} else {
	                         		
        	row1.LandAreaCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.CompletionDateCn = null;
							} else {
	                         		
        	row1.CompletionDateCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.MaintenanceFeeCn = null;
							} else {
	                         		
        	row1.MaintenanceFeeCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.AmenitiesCn = null;
							} else {
	                         		
        	row1.AmenitiesCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.FacilitiesCn = null;
							} else {
	                         		
        	row1.FacilitiesCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.AddressCn = null;
							} else {
	                         		
        	row1.AddressCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.CityCn = null;
							} else {
	                         		
        	row1.CityCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.StateCn = null;
							} else {
	                         		
        	row1.StateCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 52, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.CountryCn = null;
							} else {
	                         		
        	row1.CountryCn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.MinSqft = null;
							} else {
	                         		
            row1.MinSqft = rs_tDBInput_1.getDouble(54);
            if(rs_tDBInput_1.wasNull()){
                    row1.MinSqft = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.MaxSqft = null;
							} else {
	                         		
            row1.MaxSqft = rs_tDBInput_1.getDouble(55);
            if(rs_tDBInput_1.wasNull()){
                    row1.MaxSqft = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.MinPurchasePrice = null;
							} else {
		                          
            row1.MinPurchasePrice = rs_tDBInput_1.getBigDecimal(56);
            if(rs_tDBInput_1.wasNull()){
                    row1.MinPurchasePrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.MaxPurchasePrice = null;
							} else {
		                          
            row1.MaxPurchasePrice = rs_tDBInput_1.getBigDecimal(57);
            if(rs_tDBInput_1.wasNull()){
                    row1.MaxPurchasePrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.MinBathrooms = null;
							} else {
	                         		
        	row1.MinBathrooms = routines.system.JDBCUtil.getString(rs_tDBInput_1, 58, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.MaxBathrooms = null;
							} else {
	                         		
        	row1.MaxBathrooms = routines.system.JDBCUtil.getString(rs_tDBInput_1, 59, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.MinBedrooms = null;
							} else {
	                         		
        	row1.MinBedrooms = routines.system.JDBCUtil.getString(rs_tDBInput_1, 60, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.MaxBedrooms = null;
							} else {
	                         		
        	row1.MaxBedrooms = routines.system.JDBCUtil.getString(rs_tDBInput_1, 61, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.SMOEmail = null;
							} else {
	                         		
        	row1.SMOEmail = routines.system.JDBCUtil.getString(rs_tDBInput_1, 62, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.IsGovBased = null;
							} else {
	                         		
            row1.IsGovBased = rs_tDBInput_1.getBoolean(63);
            if(rs_tDBInput_1.wasNull()){
                    row1.IsGovBased = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.PriceRange = null;
							} else {
	                         		
        	row1.PriceRange = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.SubPath = null;
							} else {
	                         		
        	row1.SubPath = routines.system.JDBCUtil.getString(rs_tDBInput_1, 65, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.SmsGroupID = null;
							} else {
		                          
            row1.SmsGroupID = rs_tDBInput_1.getInt(66);
            if(rs_tDBInput_1.wasNull()){
                    row1.SmsGroupID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.OnlineBookingActivation = null;
							} else {
	                         		
            row1.OnlineBookingActivation = rs_tDBInput_1.getBoolean(67);
            if(rs_tDBInput_1.wasNull()){
                    row1.OnlineBookingActivation = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.KeyPlanViewAction = null;
							} else {
	                         		
        	row1.KeyPlanViewAction = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.IsEmailEnabled = null;
							} else {
	                         		
            row1.IsEmailEnabled = rs_tDBInput_1.getBoolean(69);
            if(rs_tDBInput_1.wasNull()){
                    row1.IsEmailEnabled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.IsEmailCustomerDisabled = null;
							} else {
	                         		
            row1.IsEmailCustomerDisabled = rs_tDBInput_1.getBoolean(70);
            if(rs_tDBInput_1.wasNull()){
                    row1.IsEmailCustomerDisabled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.BookingExpiryInDay = null;
							} else {
		                          
            row1.BookingExpiryInDay = rs_tDBInput_1.getInt(71);
            if(rs_tDBInput_1.wasNull()){
                    row1.BookingExpiryInDay = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.BookingExtensionInDay = null;
							} else {
		                          
            row1.BookingExtensionInDay = rs_tDBInput_1.getInt(72);
            if(rs_tDBInput_1.wasNull()){
                    row1.BookingExtensionInDay = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.PaymentGatewayMerchantId = null;
							} else {
	                         		
        	row1.PaymentGatewayMerchantId = routines.system.JDBCUtil.getString(rs_tDBInput_1, 73, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.PaymentGatewayVerifyKey = null;
							} else {
	                         		
        	row1.PaymentGatewayVerifyKey = routines.system.JDBCUtil.getString(rs_tDBInput_1, 74, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.PaymentGatewaySecretKey = null;
							} else {
	                         		
        	row1.PaymentGatewaySecretKey = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.DepositAmount = null;
							} else {
		                          
            row1.DepositAmount = rs_tDBInput_1.getBigDecimal(76);
            if(rs_tDBInput_1.wasNull()){
                    row1.DepositAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.LogoPath = null;
							} else {
	                         		
        	row1.LogoPath = routines.system.JDBCUtil.getString(rs_tDBInput_1, 77, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
row2.UUID = row1.UUID;			row2.CreatedBy = row1.CreatedBy;			row2.DateCreated = row1.DateCreated;			row2.ModifiedBy = row1.ModifiedBy;			row2.DateModified = row1.DateModified;			row2.Deleted = row1.Deleted;			row2.DeveloperID = row1.DeveloperID;			row2.Category = row1.Category;			row2.Name = row1.Name;			row2.ShortDescription = row1.ShortDescription;			row2.FullDescription = row1.FullDescription;			row2.PictureURL = row1.PictureURL;			row2.TotalUnits = row1.TotalUnits;			row2.PropertyType = row1.PropertyType;			row2.Tenure = row1.Tenure;			row2.LandArea = row1.LandArea;			row2.BuiltUpArea = row1.BuiltUpArea;			row2.CompletionDate = row1.CompletionDate;			row2.MaintenanceFee = row1.MaintenanceFee;			row2.Amenities = row1.Amenities;			row2.Facilities = row1.Facilities;			row2.Address = row1.Address;			row2.City = row1.City;			row2.State = row1.State;			row2.Postcode = row1.Postcode;			row2.Country = row1.Country;			row2.PdfUrl = row1.PdfUrl;			row2.VideoUrl = row1.VideoUrl;			row2.View360Url = row1.View360Url;			row2.LocationLatitude = row1.LocationLatitude;			row2.LocationLongitude = row1.LocationLongitude;			row2.WebsiteURL = row1.WebsiteURL;			row2.SalesEmail = row1.SalesEmail;			row2.SalesContactNo = row1.SalesContactNo;			row2.SalesAddress = row1.SalesAddress;			row2.isCompleted = row1.isCompleted;			row2.Published = row1.Published;			row2.PublishedToPublic = row1.PublishedToPublic;			row2.Ordering = row1.Ordering;			row2.NameCn = row1.NameCn;			row2.ShortDescriptionCn = row1.ShortDescriptionCn;			row2.FullDescriptionCn = row1.FullDescriptionCn;			row2.PropertyTypeCn = row1.PropertyTypeCn;			row2.TenureCn = row1.TenureCn;			row2.LandAreaCn = row1.LandAreaCn;			row2.CompletionDateCn = row1.CompletionDateCn;			row2.MaintenanceFeeCn = row1.MaintenanceFeeCn;			row2.AmenitiesCn = row1.AmenitiesCn;			row2.FacilitiesCn = row1.FacilitiesCn;			row2.AddressCn = row1.AddressCn;			row2.CityCn = row1.CityCn;			row2.StateCn = row1.StateCn;			row2.CountryCn = row1.CountryCn;			row2.MinSqft = row1.MinSqft;			row2.MaxSqft = row1.MaxSqft;			row2.MinPurchasePrice = row1.MinPurchasePrice;			row2.MaxPurchasePrice = row1.MaxPurchasePrice;			row2.MinBathrooms = row1.MinBathrooms;			row2.MaxBathrooms = row1.MaxBathrooms;			row2.MinBedrooms = row1.MinBedrooms;			row2.MaxBedrooms = row1.MaxBedrooms;			row2.SMOEmail = row1.SMOEmail;			row2.IsGovBased = row1.IsGovBased;			row2.PriceRange = row1.PriceRange;			row2.SubPath = row1.SubPath;			row2.SmsGroupID = row1.SmsGroupID;			row2.OnlineBookingActivation = row1.OnlineBookingActivation;			row2.KeyPlanViewAction = row1.KeyPlanViewAction;			row2.IsEmailEnabled = row1.IsEmailEnabled;			row2.IsEmailCustomerDisabled = row1.IsEmailCustomerDisabled;			row2.BookingExpiryInDay = row1.BookingExpiryInDay;			row2.BookingExtensionInDay = row1.BookingExtensionInDay;			row2.PaymentGatewayMerchantId = row1.PaymentGatewayMerchantId;			row2.PaymentGatewayVerifyKey = row1.PaymentGatewayVerifyKey;			row2.PaymentGatewaySecretKey = row1.PaymentGatewaySecretKey;			row2.DepositAmount = row1.DepositAmount;			row2.LogoPath = row1.LogoPath;			

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

projectsPipeline = null;


// # Output table : 'projectsPipeline'
projectsPipeline_tmp.ProjectID = row2.UUID ;
projectsPipeline_tmp.Name = row2.Name;
projectsPipeline_tmp.TotalUnits = row2.TotalUnits;
projectsPipeline_tmp.PropertyType = row2.PropertyType;
projectsPipeline_tmp.Tenure = row2.Tenure;
projectsPipeline_tmp.City = row2.City;
projectsPipeline = projectsPipeline_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "projectsPipeline"
if(projectsPipeline != null) { 



	
	/**
	 * [tFlowMeter_4 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"projectsPipeline"
						
						);
					}
					

    count_tFlowMeter_4++; 
 
     row3 = projectsPipeline;


	tos_count_tFlowMeter_4++;

/**
 * [tFlowMeter_4 main ] stop
 */
	
	/**
	 * [tFlowMeter_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_4";

	

 



/**
 * [tFlowMeter_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                            if(row3.ProjectID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row3.ProjectID);
}

                            if(row3.Name == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, row3.Name);
}

                            if(row3.TotalUnits == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(3, row3.TotalUnits);
}

                            if(row3.PropertyType == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, row3.PropertyType);
}

                            if(row3.Tenure == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row3.Tenure);
}

                            if(row3.City == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, row3.City);
}

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

						
                      batchSizeCounter_tDBOutput_1++;
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());

                }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                        rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeter_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_4";

	

 



/**
 * [tFlowMeter_4 process_data_end ] stop
 */

} // End of branch "projectsPipeline"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFlowMeter_4 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_4";

	

	tFlowMeterCatcher_1.addMessage("projectsPipeline", new Integer(count_tFlowMeter_4), "null", "", "tFlowMeter_4");

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"projectsPipeline");
			  	}
			  	
 

ok_Hash.put("tFlowMeter_4", true);
end_Hash.put("tFlowMeter_4", System.currentTimeMillis());




/**
 * [tFlowMeter_4 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                    globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
    	}
    	conn_tDBOutput_1.commit();
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
			rowsToCommitCount_tDBOutput_1 = 0;
    	}
		commitCounter_tDBOutput_1 = 0;
    	
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */












				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFlowMeter_4 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_4";

	

 



/**
 * [tFlowMeter_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class pipelineStruct implements routines.system.IPersistableRow<pipelineStruct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_projects = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_projects = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String table_involved;

				public String getTable_involved () {
					return this.table_involved;
				}
				
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String threshold;

				public String getThreshold () {
					return this.threshold;
				}
				
			    public String duration;

				public String getDuration () {
					return this.duration;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final pipelineStruct other = (pipelineStruct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(pipelineStruct other) {

		other.ID = this.ID;
	            other.table_involved = this.table_involved;
	            other.moment = this.moment;
	            other.pid = this.pid;
	            other.father_pid = this.father_pid;
	            other.root_pid = this.root_pid;
	            other.system_pid = this.system_pid;
	            other.project = this.project;
	            other.job = this.job;
	            other.job_repository_id = this.job_repository_id;
	            other.job_version = this.job_version;
	            other.context = this.context;
	            other.origin = this.origin;
	            other.label = this.label;
	            other.count = this.count;
	            other.reference = this.reference;
	            other.threshold = this.threshold;
	            other.duration = this.duration;
	            
	}

	public void copyKeysDataTo(pipelineStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.table_involved = readString(dis);
					
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.threshold = readString(dis);
					
					this.duration = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.table_involved = readString(dis);
					
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.threshold = readString(dis);
					
					this.duration = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.table_involved,dos);
					
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.threshold,dos);
					
					// String
				
						writeString(this.duration,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.table_involved,dos);
					
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.threshold,dos);
					
					// String
				
						writeString(this.duration,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",table_involved="+table_involved);
		sb.append(",moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",threshold="+threshold);
		sb.append(",duration="+duration);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(pipelineStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_projects = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_projects = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_projects = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_projects = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_projects.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_projects.length == 0) {
   					commonByteArray_SKYWORLD_star_projects = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_projects = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_projects, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_projects, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_projects) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row4Struct row5 = row4;
pipelineStruct pipeline = new pipelineStruct();






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"pipeline");
					}
				
		int tos_count_tDBOutput_2 = 0;
		






int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "pipeline";
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
long date_tDBOutput_2;

java.sql.Connection conn_tDBOutput_2 = null;
		
        String properties_tDBOutput_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBOutput_2 == null || properties_tDBOutput_2.trim().length() == 0) {
            properties_tDBOutput_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_2.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_2.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_2 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_DataWarehouse" + "?" + properties_tDBOutput_2;
		
		String driverClass_tDBOutput_2 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_2 = "skyuser";
		

		 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:aZ02k03tOD7LMpsE23j82iibVxQneLxcpIdO8n3SqAeM3BI0KH9dLyFt");

		String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
		java.lang.Class.forName(driverClass_tDBOutput_2);
		
		conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);
		
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;

int count_tDBOutput_2=0;
    	

				String insert_tDBOutput_2 = "INSERT INTO `" + "pipeline" + "` (`ID`,`table_involved`,`moment`,`pid`,`father_pid`,`root_pid`,`system_pid`,`project`,`job`,`job_repository_id`,`job_version`,`context`,`origin`,`label`,`count`,`reference`,`threshold`,`duration`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_2 = 100;
	   			int batchSizeCounter_tDBOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
		        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);


 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
pipelineStruct pipeline_tmp = new pipelineStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[15];

        public void addRow(String[] row) {

            for (int i = 0; i < 15; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 14 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 14 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[14] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"moment","pid","father_pid","root_pid","system_pid","project","job","job_repository_id","job_version","context","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row4.pid = pid;
		row4.root_pid = rootPid;
		row4.father_pid = fatherPid;	
        row4.project = projectName;
        row4.job = jobName;
        row4.context = contextStr;
		row4.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row4.moment = mcm.getMoment();
		row4.job_version = mcm.getJobVersion();
		row4.job_repository_id = mcm.getJobId();
		row4.system_pid = mcm.getSystemPid();
		row4.label = mcm.getLabel();
		row4.count = mcm.getCount();
		row4.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row4.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[15];
   				
	    		if(row4.moment != null) { //              
                 row_tLogRow_1[0]=    						
								FormatterUtils.format_Date(row4.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(row4.pid != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row4.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.father_pid != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row4.father_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.root_pid != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row4.root_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.system_pid != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(row4.system_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.project != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(row4.project)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.job != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row4.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.job_repository_id != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row4.job_repository_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.job_version != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(row4.job_version)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.context != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row4.context)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.origin != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(row4.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.label != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(row4.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.count != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(row4.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.reference != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(row4.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.thresholds != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(row4.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row5 = row4;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

pipeline = null;


// # Output table : 'pipeline'
pipeline_tmp.ID = 0;
pipeline_tmp.table_involved = "property_projects";
pipeline_tmp.moment = row5.moment;
pipeline_tmp.pid = row5.pid;
pipeline_tmp.father_pid = row5.father_pid;
pipeline_tmp.root_pid = row5.root_pid;
pipeline_tmp.system_pid = row5.system_pid;
pipeline_tmp.project = row5.project;
pipeline_tmp.job = row5.job;
pipeline_tmp.job_repository_id = row5.job_repository_id;
pipeline_tmp.job_version = row5.job_version;
pipeline_tmp.context = row5.context;
pipeline_tmp.origin = row5.origin;
pipeline_tmp.label = row5.label;
pipeline_tmp.count = row5.count;
pipeline_tmp.reference = row5.reference;
pipeline_tmp.threshold = row5.thresholds ;
pipeline_tmp.duration = context.getProperty("pipelineUUID") ;
pipeline = pipeline_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "pipeline"
if(pipeline != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"pipeline"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                            pstmt_tDBOutput_2.setInt(1, pipeline.ID);

                            if(pipeline.table_involved == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, pipeline.table_involved);
}

                            if(pipeline.moment != null) {
date_tDBOutput_2 = pipeline.moment.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.DATE);
}

                            if(pipeline.pid == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, pipeline.pid);
}

                            if(pipeline.father_pid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, pipeline.father_pid);
}

                            if(pipeline.root_pid == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, pipeline.root_pid);
}

                            if(pipeline.system_pid == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setLong(7, pipeline.system_pid);
}

                            if(pipeline.project == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, pipeline.project);
}

                            if(pipeline.job == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, pipeline.job);
}

                            if(pipeline.job_repository_id == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(10, pipeline.job_repository_id);
}

                            if(pipeline.job_version == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(11, pipeline.job_version);
}

                            if(pipeline.context == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(12, pipeline.context);
}

                            if(pipeline.origin == null) {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(13, pipeline.origin);
}

                            if(pipeline.label == null) {
pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(14, pipeline.label);
}

                            if(pipeline.count == null) {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(15, pipeline.count);
}

                            if(pipeline.reference == null) {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(16, pipeline.reference);
}

                            if(pipeline.threshold == null) {
pstmt_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(17, pipeline.threshold);
}

                            if(pipeline.duration == null) {
pstmt_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(18, pipeline.duration);
}

                    pstmt_tDBOutput_2.addBatch();
                    nb_line_tDBOutput_2++;

						
                      batchSizeCounter_tDBOutput_2++;
                if ( batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_2 = 0;
            }
                commitCounter_tDBOutput_2++;

                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());

                }
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                        rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;

                }


 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "pipeline"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



                try {
                		if (batchSizeCounter_tDBOutput_2 != 0) {
							int countSum_tDBOutput_2 = 0;
							
							for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
								countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
							
	            	    	
	            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                    globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
            	    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	    	
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_2 = 0;
    		
	

        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
				resourceMap.remove("pstmt_tDBOutput_2");
			
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
    	if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {
    		
    	}
    	conn_tDBOutput_2.commit();
    	if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {
    		
			rowsToCommitCount_tDBOutput_2 = 0;
    	}
		commitCounter_tDBOutput_2 = 0;
    	
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"pipeline");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final star_projects star_projectsClass = new star_projects();

        int exitCode = star_projectsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = star_projects.class.getClassLoader().getResourceAsStream("skyworld/star_projects_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = star_projects.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("pipelineUUID", "id_String");
                        if(context.getStringValue("pipelineUUID") == null) {
                            context.pipelineUUID = null;
                        } else {
                            context.pipelineUUID=(String) context.getProperty("pipelineUUID");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("pipelineUUID")) {
                context.pipelineUUID = (String) parentContextMap.get("pipelineUUID");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : star_projects");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     265017 characters generated by Talend Open Studio for Big Data 
 *     on the November 22, 2023 at 8:51:30 AM MYT
 ************************************************************************************************/