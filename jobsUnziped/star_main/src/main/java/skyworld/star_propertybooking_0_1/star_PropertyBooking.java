// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package skyworld.star_propertybooking_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: star_PropertyBooking Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class star_PropertyBooking implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(pipelineUUID != null){
				
					this.setProperty("pipelineUUID", pipelineUUID.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String pipelineUUID;
public String getPipelineUUID(){
	return this.pipelineUUID;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "star_PropertyBooking";
	private final String projectName = "SKYWORLD";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_PhyIoE2UEe6YHv0RbW6tfg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				star_PropertyBooking.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(star_PropertyBooking.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeter_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public Integer BookingCancellationID;

				public Integer getBookingCancellationID () {
					return this.BookingCancellationID;
				}
				
			    public int BookingID;

				public int getBookingID () {
					return this.BookingID;
				}
				
			    public Integer UnitID;

				public Integer getUnitID () {
					return this.UnitID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ExtensionID;

				public Integer getExtensionID () {
					return this.ExtensionID;
				}
				
			    public Integer SoldCancellationID;

				public Integer getSoldCancellationID () {
					return this.SoldCancellationID;
				}
				
			    public Integer BookingUnitID;

				public Integer getBookingUnitID () {
					return this.BookingUnitID;
				}
				
			    public Double BookingPrice;

				public Double getBookingPrice () {
					return this.BookingPrice;
				}
				
			    public String BookingStatus;

				public String getBookingStatus () {
					return this.BookingStatus;
				}
				
			    public String BookingDateID;

				public String getBookingDateID () {
					return this.BookingDateID;
				}
				
			    public String ReservationDateID;

				public String getReservationDateID () {
					return this.ReservationDateID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.BookingID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.BookingID != other.BookingID)
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.ProjectID = this.ProjectID;
	            other.BookingCancellationID = this.BookingCancellationID;
	            other.BookingID = this.BookingID;
	            other.UnitID = this.UnitID;
	            other.CustomerID = this.CustomerID;
	            other.ExtensionID = this.ExtensionID;
	            other.SoldCancellationID = this.SoldCancellationID;
	            other.BookingUnitID = this.BookingUnitID;
	            other.BookingPrice = this.BookingPrice;
	            other.BookingStatus = this.BookingStatus;
	            other.BookingDateID = this.BookingDateID;
	            other.ReservationDateID = this.ReservationDateID;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.BookingID = this.BookingID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
						this.BookingCancellationID = readInteger(dis);
					
			        this.BookingID = dis.readInt();
					
						this.UnitID = readInteger(dis);
					
					this.CustomerID = readString(dis);
					
						this.ExtensionID = readInteger(dis);
					
						this.SoldCancellationID = readInteger(dis);
					
						this.BookingUnitID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BookingPrice = null;
           				} else {
           			    	this.BookingPrice = dis.readDouble();
           				}
					
					this.BookingStatus = readString(dis);
					
					this.BookingDateID = readString(dis);
					
					this.ReservationDateID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
						this.BookingCancellationID = readInteger(dis);
					
			        this.BookingID = dis.readInt();
					
						this.UnitID = readInteger(dis);
					
					this.CustomerID = readString(dis);
					
						this.ExtensionID = readInteger(dis);
					
						this.SoldCancellationID = readInteger(dis);
					
						this.BookingUnitID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BookingPrice = null;
           				} else {
           			    	this.BookingPrice = dis.readDouble();
           				}
					
					this.BookingStatus = readString(dis);
					
					this.BookingDateID = readString(dis);
					
					this.ReservationDateID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// Integer
				
						writeInteger(this.BookingCancellationID,dos);
					
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// Integer
				
						writeInteger(this.UnitID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ExtensionID,dos);
					
					// Integer
				
						writeInteger(this.SoldCancellationID,dos);
					
					// Integer
				
						writeInteger(this.BookingUnitID,dos);
					
					// Double
				
						if(this.BookingPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BookingPrice);
		            	}
					
					// String
				
						writeString(this.BookingStatus,dos);
					
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.ReservationDateID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// Integer
				
						writeInteger(this.BookingCancellationID,dos);
					
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// Integer
				
						writeInteger(this.UnitID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ExtensionID,dos);
					
					// Integer
				
						writeInteger(this.SoldCancellationID,dos);
					
					// Integer
				
						writeInteger(this.BookingUnitID,dos);
					
					// Double
				
						if(this.BookingPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BookingPrice);
		            	}
					
					// String
				
						writeString(this.BookingStatus,dos);
					
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.ReservationDateID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProjectID="+ProjectID);
		sb.append(",BookingCancellationID="+String.valueOf(BookingCancellationID));
		sb.append(",BookingID="+String.valueOf(BookingID));
		sb.append(",UnitID="+String.valueOf(UnitID));
		sb.append(",CustomerID="+CustomerID);
		sb.append(",ExtensionID="+String.valueOf(ExtensionID));
		sb.append(",SoldCancellationID="+String.valueOf(SoldCancellationID));
		sb.append(",BookingUnitID="+String.valueOf(BookingUnitID));
		sb.append(",BookingPrice="+String.valueOf(BookingPrice));
		sb.append(",BookingStatus="+BookingStatus);
		sb.append(",BookingDateID="+BookingDateID);
		sb.append(",ReservationDateID="+ReservationDateID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingID, other.BookingID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public Integer BookingCancellationID;

				public Integer getBookingCancellationID () {
					return this.BookingCancellationID;
				}
				
			    public int BookingID;

				public int getBookingID () {
					return this.BookingID;
				}
				
			    public Integer UnitID;

				public Integer getUnitID () {
					return this.UnitID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ExtensionID;

				public Integer getExtensionID () {
					return this.ExtensionID;
				}
				
			    public Integer SoldCancellationID;

				public Integer getSoldCancellationID () {
					return this.SoldCancellationID;
				}
				
			    public Integer BookingUnitID;

				public Integer getBookingUnitID () {
					return this.BookingUnitID;
				}
				
			    public Double BookingPrice;

				public Double getBookingPrice () {
					return this.BookingPrice;
				}
				
			    public String BookingStatus;

				public String getBookingStatus () {
					return this.BookingStatus;
				}
				
			    public String BookingDateID;

				public String getBookingDateID () {
					return this.BookingDateID;
				}
				
			    public String ReservationDateID;

				public String getReservationDateID () {
					return this.ReservationDateID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.BookingID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.BookingID != other.BookingID)
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.ProjectID = this.ProjectID;
	            other.BookingCancellationID = this.BookingCancellationID;
	            other.BookingID = this.BookingID;
	            other.UnitID = this.UnitID;
	            other.CustomerID = this.CustomerID;
	            other.ExtensionID = this.ExtensionID;
	            other.SoldCancellationID = this.SoldCancellationID;
	            other.BookingUnitID = this.BookingUnitID;
	            other.BookingPrice = this.BookingPrice;
	            other.BookingStatus = this.BookingStatus;
	            other.BookingDateID = this.BookingDateID;
	            other.ReservationDateID = this.ReservationDateID;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.BookingID = this.BookingID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
						this.BookingCancellationID = readInteger(dis);
					
			        this.BookingID = dis.readInt();
					
						this.UnitID = readInteger(dis);
					
					this.CustomerID = readString(dis);
					
						this.ExtensionID = readInteger(dis);
					
						this.SoldCancellationID = readInteger(dis);
					
						this.BookingUnitID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BookingPrice = null;
           				} else {
           			    	this.BookingPrice = dis.readDouble();
           				}
					
					this.BookingStatus = readString(dis);
					
					this.BookingDateID = readString(dis);
					
					this.ReservationDateID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
						this.BookingCancellationID = readInteger(dis);
					
			        this.BookingID = dis.readInt();
					
						this.UnitID = readInteger(dis);
					
					this.CustomerID = readString(dis);
					
						this.ExtensionID = readInteger(dis);
					
						this.SoldCancellationID = readInteger(dis);
					
						this.BookingUnitID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BookingPrice = null;
           				} else {
           			    	this.BookingPrice = dis.readDouble();
           				}
					
					this.BookingStatus = readString(dis);
					
					this.BookingDateID = readString(dis);
					
					this.ReservationDateID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// Integer
				
						writeInteger(this.BookingCancellationID,dos);
					
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// Integer
				
						writeInteger(this.UnitID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ExtensionID,dos);
					
					// Integer
				
						writeInteger(this.SoldCancellationID,dos);
					
					// Integer
				
						writeInteger(this.BookingUnitID,dos);
					
					// Double
				
						if(this.BookingPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BookingPrice);
		            	}
					
					// String
				
						writeString(this.BookingStatus,dos);
					
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.ReservationDateID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// Integer
				
						writeInteger(this.BookingCancellationID,dos);
					
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// Integer
				
						writeInteger(this.UnitID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ExtensionID,dos);
					
					// Integer
				
						writeInteger(this.SoldCancellationID,dos);
					
					// Integer
				
						writeInteger(this.BookingUnitID,dos);
					
					// Double
				
						if(this.BookingPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BookingPrice);
		            	}
					
					// String
				
						writeString(this.BookingStatus,dos);
					
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.ReservationDateID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProjectID="+ProjectID);
		sb.append(",BookingCancellationID="+String.valueOf(BookingCancellationID));
		sb.append(",BookingID="+String.valueOf(BookingID));
		sb.append(",UnitID="+String.valueOf(UnitID));
		sb.append(",CustomerID="+CustomerID);
		sb.append(",ExtensionID="+String.valueOf(ExtensionID));
		sb.append(",SoldCancellationID="+String.valueOf(SoldCancellationID));
		sb.append(",BookingUnitID="+String.valueOf(BookingUnitID));
		sb.append(",BookingPrice="+String.valueOf(BookingPrice));
		sb.append(",BookingStatus="+BookingStatus);
		sb.append(",BookingDateID="+BookingDateID);
		sb.append(",ReservationDateID="+ReservationDateID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingID, other.BookingID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class joinCustomerStruct implements routines.system.IPersistableRow<joinCustomerStruct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public Integer BookingCancellationID;

				public Integer getBookingCancellationID () {
					return this.BookingCancellationID;
				}
				
			    public int BookingID;

				public int getBookingID () {
					return this.BookingID;
				}
				
			    public Integer UnitID;

				public Integer getUnitID () {
					return this.UnitID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ExtensionID;

				public Integer getExtensionID () {
					return this.ExtensionID;
				}
				
			    public Integer SoldCancellationID;

				public Integer getSoldCancellationID () {
					return this.SoldCancellationID;
				}
				
			    public Integer BookingUnitID;

				public Integer getBookingUnitID () {
					return this.BookingUnitID;
				}
				
			    public Double BookingPrice;

				public Double getBookingPrice () {
					return this.BookingPrice;
				}
				
			    public String BookingStatus;

				public String getBookingStatus () {
					return this.BookingStatus;
				}
				
			    public String BookingDateID;

				public String getBookingDateID () {
					return this.BookingDateID;
				}
				
			    public String ReservationDateID;

				public String getReservationDateID () {
					return this.ReservationDateID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.BookingID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final joinCustomerStruct other = (joinCustomerStruct) obj;
		
						if (this.BookingID != other.BookingID)
							return false;
					

		return true;
    }

	public void copyDataTo(joinCustomerStruct other) {

		other.ProjectID = this.ProjectID;
	            other.BookingCancellationID = this.BookingCancellationID;
	            other.BookingID = this.BookingID;
	            other.UnitID = this.UnitID;
	            other.CustomerID = this.CustomerID;
	            other.ExtensionID = this.ExtensionID;
	            other.SoldCancellationID = this.SoldCancellationID;
	            other.BookingUnitID = this.BookingUnitID;
	            other.BookingPrice = this.BookingPrice;
	            other.BookingStatus = this.BookingStatus;
	            other.BookingDateID = this.BookingDateID;
	            other.ReservationDateID = this.ReservationDateID;
	            
	}

	public void copyKeysDataTo(joinCustomerStruct other) {

		other.BookingID = this.BookingID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
						this.BookingCancellationID = readInteger(dis);
					
			        this.BookingID = dis.readInt();
					
						this.UnitID = readInteger(dis);
					
					this.CustomerID = readString(dis);
					
						this.ExtensionID = readInteger(dis);
					
						this.SoldCancellationID = readInteger(dis);
					
						this.BookingUnitID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BookingPrice = null;
           				} else {
           			    	this.BookingPrice = dis.readDouble();
           				}
					
					this.BookingStatus = readString(dis);
					
					this.BookingDateID = readString(dis);
					
					this.ReservationDateID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
						this.BookingCancellationID = readInteger(dis);
					
			        this.BookingID = dis.readInt();
					
						this.UnitID = readInteger(dis);
					
					this.CustomerID = readString(dis);
					
						this.ExtensionID = readInteger(dis);
					
						this.SoldCancellationID = readInteger(dis);
					
						this.BookingUnitID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BookingPrice = null;
           				} else {
           			    	this.BookingPrice = dis.readDouble();
           				}
					
					this.BookingStatus = readString(dis);
					
					this.BookingDateID = readString(dis);
					
					this.ReservationDateID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// Integer
				
						writeInteger(this.BookingCancellationID,dos);
					
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// Integer
				
						writeInteger(this.UnitID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ExtensionID,dos);
					
					// Integer
				
						writeInteger(this.SoldCancellationID,dos);
					
					// Integer
				
						writeInteger(this.BookingUnitID,dos);
					
					// Double
				
						if(this.BookingPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BookingPrice);
		            	}
					
					// String
				
						writeString(this.BookingStatus,dos);
					
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.ReservationDateID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// Integer
				
						writeInteger(this.BookingCancellationID,dos);
					
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// Integer
				
						writeInteger(this.UnitID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ExtensionID,dos);
					
					// Integer
				
						writeInteger(this.SoldCancellationID,dos);
					
					// Integer
				
						writeInteger(this.BookingUnitID,dos);
					
					// Double
				
						if(this.BookingPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BookingPrice);
		            	}
					
					// String
				
						writeString(this.BookingStatus,dos);
					
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.ReservationDateID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProjectID="+ProjectID);
		sb.append(",BookingCancellationID="+String.valueOf(BookingCancellationID));
		sb.append(",BookingID="+String.valueOf(BookingID));
		sb.append(",UnitID="+String.valueOf(UnitID));
		sb.append(",CustomerID="+CustomerID);
		sb.append(",ExtensionID="+String.valueOf(ExtensionID));
		sb.append(",SoldCancellationID="+String.valueOf(SoldCancellationID));
		sb.append(",BookingUnitID="+String.valueOf(BookingUnitID));
		sb.append(",BookingPrice="+String.valueOf(BookingPrice));
		sb.append(",BookingStatus="+BookingStatus);
		sb.append(",BookingDateID="+BookingDateID);
		sb.append(",ReservationDateID="+ReservationDateID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(joinCustomerStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingID, other.BookingID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class PropertyBookingPipelienStruct implements routines.system.IPersistableRow<PropertyBookingPipelienStruct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];

	
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public Integer BookingCancellationID;

				public Integer getBookingCancellationID () {
					return this.BookingCancellationID;
				}
				
			    public int BookingID;

				public int getBookingID () {
					return this.BookingID;
				}
				
			    public Integer UnitID;

				public Integer getUnitID () {
					return this.UnitID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ExtensionID;

				public Integer getExtensionID () {
					return this.ExtensionID;
				}
				
			    public Integer SoldCancellationID;

				public Integer getSoldCancellationID () {
					return this.SoldCancellationID;
				}
				
			    public Integer BookingUnitID;

				public Integer getBookingUnitID () {
					return this.BookingUnitID;
				}
				
			    public Double BookingPrice;

				public Double getBookingPrice () {
					return this.BookingPrice;
				}
				
			    public String BookingStatus;

				public String getBookingStatus () {
					return this.BookingStatus;
				}
				
			    public String BookingDateID;

				public String getBookingDateID () {
					return this.BookingDateID;
				}
				
			    public String ReservationDateID;

				public String getReservationDateID () {
					return this.ReservationDateID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
						this.BookingCancellationID = readInteger(dis);
					
			        this.BookingID = dis.readInt();
					
						this.UnitID = readInteger(dis);
					
					this.CustomerID = readString(dis);
					
						this.ExtensionID = readInteger(dis);
					
						this.SoldCancellationID = readInteger(dis);
					
						this.BookingUnitID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BookingPrice = null;
           				} else {
           			    	this.BookingPrice = dis.readDouble();
           				}
					
					this.BookingStatus = readString(dis);
					
					this.BookingDateID = readString(dis);
					
					this.ReservationDateID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ProjectID = readString(dis);
					
						this.BookingCancellationID = readInteger(dis);
					
			        this.BookingID = dis.readInt();
					
						this.UnitID = readInteger(dis);
					
					this.CustomerID = readString(dis);
					
						this.ExtensionID = readInteger(dis);
					
						this.SoldCancellationID = readInteger(dis);
					
						this.BookingUnitID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BookingPrice = null;
           				} else {
           			    	this.BookingPrice = dis.readDouble();
           				}
					
					this.BookingStatus = readString(dis);
					
					this.BookingDateID = readString(dis);
					
					this.ReservationDateID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// Integer
				
						writeInteger(this.BookingCancellationID,dos);
					
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// Integer
				
						writeInteger(this.UnitID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ExtensionID,dos);
					
					// Integer
				
						writeInteger(this.SoldCancellationID,dos);
					
					// Integer
				
						writeInteger(this.BookingUnitID,dos);
					
					// Double
				
						if(this.BookingPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BookingPrice);
		            	}
					
					// String
				
						writeString(this.BookingStatus,dos);
					
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.ReservationDateID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ProjectID,dos);
					
					// Integer
				
						writeInteger(this.BookingCancellationID,dos);
					
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// Integer
				
						writeInteger(this.UnitID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// Integer
				
						writeInteger(this.ExtensionID,dos);
					
					// Integer
				
						writeInteger(this.SoldCancellationID,dos);
					
					// Integer
				
						writeInteger(this.BookingUnitID,dos);
					
					// Double
				
						if(this.BookingPrice == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BookingPrice);
		            	}
					
					// String
				
						writeString(this.BookingStatus,dos);
					
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.ReservationDateID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProjectID="+ProjectID);
		sb.append(",BookingCancellationID="+String.valueOf(BookingCancellationID));
		sb.append(",BookingID="+String.valueOf(BookingID));
		sb.append(",UnitID="+String.valueOf(UnitID));
		sb.append(",CustomerID="+CustomerID);
		sb.append(",ExtensionID="+String.valueOf(ExtensionID));
		sb.append(",SoldCancellationID="+String.valueOf(SoldCancellationID));
		sb.append(",BookingUnitID="+String.valueOf(BookingUnitID));
		sb.append(",BookingPrice="+String.valueOf(BookingPrice));
		sb.append(",BookingStatus="+BookingStatus);
		sb.append(",BookingDateID="+BookingDateID);
		sb.append(",ReservationDateID="+ReservationDateID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PropertyBookingPipelienStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class bookingDatePipelineStruct implements routines.system.IPersistableRow<bookingDatePipelineStruct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String BookingDateID;

				public String getBookingDateID () {
					return this.BookingDateID;
				}
				
			    public String Year;

				public String getYear () {
					return this.Year;
				}
				
			    public String Month;

				public String getMonth () {
					return this.Month;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public java.util.Date Date;

				public java.util.Date getDate () {
					return this.Date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.BookingDateID == null) ? 0 : this.BookingDateID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final bookingDatePipelineStruct other = (bookingDatePipelineStruct) obj;
		
						if (this.BookingDateID == null) {
							if (other.BookingDateID != null)
								return false;
						
						} else if (!this.BookingDateID.equals(other.BookingDateID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(bookingDatePipelineStruct other) {

		other.BookingDateID = this.BookingDateID;
	            other.Year = this.Year;
	            other.Month = this.Month;
	            other.Quarter = this.Quarter;
	            other.Date = this.Date;
	            
	}

	public void copyKeysDataTo(bookingDatePipelineStruct other) {

		other.BookingDateID = this.BookingDateID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.BookingDateID = readString(dis);
					
					this.Year = readString(dis);
					
					this.Month = readString(dis);
					
						this.Quarter = readInteger(dis);
					
					this.Date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.BookingDateID = readString(dis);
					
					this.Year = readString(dis);
					
					this.Month = readString(dis);
					
						this.Quarter = readInteger(dis);
					
					this.Date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.Year,dos);
					
					// String
				
						writeString(this.Month,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// java.util.Date
				
						writeDate(this.Date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.BookingDateID,dos);
					
					// String
				
						writeString(this.Year,dos);
					
					// String
				
						writeString(this.Month,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// java.util.Date
				
						writeDate(this.Date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BookingDateID="+BookingDateID);
		sb.append(",Year="+Year);
		sb.append(",Month="+Month);
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Date="+String.valueOf(Date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(bookingDatePipelineStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingDateID, other.BookingDateID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class reservationDatePipelineStruct implements routines.system.IPersistableRow<reservationDatePipelineStruct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ReservationDateID;

				public String getReservationDateID () {
					return this.ReservationDateID;
				}
				
			    public String Year;

				public String getYear () {
					return this.Year;
				}
				
			    public String Month;

				public String getMonth () {
					return this.Month;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public java.util.Date Date;

				public java.util.Date getDate () {
					return this.Date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ReservationDateID == null) ? 0 : this.ReservationDateID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final reservationDatePipelineStruct other = (reservationDatePipelineStruct) obj;
		
						if (this.ReservationDateID == null) {
							if (other.ReservationDateID != null)
								return false;
						
						} else if (!this.ReservationDateID.equals(other.ReservationDateID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(reservationDatePipelineStruct other) {

		other.ReservationDateID = this.ReservationDateID;
	            other.Year = this.Year;
	            other.Month = this.Month;
	            other.Quarter = this.Quarter;
	            other.Date = this.Date;
	            
	}

	public void copyKeysDataTo(reservationDatePipelineStruct other) {

		other.ReservationDateID = this.ReservationDateID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ReservationDateID = readString(dis);
					
					this.Year = readString(dis);
					
					this.Month = readString(dis);
					
						this.Quarter = readInteger(dis);
					
					this.Date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.ReservationDateID = readString(dis);
					
					this.Year = readString(dis);
					
					this.Month = readString(dis);
					
						this.Quarter = readInteger(dis);
					
					this.Date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ReservationDateID,dos);
					
					// String
				
						writeString(this.Year,dos);
					
					// String
				
						writeString(this.Month,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// java.util.Date
				
						writeDate(this.Date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ReservationDateID,dos);
					
					// String
				
						writeString(this.Year,dos);
					
					// String
				
						writeString(this.Month,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// java.util.Date
				
						writeDate(this.Date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ReservationDateID="+ReservationDateID);
		sb.append(",Year="+Year);
		sb.append(",Month="+Month);
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Date="+String.valueOf(Date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(reservationDatePipelineStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ReservationDateID, other.ReservationDateID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];

	
			    public int BookingID;

				public int getBookingID () {
					return this.BookingID;
				}
				
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Type;

				public String getType () {
					return this.Type;
				}
				
			    public java.util.Date BookingDate;

				public java.util.Date getBookingDate () {
					return this.BookingDate;
				}
				
			    public java.util.Date ReservationDate;

				public java.util.Date getReservationDate () {
					return this.ReservationDate;
				}
				
			    public java.util.Date ExpiryDate;

				public java.util.Date getExpiryDate () {
					return this.ExpiryDate;
				}
				
			    public BigDecimal Amount;

				public BigDecimal getAmount () {
					return this.Amount;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Boolean Manually;

				public Boolean getManually () {
					return this.Manually;
				}
				
			    public Boolean EmailSent;

				public Boolean getEmailSent () {
					return this.EmailSent;
				}
				
			    public java.util.Date DateFirsReminder;

				public java.util.Date getDateFirsReminder () {
					return this.DateFirsReminder;
				}
				
			    public java.util.Date DateSecondReminder;

				public java.util.Date getDateSecondReminder () {
					return this.DateSecondReminder;
				}
				
			    public String SalesTypeID;

				public String getSalesTypeID () {
					return this.SalesTypeID;
				}
				
			    public String MunicipalStatusID;

				public String getMunicipalStatusID () {
					return this.MunicipalStatusID;
				}
				
			    public String MunicipalRemark;

				public String getMunicipalRemark () {
					return this.MunicipalRemark;
				}
				
			    public String PayeeName;

				public String getPayeeName () {
					return this.PayeeName;
				}
				
			    public String PaymentMethodID;

				public String getPaymentMethodID () {
					return this.PaymentMethodID;
				}
				
			    public String ThemeUUID;

				public String getThemeUUID () {
					return this.ThemeUUID;
				}
				
			    public String Introducer;

				public String getIntroducer () {
					return this.Introducer;
				}
				
			    public Boolean Deleted;

				public Boolean getDeleted () {
					return this.Deleted;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingID = dis.readInt();
					
					this.ProjectID = readString(dis);
					
					this.CustomerID = readString(dis);
					
					this.Type = readString(dis);
					
					this.BookingDate = readDate(dis);
					
					this.ReservationDate = readDate(dis);
					
					this.ExpiryDate = readDate(dis);
					
						this.Amount = (BigDecimal) dis.readObject();
					
					this.Status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Manually = null;
           				} else {
           			    	this.Manually = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EmailSent = null;
           				} else {
           			    	this.EmailSent = dis.readBoolean();
           				}
					
					this.DateFirsReminder = readDate(dis);
					
					this.DateSecondReminder = readDate(dis);
					
					this.SalesTypeID = readString(dis);
					
					this.MunicipalStatusID = readString(dis);
					
					this.MunicipalRemark = readString(dis);
					
					this.PayeeName = readString(dis);
					
					this.PaymentMethodID = readString(dis);
					
					this.ThemeUUID = readString(dis);
					
					this.Introducer = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
					this.DateCreated = readDate(dis);
					
					this.DateModified = readDate(dis);
					
					this.CreatedBy = readString(dis);
					
					this.ModifiedBy = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingID = dis.readInt();
					
					this.ProjectID = readString(dis);
					
					this.CustomerID = readString(dis);
					
					this.Type = readString(dis);
					
					this.BookingDate = readDate(dis);
					
					this.ReservationDate = readDate(dis);
					
					this.ExpiryDate = readDate(dis);
					
						this.Amount = (BigDecimal) dis.readObject();
					
					this.Status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Manually = null;
           				} else {
           			    	this.Manually = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EmailSent = null;
           				} else {
           			    	this.EmailSent = dis.readBoolean();
           				}
					
					this.DateFirsReminder = readDate(dis);
					
					this.DateSecondReminder = readDate(dis);
					
					this.SalesTypeID = readString(dis);
					
					this.MunicipalStatusID = readString(dis);
					
					this.MunicipalRemark = readString(dis);
					
					this.PayeeName = readString(dis);
					
					this.PaymentMethodID = readString(dis);
					
					this.ThemeUUID = readString(dis);
					
					this.Introducer = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
					this.DateCreated = readDate(dis);
					
					this.DateModified = readDate(dis);
					
					this.CreatedBy = readString(dis);
					
					this.ModifiedBy = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// String
				
						writeString(this.ProjectID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// String
				
						writeString(this.Type,dos);
					
					// java.util.Date
				
						writeDate(this.BookingDate,dos);
					
					// java.util.Date
				
						writeDate(this.ReservationDate,dos);
					
					// java.util.Date
				
						writeDate(this.ExpiryDate,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Amount);
					
					// String
				
						writeString(this.Status,dos);
					
					// Boolean
				
						if(this.Manually == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Manually);
		            	}
					
					// Boolean
				
						if(this.EmailSent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.EmailSent);
		            	}
					
					// java.util.Date
				
						writeDate(this.DateFirsReminder,dos);
					
					// java.util.Date
				
						writeDate(this.DateSecondReminder,dos);
					
					// String
				
						writeString(this.SalesTypeID,dos);
					
					// String
				
						writeString(this.MunicipalStatusID,dos);
					
					// String
				
						writeString(this.MunicipalRemark,dos);
					
					// String
				
						writeString(this.PayeeName,dos);
					
					// String
				
						writeString(this.PaymentMethodID,dos);
					
					// String
				
						writeString(this.ThemeUUID,dos);
					
					// String
				
						writeString(this.Introducer,dos);
					
					// Boolean
				
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.DateCreated,dos);
					
					// java.util.Date
				
						writeDate(this.DateModified,dos);
					
					// String
				
						writeString(this.CreatedBy,dos);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// String
				
						writeString(this.ProjectID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// String
				
						writeString(this.Type,dos);
					
					// java.util.Date
				
						writeDate(this.BookingDate,dos);
					
					// java.util.Date
				
						writeDate(this.ReservationDate,dos);
					
					// java.util.Date
				
						writeDate(this.ExpiryDate,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Amount);
					
					// String
				
						writeString(this.Status,dos);
					
					// Boolean
				
						if(this.Manually == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Manually);
		            	}
					
					// Boolean
				
						if(this.EmailSent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.EmailSent);
		            	}
					
					// java.util.Date
				
						writeDate(this.DateFirsReminder,dos);
					
					// java.util.Date
				
						writeDate(this.DateSecondReminder,dos);
					
					// String
				
						writeString(this.SalesTypeID,dos);
					
					// String
				
						writeString(this.MunicipalStatusID,dos);
					
					// String
				
						writeString(this.MunicipalRemark,dos);
					
					// String
				
						writeString(this.PayeeName,dos);
					
					// String
				
						writeString(this.PaymentMethodID,dos);
					
					// String
				
						writeString(this.ThemeUUID,dos);
					
					// String
				
						writeString(this.Introducer,dos);
					
					// Boolean
				
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.DateCreated,dos);
					
					// java.util.Date
				
						writeDate(this.DateModified,dos);
					
					// String
				
						writeString(this.CreatedBy,dos);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BookingID="+String.valueOf(BookingID));
		sb.append(",ProjectID="+ProjectID);
		sb.append(",CustomerID="+CustomerID);
		sb.append(",Type="+Type);
		sb.append(",BookingDate="+String.valueOf(BookingDate));
		sb.append(",ReservationDate="+String.valueOf(ReservationDate));
		sb.append(",ExpiryDate="+String.valueOf(ExpiryDate));
		sb.append(",Amount="+String.valueOf(Amount));
		sb.append(",Status="+Status);
		sb.append(",Manually="+String.valueOf(Manually));
		sb.append(",EmailSent="+String.valueOf(EmailSent));
		sb.append(",DateFirsReminder="+String.valueOf(DateFirsReminder));
		sb.append(",DateSecondReminder="+String.valueOf(DateSecondReminder));
		sb.append(",SalesTypeID="+SalesTypeID);
		sb.append(",MunicipalStatusID="+MunicipalStatusID);
		sb.append(",MunicipalRemark="+MunicipalRemark);
		sb.append(",PayeeName="+PayeeName);
		sb.append(",PaymentMethodID="+PaymentMethodID);
		sb.append(",ThemeUUID="+ThemeUUID);
		sb.append(",Introducer="+Introducer);
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",ModifiedBy="+ModifiedBy);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int BookingID;

				public int getBookingID () {
					return this.BookingID;
				}
				
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Type;

				public String getType () {
					return this.Type;
				}
				
			    public java.util.Date BookingDate;

				public java.util.Date getBookingDate () {
					return this.BookingDate;
				}
				
			    public java.util.Date ReservationDate;

				public java.util.Date getReservationDate () {
					return this.ReservationDate;
				}
				
			    public java.util.Date ExpiryDate;

				public java.util.Date getExpiryDate () {
					return this.ExpiryDate;
				}
				
			    public BigDecimal Amount;

				public BigDecimal getAmount () {
					return this.Amount;
				}
				
			    public String Status;

				public String getStatus () {
					return this.Status;
				}
				
			    public Boolean Manually;

				public Boolean getManually () {
					return this.Manually;
				}
				
			    public Boolean EmailSent;

				public Boolean getEmailSent () {
					return this.EmailSent;
				}
				
			    public java.util.Date DateFirsReminder;

				public java.util.Date getDateFirsReminder () {
					return this.DateFirsReminder;
				}
				
			    public java.util.Date DateSecondReminder;

				public java.util.Date getDateSecondReminder () {
					return this.DateSecondReminder;
				}
				
			    public String SalesTypeID;

				public String getSalesTypeID () {
					return this.SalesTypeID;
				}
				
			    public String MunicipalStatusID;

				public String getMunicipalStatusID () {
					return this.MunicipalStatusID;
				}
				
			    public String MunicipalRemark;

				public String getMunicipalRemark () {
					return this.MunicipalRemark;
				}
				
			    public String PayeeName;

				public String getPayeeName () {
					return this.PayeeName;
				}
				
			    public String PaymentMethodID;

				public String getPaymentMethodID () {
					return this.PaymentMethodID;
				}
				
			    public String ThemeUUID;

				public String getThemeUUID () {
					return this.ThemeUUID;
				}
				
			    public String Introducer;

				public String getIntroducer () {
					return this.Introducer;
				}
				
			    public Boolean Deleted;

				public Boolean getDeleted () {
					return this.Deleted;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.BookingID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.BookingID != other.BookingID)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.BookingID = this.BookingID;
	            other.ProjectID = this.ProjectID;
	            other.CustomerID = this.CustomerID;
	            other.Type = this.Type;
	            other.BookingDate = this.BookingDate;
	            other.ReservationDate = this.ReservationDate;
	            other.ExpiryDate = this.ExpiryDate;
	            other.Amount = this.Amount;
	            other.Status = this.Status;
	            other.Manually = this.Manually;
	            other.EmailSent = this.EmailSent;
	            other.DateFirsReminder = this.DateFirsReminder;
	            other.DateSecondReminder = this.DateSecondReminder;
	            other.SalesTypeID = this.SalesTypeID;
	            other.MunicipalStatusID = this.MunicipalStatusID;
	            other.MunicipalRemark = this.MunicipalRemark;
	            other.PayeeName = this.PayeeName;
	            other.PaymentMethodID = this.PaymentMethodID;
	            other.ThemeUUID = this.ThemeUUID;
	            other.Introducer = this.Introducer;
	            other.Deleted = this.Deleted;
	            other.DateCreated = this.DateCreated;
	            other.DateModified = this.DateModified;
	            other.CreatedBy = this.CreatedBy;
	            other.ModifiedBy = this.ModifiedBy;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.BookingID = this.BookingID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingID = dis.readInt();
					
					this.ProjectID = readString(dis);
					
					this.CustomerID = readString(dis);
					
					this.Type = readString(dis);
					
					this.BookingDate = readDate(dis);
					
					this.ReservationDate = readDate(dis);
					
					this.ExpiryDate = readDate(dis);
					
						this.Amount = (BigDecimal) dis.readObject();
					
					this.Status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Manually = null;
           				} else {
           			    	this.Manually = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EmailSent = null;
           				} else {
           			    	this.EmailSent = dis.readBoolean();
           				}
					
					this.DateFirsReminder = readDate(dis);
					
					this.DateSecondReminder = readDate(dis);
					
					this.SalesTypeID = readString(dis);
					
					this.MunicipalStatusID = readString(dis);
					
					this.MunicipalRemark = readString(dis);
					
					this.PayeeName = readString(dis);
					
					this.PaymentMethodID = readString(dis);
					
					this.ThemeUUID = readString(dis);
					
					this.Introducer = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
					this.DateCreated = readDate(dis);
					
					this.DateModified = readDate(dis);
					
					this.CreatedBy = readString(dis);
					
					this.ModifiedBy = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingID = dis.readInt();
					
					this.ProjectID = readString(dis);
					
					this.CustomerID = readString(dis);
					
					this.Type = readString(dis);
					
					this.BookingDate = readDate(dis);
					
					this.ReservationDate = readDate(dis);
					
					this.ExpiryDate = readDate(dis);
					
						this.Amount = (BigDecimal) dis.readObject();
					
					this.Status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Manually = null;
           				} else {
           			    	this.Manually = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EmailSent = null;
           				} else {
           			    	this.EmailSent = dis.readBoolean();
           				}
					
					this.DateFirsReminder = readDate(dis);
					
					this.DateSecondReminder = readDate(dis);
					
					this.SalesTypeID = readString(dis);
					
					this.MunicipalStatusID = readString(dis);
					
					this.MunicipalRemark = readString(dis);
					
					this.PayeeName = readString(dis);
					
					this.PaymentMethodID = readString(dis);
					
					this.ThemeUUID = readString(dis);
					
					this.Introducer = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
					this.DateCreated = readDate(dis);
					
					this.DateModified = readDate(dis);
					
					this.CreatedBy = readString(dis);
					
					this.ModifiedBy = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// String
				
						writeString(this.ProjectID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// String
				
						writeString(this.Type,dos);
					
					// java.util.Date
				
						writeDate(this.BookingDate,dos);
					
					// java.util.Date
				
						writeDate(this.ReservationDate,dos);
					
					// java.util.Date
				
						writeDate(this.ExpiryDate,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Amount);
					
					// String
				
						writeString(this.Status,dos);
					
					// Boolean
				
						if(this.Manually == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Manually);
		            	}
					
					// Boolean
				
						if(this.EmailSent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.EmailSent);
		            	}
					
					// java.util.Date
				
						writeDate(this.DateFirsReminder,dos);
					
					// java.util.Date
				
						writeDate(this.DateSecondReminder,dos);
					
					// String
				
						writeString(this.SalesTypeID,dos);
					
					// String
				
						writeString(this.MunicipalStatusID,dos);
					
					// String
				
						writeString(this.MunicipalRemark,dos);
					
					// String
				
						writeString(this.PayeeName,dos);
					
					// String
				
						writeString(this.PaymentMethodID,dos);
					
					// String
				
						writeString(this.ThemeUUID,dos);
					
					// String
				
						writeString(this.Introducer,dos);
					
					// Boolean
				
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.DateCreated,dos);
					
					// java.util.Date
				
						writeDate(this.DateModified,dos);
					
					// String
				
						writeString(this.CreatedBy,dos);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingID);
					
					// String
				
						writeString(this.ProjectID,dos);
					
					// String
				
						writeString(this.CustomerID,dos);
					
					// String
				
						writeString(this.Type,dos);
					
					// java.util.Date
				
						writeDate(this.BookingDate,dos);
					
					// java.util.Date
				
						writeDate(this.ReservationDate,dos);
					
					// java.util.Date
				
						writeDate(this.ExpiryDate,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Amount);
					
					// String
				
						writeString(this.Status,dos);
					
					// Boolean
				
						if(this.Manually == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Manually);
		            	}
					
					// Boolean
				
						if(this.EmailSent == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.EmailSent);
		            	}
					
					// java.util.Date
				
						writeDate(this.DateFirsReminder,dos);
					
					// java.util.Date
				
						writeDate(this.DateSecondReminder,dos);
					
					// String
				
						writeString(this.SalesTypeID,dos);
					
					// String
				
						writeString(this.MunicipalStatusID,dos);
					
					// String
				
						writeString(this.MunicipalRemark,dos);
					
					// String
				
						writeString(this.PayeeName,dos);
					
					// String
				
						writeString(this.PaymentMethodID,dos);
					
					// String
				
						writeString(this.ThemeUUID,dos);
					
					// String
				
						writeString(this.Introducer,dos);
					
					// Boolean
				
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
					// java.util.Date
				
						writeDate(this.DateCreated,dos);
					
					// java.util.Date
				
						writeDate(this.DateModified,dos);
					
					// String
				
						writeString(this.CreatedBy,dos);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BookingID="+String.valueOf(BookingID));
		sb.append(",ProjectID="+ProjectID);
		sb.append(",CustomerID="+CustomerID);
		sb.append(",Type="+Type);
		sb.append(",BookingDate="+String.valueOf(BookingDate));
		sb.append(",ReservationDate="+String.valueOf(ReservationDate));
		sb.append(",ExpiryDate="+String.valueOf(ExpiryDate));
		sb.append(",Amount="+String.valueOf(Amount));
		sb.append(",Status="+Status);
		sb.append(",Manually="+String.valueOf(Manually));
		sb.append(",EmailSent="+String.valueOf(EmailSent));
		sb.append(",DateFirsReminder="+String.valueOf(DateFirsReminder));
		sb.append(",DateSecondReminder="+String.valueOf(DateSecondReminder));
		sb.append(",SalesTypeID="+SalesTypeID);
		sb.append(",MunicipalStatusID="+MunicipalStatusID);
		sb.append(",MunicipalRemark="+MunicipalRemark);
		sb.append(",PayeeName="+PayeeName);
		sb.append(",PaymentMethodID="+PaymentMethodID);
		sb.append(",ThemeUUID="+ThemeUUID);
		sb.append(",Introducer="+Introducer);
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",ModifiedBy="+ModifiedBy);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingID, other.BookingID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);
		tDBInput_6Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_7Process(globalMap);
		tDBInput_3Process(globalMap);

		row1Struct row1 = new row1Struct();
PropertyBookingPipelienStruct PropertyBookingPipelien = new PropertyBookingPipelienStruct();
joinCustomerStruct joinCustomer = new joinCustomerStruct();
row8Struct row8 = new row8Struct();
row8Struct row11 = row8;
bookingDatePipelineStruct bookingDatePipeline = new bookingDatePipelineStruct();
reservationDatePipelineStruct reservationDatePipeline = new reservationDatePipelineStruct();








	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "property_booking";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		
        String properties_tDBOutput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
            properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_1 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_DataWarehouse" + "?" + properties_tDBOutput_1;
		
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "skyuser";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:JbVs97HRH+Y7ucBbw6HQxo1LwBf1/02e4uOzNjaBYmMpLBKunIgSA3hm");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	

				String insert_tDBOutput_1 = "INSERT INTO `" + "property_booking" + "` (`ProjectID`,`BookingCancellationID`,`BookingID`,`UnitID`,`CustomerID`,`ExtensionID`,`SoldCancellationID`,`BookingUnitID`,`BookingPrice`,`BookingStatus`,`BookingDateID`,`ReservationDateID`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 100;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
		        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tFlowMeter_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeter_17", false);
		start_Hash.put("tFlowMeter_17", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeter_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tFlowMeter_17 = 0;
		

    int count_tFlowMeter_17 = 0; 
 



/**
 * [tFlowMeter_17 begin ] stop
 */



	
	/**
	 * [tJoin_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_1", false);
		start_Hash.put("tJoin_1", System.currentTimeMillis());
		
	
	currentComponent="tJoin_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"joinCustomer");
					}
				
		int tos_count_tJoin_1 = 0;
		
    final java.util.Map<row7Struct, row7Struct> tHash_tJoin_1 = (java.util.Map<row7Struct, row7Struct>) globalMap.get("tHash_row7");
    
    class Util_tJoin_1
    {
        row7Struct lookupValue = null;
        row7Struct row7HashKey = new row7Struct(); 
        
        public boolean isJoined(joinCustomerStruct mainRow) {                        
           row7HashKey.CustomerID = mainRow.CustomerID;

			row7HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_1.get(row7HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();
        
    int nb_line_tJoin_1 = 0; 
 



/**
 * [tJoin_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PropertyBookingPipelien");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
joinCustomerStruct joinCustomer_tmp = new joinCustomerStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"bookingDatePipeline");
					}
				
		int tos_count_tDBOutput_2 = 0;
		






int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "property_booking_date";
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
long date_tDBOutput_2;

java.sql.Connection conn_tDBOutput_2 = null;
		
        String properties_tDBOutput_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBOutput_2 == null || properties_tDBOutput_2.trim().length() == 0) {
            properties_tDBOutput_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_2.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_2.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_2 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_DataWarehouse" + "?" + properties_tDBOutput_2;
		
		String driverClass_tDBOutput_2 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_2 = "skyuser";
		

		 
	final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Y7nPgGXjHIZtPXgTifZd0GLS0W+7TGGnH7EgHb6Pz/9ABFcwdT//k2+x");

		String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
		java.lang.Class.forName(driverClass_tDBOutput_2);
		
		conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);
		
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 10000;
        int commitCounter_tDBOutput_2 = 0;

int count_tDBOutput_2=0;
    	

				String insert_tDBOutput_2 = "INSERT INTO `" + "property_booking_date" + "` (`BookingDateID`,`Year`,`Month`,`Quarter`,`Date`) VALUES (?,?,?,?,?)";
		        int batchSize_tDBOutput_2 = 100;
	   			int batchSizeCounter_tDBOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
		        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);


 



/**
 * [tDBOutput_2 begin ] stop
 */




	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"reservationDatePipeline");
					}
				
		int tos_count_tDBOutput_3 = 0;
		






int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

String tableName_tDBOutput_3 = "property_reservation_date";
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
long date_tDBOutput_3;

java.sql.Connection conn_tDBOutput_3 = null;
		
        String properties_tDBOutput_3 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBOutput_3 == null || properties_tDBOutput_3.trim().length() == 0) {
            properties_tDBOutput_3 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_3.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_3.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_3 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_3 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_DataWarehouse" + "?" + properties_tDBOutput_3;
		
		String driverClass_tDBOutput_3 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_3 = "skyuser";
		

		 
	final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:sRpKK73sAwg5X8120Kp9yq3StVa7zydrAuQ7HEK8XzCkEpeh96NEN+ug");

		String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
		java.lang.Class.forName(driverClass_tDBOutput_3);
		
		conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);
		
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 10000;
        int commitCounter_tDBOutput_3 = 0;

int count_tDBOutput_3=0;
    	

				String insert_tDBOutput_3 = "INSERT INTO `" + "property_reservation_date" + "` (`ReservationDateID`,`Year`,`Month`,`Quarter`,`Date`) VALUES (?,?,?,?,?)";
		        int batchSize_tDBOutput_3 = 100;
	   			int batchSizeCounter_tDBOutput_3=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
		        resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);


 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	boolean isBookingExist;
	boolean isReservationExist;
	String BookingDateID;
	String ReservationDateID;
	String date;
	String month;
	int quarter;
	String reservedate;
	String reservemonth;
	int reservequarter;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
PropertyBookingPipelienStruct PropertyBookingPipelien_tmp = new PropertyBookingPipelienStruct();
bookingDatePipelineStruct bookingDatePipeline_tmp = new bookingDatePipelineStruct();
reservationDatePipelineStruct reservationDatePipeline_tmp = new reservationDatePipelineStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "skyuser";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:4Fx6/rdfxAOz1dITfSpSI5UrJJI6gLnuoVA1MuuIKX6zShBzOHw27boC");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
        String properties_tDBInput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_1 == null || properties_tDBInput_1.trim().length() == 0) {
            properties_tDBInput_1 = "";
        }
        String url_tDBInput_1 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_STUDENT" + "?" + properties_tDBInput_1;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `property_bookings`.`BookingID`, \n  `property_bookings`.`ProjectID`, \n  `property_bookings`.`CustomerID`, \n  "
+"`property_bookings`.`Type`, \n  `property_bookings`.`BookingDate`, \n  `property_bookings`.`ReservationDate`, \n  `property"
+"_bookings`.`ExpiryDate`, \n  `property_bookings`.`Amount`, \n  `property_bookings`.`Status`, \n  `property_bookings`.`Manua"
+"lly`, \n  `property_bookings`.`EmailSent`, \n  `property_bookings`.`DateFirsReminder`, \n  `property_bookings`.`DateSecondR"
+"eminder`, \n  `property_bookings`.`SalesTypeID`, \n  `property_bookings`.`MunicipalStatusID`, \n  `property_bookings`.`Muni"
+"cipalRemark`, \n  `property_bookings`.`PayeeName`, \n  `property_bookings`.`PaymentMethodID`, \n  `property_bookings`.`Them"
+"eUUID`, \n  `property_bookings`.`Introducer`, \n  `property_bookings`.`Deleted`, \n  `property_bookings`.`DateCreated`, \n  "
+"`property_bookings`.`DateModified`, \n  `property_bookings`.`CreatedBy`, \n  `property_bookings`.`ModifiedBy`\nFROM `proper"
+"ty_bookings`";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.BookingID = 0;
							} else {
		                          
            row1.BookingID = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.ProjectID = null;
							} else {
	                         		
        	row1.ProjectID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.CustomerID = null;
							} else {
	                         		
        	row1.CustomerID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.Type = null;
							} else {
	                         		
        	row1.Type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.BookingDate = null;
							} else {
										
				if(rs_tDBInput_1.getString(5) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.BookingDate = rs_tDBInput_1.getTimestamp(5);
					} else {
						row1.BookingDate = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.BookingDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.ReservationDate = null;
							} else {
										
				if(rs_tDBInput_1.getString(6) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(6);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.ReservationDate = rs_tDBInput_1.getTimestamp(6);
					} else {
						row1.ReservationDate = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.ReservationDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.ExpiryDate = null;
							} else {
										
				if(rs_tDBInput_1.getString(7) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(7);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.ExpiryDate = rs_tDBInput_1.getTimestamp(7);
					} else {
						row1.ExpiryDate = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.ExpiryDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.Amount = null;
							} else {
		                          
            row1.Amount = rs_tDBInput_1.getBigDecimal(8);
            if(rs_tDBInput_1.wasNull()){
                    row1.Amount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.Status = null;
							} else {
	                         		
        	row1.Status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.Manually = null;
							} else {
	                         		
            row1.Manually = rs_tDBInput_1.getBoolean(10);
            if(rs_tDBInput_1.wasNull()){
                    row1.Manually = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.EmailSent = null;
							} else {
	                         		
            row1.EmailSent = rs_tDBInput_1.getBoolean(11);
            if(rs_tDBInput_1.wasNull()){
                    row1.EmailSent = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.DateFirsReminder = null;
							} else {
										
				if(rs_tDBInput_1.getString(12) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(12);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DateFirsReminder = rs_tDBInput_1.getTimestamp(12);
					} else {
						row1.DateFirsReminder = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DateFirsReminder =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.DateSecondReminder = null;
							} else {
										
				if(rs_tDBInput_1.getString(13) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(13);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DateSecondReminder = rs_tDBInput_1.getTimestamp(13);
					} else {
						row1.DateSecondReminder = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DateSecondReminder =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.SalesTypeID = null;
							} else {
	                         		
        	row1.SalesTypeID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.MunicipalStatusID = null;
							} else {
	                         		
        	row1.MunicipalStatusID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.MunicipalRemark = null;
							} else {
	                         		
        	row1.MunicipalRemark = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.PayeeName = null;
							} else {
	                         		
        	row1.PayeeName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.PaymentMethodID = null;
							} else {
	                         		
        	row1.PaymentMethodID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.ThemeUUID = null;
							} else {
	                         		
        	row1.ThemeUUID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.Introducer = null;
							} else {
	                         		
        	row1.Introducer = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.Deleted = null;
							} else {
	                         		
            row1.Deleted = rs_tDBInput_1.getBoolean(21);
            if(rs_tDBInput_1.wasNull()){
                    row1.Deleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.DateCreated = null;
							} else {
										
				if(rs_tDBInput_1.getString(22) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(22);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DateCreated = rs_tDBInput_1.getTimestamp(22);
					} else {
						row1.DateCreated = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DateCreated =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.DateModified = null;
							} else {
										
				if(rs_tDBInput_1.getString(23) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(23);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DateModified = rs_tDBInput_1.getTimestamp(23);
					} else {
						row1.DateModified = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DateModified =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.CreatedBy = null;
							} else {
	                         		
        	row1.CreatedBy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.ModifiedBy = null;
							} else {
	                         		
        	row1.ModifiedBy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row2__BookingID = row1.BookingID;
	                        		    	if(exprKeyValue_row2__BookingID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row2HashKey.BookingID = (int)(Integer) exprKeyValue_row2__BookingID;
                        		    		}
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.BookingID = '" + row2HashKey.BookingID + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row3__BookingUnitID = row2.BookingUnitID ;
	                        		    	if(exprKeyValue_row3__BookingUnitID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row3HashKey.BookingUnitID = (int)(Integer) exprKeyValue_row3__BookingUnitID;
                        		    		}
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.BookingUnitID = '" + row3HashKey.BookingUnitID + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row4__UnitID = row2.UnitID;
	                        		    	if(exprKeyValue_row4__UnitID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row4HashKey.UnitID = (int)(Integer) exprKeyValue_row4__UnitID;
                        		    		}
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.UnitID = '" + row4HashKey.UnitID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row5__BookingUnitID = row2.BookingUnitID;
	                        		    	if(exprKeyValue_row5__BookingUnitID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row5HashKey.BookingUnitID = (int)(Integer) exprKeyValue_row5__BookingUnitID;
                        		    		}
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.BookingUnitID = '" + row5HashKey.BookingUnitID + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row6__BookingUnitID = row2.BookingUnitID;
	                        		    	if(exprKeyValue_row6__BookingUnitID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row6HashKey.BookingUnitID = (int)(Integer) exprKeyValue_row6__BookingUnitID;
                        		    		}
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.BookingUnitID = '" + row6HashKey.BookingUnitID + "'");
								} // G 071
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.isBookingExist = row1.BookingDate == null ? false : true ;
Var.isReservationExist = row2.DateReservation == null ? false : true ;
Var.BookingDateID = Var.isBookingExist ? (java.util.UUID.randomUUID()).toString() : null ;
Var.ReservationDateID = Var.isReservationExist ? (java.util.UUID.randomUUID()).toString() : null ;
Var.date = Var.isBookingExist == true ? TalendDate.formatDate("yyyy-MM-dd", row1.BookingDate).toString() : null ;
Var.month = Var.isBookingExist == true ? Var.date.substring(5,7) : null ;
Var.quarter = Var.isBookingExist == true ? (Integer.parseInt(Var.month)/4)+1 : 0 ;
Var.reservedate = Var.isReservationExist == true ? TalendDate.formatDate("yyyy-MM-dd", row2.DateReservation).toString() : null ;
Var.reservemonth = Var.isReservationExist == true ? Var.reservedate.substring(5,7) : null ;
Var.reservequarter = Var.isReservationExist == true ? (Integer.parseInt(Var.reservemonth)/4)+1 : 0 ;// ###############################
        // ###############################
        // # Output tables

PropertyBookingPipelien = null;
bookingDatePipeline = null;
reservationDatePipeline = null;


// # Output table : 'PropertyBookingPipelien'
PropertyBookingPipelien_tmp.ProjectID = row1.ProjectID;
PropertyBookingPipelien_tmp.BookingCancellationID = row3.CancellationHIstoryID != 0 ? row3.CancellationHIstoryID : null ;
PropertyBookingPipelien_tmp.BookingID = row1.BookingID;
PropertyBookingPipelien_tmp.UnitID = row2.UnitID != 0 ? row2.UnitID : null ;
PropertyBookingPipelien_tmp.CustomerID = row1.CustomerID;
PropertyBookingPipelien_tmp.ExtensionID = row5.ExtensionHistoryID != 0 ? row5.ExtensionHistoryID : null ;
PropertyBookingPipelien_tmp.SoldCancellationID = row6.SoldCancellationHistoryID != 0 ? row6.SoldCancellationHistoryID : null ;
PropertyBookingPipelien_tmp.BookingUnitID = row2.BookingUnitID != 0 ? row2.BookingUnitID : null ;
PropertyBookingPipelien_tmp.BookingPrice = row1.Amount.doubleValue() ;
PropertyBookingPipelien_tmp.BookingStatus = row1.Status ;
PropertyBookingPipelien_tmp.BookingDateID = Var.BookingDateID ;
PropertyBookingPipelien_tmp.ReservationDateID = Var.ReservationDateID ;
PropertyBookingPipelien = PropertyBookingPipelien_tmp;

// # Output table : 'bookingDatePipeline'
// # Filter conditions 
if( 

Var.isBookingExist == true

 ) {
bookingDatePipeline_tmp.BookingDateID = Var.BookingDateID;
bookingDatePipeline_tmp.Year = Var.date.substring(0,4);
bookingDatePipeline_tmp.Month = Var.month ;
bookingDatePipeline_tmp.Quarter = Var.quarter ;
bookingDatePipeline_tmp.Date = row1.BookingDate;
bookingDatePipeline = bookingDatePipeline_tmp;
} // closing filter/reject

// # Output table : 'reservationDatePipeline'
// # Filter conditions 
if( 

Var.isReservationExist == true

 ) {
reservationDatePipeline_tmp.ReservationDateID = Var.ReservationDateID ;
reservationDatePipeline_tmp.Year = Var.reservedate.substring(0,4);
reservationDatePipeline_tmp.Month = Var.reservemonth ;
reservationDatePipeline_tmp.Quarter = Var.reservequarter;
reservationDatePipeline_tmp.Date = row2.DateReservation ;
reservationDatePipeline = reservationDatePipeline_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "PropertyBookingPipelien"
if(PropertyBookingPipelien != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PropertyBookingPipelien"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

joinCustomer = null;


// # Output table : 'joinCustomer'
joinCustomer_tmp.ProjectID = PropertyBookingPipelien.ProjectID;
joinCustomer_tmp.BookingCancellationID = PropertyBookingPipelien.BookingCancellationID;
joinCustomer_tmp.BookingID = PropertyBookingPipelien.BookingID;
joinCustomer_tmp.UnitID = PropertyBookingPipelien.UnitID;
joinCustomer_tmp.CustomerID = PropertyBookingPipelien.CustomerID;
joinCustomer_tmp.ExtensionID = PropertyBookingPipelien.ExtensionID;
joinCustomer_tmp.SoldCancellationID = PropertyBookingPipelien.SoldCancellationID;
joinCustomer_tmp.BookingUnitID = PropertyBookingPipelien.BookingUnitID;
joinCustomer_tmp.BookingPrice = PropertyBookingPipelien.BookingPrice;
joinCustomer_tmp.BookingStatus = PropertyBookingPipelien.BookingStatus;
joinCustomer_tmp.BookingDateID = PropertyBookingPipelien.BookingDateID;
joinCustomer_tmp.ReservationDateID = PropertyBookingPipelien.ReservationDateID;
joinCustomer = joinCustomer_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "joinCustomer"
if(joinCustomer != null) { 



	
	/**
	 * [tJoin_1 main ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"joinCustomer"
						
						);
					}
					

			row8 = null;	
	
				row8 = new row8Struct();						
						row8.ProjectID = joinCustomer.ProjectID;					
						row8.BookingCancellationID = joinCustomer.BookingCancellationID;					
						row8.BookingID = joinCustomer.BookingID;					
						row8.UnitID = joinCustomer.UnitID;					
						row8.CustomerID = joinCustomer.CustomerID;					
						row8.ExtensionID = joinCustomer.ExtensionID;					
						row8.SoldCancellationID = joinCustomer.SoldCancellationID;					
						row8.BookingUnitID = joinCustomer.BookingUnitID;					
						row8.BookingPrice = joinCustomer.BookingPrice;					
						row8.BookingStatus = joinCustomer.BookingStatus;					
						row8.BookingDateID = joinCustomer.BookingDateID;					
						row8.ReservationDateID = joinCustomer.ReservationDateID;

			if(util_tJoin_1.isJoined(joinCustomer)){ 
			} 
		
				else{ 
						row8 = null; 
				}		
///////////////////////    			

 


	tos_count_tJoin_1++;

/**
 * [tJoin_1 main ] stop
 */
	
	/**
	 * [tJoin_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tFlowMeter_17 main ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

    count_tFlowMeter_17++; 
 
     row11 = row8;


	tos_count_tFlowMeter_17++;

/**
 * [tFlowMeter_17 main ] stop
 */
	
	/**
	 * [tFlowMeter_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

 



/**
 * [tFlowMeter_17 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                            if(row11.ProjectID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row11.ProjectID);
}

                            if(row11.BookingCancellationID == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(2, row11.BookingCancellationID);
}

                            pstmt_tDBOutput_1.setInt(3, row11.BookingID);

                            if(row11.UnitID == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, row11.UnitID);
}

                            if(row11.CustomerID == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row11.CustomerID);
}

                            if(row11.ExtensionID == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, row11.ExtensionID);
}

                            if(row11.SoldCancellationID == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(7, row11.SoldCancellationID);
}

                            if(row11.BookingUnitID == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(8, row11.BookingUnitID);
}

                            if(row11.BookingPrice == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(9, row11.BookingPrice);
}

                            if(row11.BookingStatus == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, row11.BookingStatus);
}

                            if(row11.BookingDateID == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, row11.BookingDateID);
}

                            if(row11.ReservationDateID == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, row11.ReservationDateID);
}

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

						
                      batchSizeCounter_tDBOutput_1++;
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());

                }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                        rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeter_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

 



/**
 * [tFlowMeter_17 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tJoin_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 process_data_end ] stop
 */

} // End of branch "joinCustomer"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "PropertyBookingPipelien"




// Start of branch "bookingDatePipeline"
if(bookingDatePipeline != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"bookingDatePipeline"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                            if(bookingDatePipeline.BookingDateID == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, bookingDatePipeline.BookingDateID);
}

                            if(bookingDatePipeline.Year == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, bookingDatePipeline.Year);
}

                            if(bookingDatePipeline.Month == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, bookingDatePipeline.Month);
}

                            if(bookingDatePipeline.Quarter == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(4, bookingDatePipeline.Quarter);
}

                            if(bookingDatePipeline.Date != null) {
date_tDBOutput_2 = bookingDatePipeline.Date.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(5, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(5, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_2.addBatch();
                    nb_line_tDBOutput_2++;

						
                      batchSizeCounter_tDBOutput_2++;
                if ( batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_2 = 0;
            }
                commitCounter_tDBOutput_2++;

                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
                        insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());

                }
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                        rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;

                }


 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "bookingDatePipeline"




// Start of branch "reservationDatePipeline"
if(reservationDatePipeline != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"reservationDatePipeline"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                            if(reservationDatePipeline.ReservationDateID == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, reservationDatePipeline.ReservationDateID);
}

                            if(reservationDatePipeline.Year == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, reservationDatePipeline.Year);
}

                            if(reservationDatePipeline.Month == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, reservationDatePipeline.Month);
}

                            if(reservationDatePipeline.Quarter == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_3.setInt(4, reservationDatePipeline.Quarter);
}

                            if(reservationDatePipeline.Date != null) {
date_tDBOutput_3 = reservationDatePipeline.Date.getTime();
if(date_tDBOutput_3 < year1_tDBOutput_3 || date_tDBOutput_3 >= year10000_tDBOutput_3) {
pstmt_tDBOutput_3.setString(5, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_3.setTimestamp(5, new java.sql.Timestamp(date_tDBOutput_3));
}
} else {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_3.addBatch();
                    nb_line_tDBOutput_3++;

						
                      batchSizeCounter_tDBOutput_3++;
                if ( batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
                try {
                        int countSum_tDBOutput_3 = 0;
                        for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
                        insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_3 = 0;
                    for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
                        countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                    }
                    rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
                    insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_3 = 0;
            }
                commitCounter_tDBOutput_3++;

                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

                try {
                        int countSum_tDBOutput_3 = 0;
                        for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
                        insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_3 = 0;
                    for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
                        countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                    }
                    rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
                    insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
                    System.err.println(e.getMessage());

                }
                    if(rowsToCommitCount_tDBOutput_3 != 0){
                    }
                    conn_tDBOutput_3.commit();
                    if(rowsToCommitCount_tDBOutput_3 != 0){
                        rowsToCommitCount_tDBOutput_3 = 0;
                    }
                    commitCounter_tDBOutput_3=0;

                }


 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "reservationDatePipeline"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PropertyBookingPipelien");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tJoin_1 end ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"joinCustomer");
			  	}
			  	
 

ok_Hash.put("tJoin_1", true);
end_Hash.put("tJoin_1", System.currentTimeMillis());




/**
 * [tJoin_1 end ] stop
 */

	
	/**
	 * [tFlowMeter_17 end ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

	tFlowMeterCatcher_1.addMessage("row8", new Integer(count_tFlowMeter_17), "null", "", "tFlowMeter_17");

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tFlowMeter_17", true);
end_Hash.put("tFlowMeter_17", System.currentTimeMillis());




/**
 * [tFlowMeter_17 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                    globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
    	}
    	conn_tDBOutput_1.commit();
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
			rowsToCommitCount_tDBOutput_1 = 0;
    	}
		commitCounter_tDBOutput_1 = 0;
    	
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */













	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



                try {
                		if (batchSizeCounter_tDBOutput_2 != 0) {
							int countSum_tDBOutput_2 = 0;
							
							for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
								countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
							
	            	    	
	            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                    globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
            	    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	    	
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_2 = 0;
    		
	

        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
				resourceMap.remove("pstmt_tDBOutput_2");
			
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
    	if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {
    		
    	}
    	conn_tDBOutput_2.commit();
    	if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {
    		
			rowsToCommitCount_tDBOutput_2 = 0;
    	}
		commitCounter_tDBOutput_2 = 0;
    	
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"bookingDatePipeline");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */




	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



                try {
                		if (batchSizeCounter_tDBOutput_3 != 0) {
							int countSum_tDBOutput_3 = 0;
							
							for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
								countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
							
	            	    	
	            	    		insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                    globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
					
            	    insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	    	
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_3 = 0;
    		
	

        if(pstmt_tDBOutput_3 != null) {
			
				pstmt_tDBOutput_3.close();
				resourceMap.remove("pstmt_tDBOutput_3");
			
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
    	if (commitCounter_tDBOutput_3 > 0 && rowsToCommitCount_tDBOutput_3 != 0) {
    		
    	}
    	conn_tDBOutput_3.commit();
    	if (commitCounter_tDBOutput_3 > 0 && rowsToCommitCount_tDBOutput_3 != 0) {
    		
			rowsToCommitCount_tDBOutput_3 = 0;
    	}
		commitCounter_tDBOutput_3 = 0;
    	
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"reservationDatePipeline");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
							tFlowMeterCatcher_1Process(globalMap);
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				      	
					      			//free memory for "tJoin_1"
									globalMap.remove("tHash_row7");
				      			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tJoin_1 finally ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 finally ] stop
 */

	
	/**
	 * [tFlowMeter_17 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeter_17";

	

 



/**
 * [tFlowMeter_17 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */













	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */




	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int UnitID;

				public int getUnitID () {
					return this.UnitID;
				}
				
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public Integer FloorPlanID;

				public Integer getFloorPlanID () {
					return this.FloorPlanID;
				}
				
			    public Integer BlockID;

				public Integer getBlockID () {
					return this.BlockID;
				}
				
			    public String UnitNo;

				public String getUnitNo () {
					return this.UnitNo;
				}
				
			    public String Tower;

				public String getTower () {
					return this.Tower;
				}
				
			    public String Facing;

				public String getFacing () {
					return this.Facing;
				}
				
			    public BigDecimal BuiltUpArea;

				public BigDecimal getBuiltUpArea () {
					return this.BuiltUpArea;
				}
				
			    public String LotNo;

				public String getLotNo () {
					return this.LotNo;
				}
				
			    public String Level;

				public String getLevel () {
					return this.Level;
				}
				
			    public BigDecimal SPAPrice;

				public BigDecimal getSPAPrice () {
					return this.SPAPrice;
				}
				
			    public BigDecimal ActualPrice;

				public BigDecimal getActualPrice () {
					return this.ActualPrice;
				}
				
			    public BigDecimal Discount;

				public BigDecimal getDiscount () {
					return this.Discount;
				}
				
			    public BigDecimal PricePerSqft;

				public BigDecimal getPricePerSqft () {
					return this.PricePerSqft;
				}
				
			    public String Furnishing;

				public String getFurnishing () {
					return this.Furnishing;
				}
				
			    public java.util.Date DateSold;

				public java.util.Date getDateSold () {
					return this.DateSold;
				}
				
			    public String LockedByAgentID;

				public String getLockedByAgentID () {
					return this.LockedByAgentID;
				}
				
			    public Boolean BumiLot;

				public Boolean getBumiLot () {
					return this.BumiLot;
				}
				
			    public Integer Status;

				public Integer getStatus () {
					return this.Status;
				}
				
			    public String Remark;

				public String getRemark () {
					return this.Remark;
				}
				
			    public String FacingCn;

				public String getFacingCn () {
					return this.FacingCn;
				}
				
			    public String FurnishingCn;

				public String getFurnishingCn () {
					return this.FurnishingCn;
				}
				
			    public BigDecimal ExtraTerrace;

				public BigDecimal getExtraTerrace () {
					return this.ExtraTerrace;
				}
				
			    public String CarparkType;

				public String getCarparkType () {
					return this.CarparkType;
				}
				
			    public String Orientation;

				public String getOrientation () {
					return this.Orientation;
				}
				
			    public BigDecimal TerracePrice;

				public BigDecimal getTerracePrice () {
					return this.TerracePrice;
				}
				
			    public BigDecimal CarparkPrice;

				public BigDecimal getCarparkPrice () {
					return this.CarparkPrice;
				}
				
			    public Boolean Deleted;

				public Boolean getDeleted () {
					return this.Deleted;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.UnitID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.UnitID != other.UnitID)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.UnitID = this.UnitID;
	            other.ProjectID = this.ProjectID;
	            other.FloorPlanID = this.FloorPlanID;
	            other.BlockID = this.BlockID;
	            other.UnitNo = this.UnitNo;
	            other.Tower = this.Tower;
	            other.Facing = this.Facing;
	            other.BuiltUpArea = this.BuiltUpArea;
	            other.LotNo = this.LotNo;
	            other.Level = this.Level;
	            other.SPAPrice = this.SPAPrice;
	            other.ActualPrice = this.ActualPrice;
	            other.Discount = this.Discount;
	            other.PricePerSqft = this.PricePerSqft;
	            other.Furnishing = this.Furnishing;
	            other.DateSold = this.DateSold;
	            other.LockedByAgentID = this.LockedByAgentID;
	            other.BumiLot = this.BumiLot;
	            other.Status = this.Status;
	            other.Remark = this.Remark;
	            other.FacingCn = this.FacingCn;
	            other.FurnishingCn = this.FurnishingCn;
	            other.ExtraTerrace = this.ExtraTerrace;
	            other.CarparkType = this.CarparkType;
	            other.Orientation = this.Orientation;
	            other.TerracePrice = this.TerracePrice;
	            other.CarparkPrice = this.CarparkPrice;
	            other.Deleted = this.Deleted;
	            other.DateCreated = this.DateCreated;
	            other.DateModified = this.DateModified;
	            other.CreatedBy = this.CreatedBy;
	            other.ModifiedBy = this.ModifiedBy;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.UnitID = this.UnitID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.UnitID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.UnitID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UnitID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UnitID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ProjectID = readString(dis,ois);
					
						this.FloorPlanID = readInteger(dis,ois);
					
						this.BlockID = readInteger(dis,ois);
					
						this.UnitNo = readString(dis,ois);
					
						this.Tower = readString(dis,ois);
					
						this.Facing = readString(dis,ois);
					
       			    	this.BuiltUpArea = (BigDecimal) ois.readObject();
					
						this.LotNo = readString(dis,ois);
					
						this.Level = readString(dis,ois);
					
       			    	this.SPAPrice = (BigDecimal) ois.readObject();
					
       			    	this.ActualPrice = (BigDecimal) ois.readObject();
					
       			    	this.Discount = (BigDecimal) ois.readObject();
					
       			    	this.PricePerSqft = (BigDecimal) ois.readObject();
					
						this.Furnishing = readString(dis,ois);
					
						this.DateSold = readDate(dis,ois);
					
						this.LockedByAgentID = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BumiLot = null;
           				} else {
           			    	this.BumiLot = dis.readBoolean();
           				}
					
						this.Status = readInteger(dis,ois);
					
						this.Remark = readString(dis,ois);
					
						this.FacingCn = readString(dis,ois);
					
						this.FurnishingCn = readString(dis,ois);
					
       			    	this.ExtraTerrace = (BigDecimal) ois.readObject();
					
						this.CarparkType = readString(dis,ois);
					
						this.Orientation = readString(dis,ois);
					
       			    	this.TerracePrice = (BigDecimal) ois.readObject();
					
       			    	this.CarparkPrice = (BigDecimal) ois.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,ois);
					
						this.DateModified = readDate(dis,ois);
					
						this.CreatedBy = readString(dis,ois);
					
						this.ModifiedBy = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.ProjectID = readString(dis,objectIn);
					
						this.FloorPlanID = readInteger(dis,objectIn);
					
						this.BlockID = readInteger(dis,objectIn);
					
						this.UnitNo = readString(dis,objectIn);
					
						this.Tower = readString(dis,objectIn);
					
						this.Facing = readString(dis,objectIn);
					
       			    	this.BuiltUpArea = (BigDecimal) objectIn.readObject();
					
						this.LotNo = readString(dis,objectIn);
					
						this.Level = readString(dis,objectIn);
					
       			    	this.SPAPrice = (BigDecimal) objectIn.readObject();
					
       			    	this.ActualPrice = (BigDecimal) objectIn.readObject();
					
       			    	this.Discount = (BigDecimal) objectIn.readObject();
					
       			    	this.PricePerSqft = (BigDecimal) objectIn.readObject();
					
						this.Furnishing = readString(dis,objectIn);
					
						this.DateSold = readDate(dis,objectIn);
					
						this.LockedByAgentID = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.BumiLot = null;
           				} else {
           			    	this.BumiLot = objectIn.readBoolean();
           				}
					
						this.Status = readInteger(dis,objectIn);
					
						this.Remark = readString(dis,objectIn);
					
						this.FacingCn = readString(dis,objectIn);
					
						this.FurnishingCn = readString(dis,objectIn);
					
       			    	this.ExtraTerrace = (BigDecimal) objectIn.readObject();
					
						this.CarparkType = readString(dis,objectIn);
					
						this.Orientation = readString(dis,objectIn);
					
       			    	this.TerracePrice = (BigDecimal) objectIn.readObject();
					
       			    	this.CarparkPrice = (BigDecimal) objectIn.readObject();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = objectIn.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,objectIn);
					
						this.DateModified = readDate(dis,objectIn);
					
						this.CreatedBy = readString(dis,objectIn);
					
						this.ModifiedBy = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ProjectID, dos, oos);
					
					writeInteger(this.FloorPlanID, dos, oos);
					
					writeInteger(this.BlockID, dos, oos);
					
						writeString(this.UnitNo, dos, oos);
					
						writeString(this.Tower, dos, oos);
					
						writeString(this.Facing, dos, oos);
					
       			    	oos.writeObject(this.BuiltUpArea);
					
						writeString(this.LotNo, dos, oos);
					
						writeString(this.Level, dos, oos);
					
       			    	oos.writeObject(this.SPAPrice);
					
       			    	oos.writeObject(this.ActualPrice);
					
       			    	oos.writeObject(this.Discount);
					
       			    	oos.writeObject(this.PricePerSqft);
					
						writeString(this.Furnishing, dos, oos);
					
						writeDate(this.DateSold, dos, oos);
					
						writeString(this.LockedByAgentID, dos, oos);
					
						if(this.BumiLot == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.BumiLot);
		            	}
					
					writeInteger(this.Status, dos, oos);
					
						writeString(this.Remark, dos, oos);
					
						writeString(this.FacingCn, dos, oos);
					
						writeString(this.FurnishingCn, dos, oos);
					
       			    	oos.writeObject(this.ExtraTerrace);
					
						writeString(this.CarparkType, dos, oos);
					
						writeString(this.Orientation, dos, oos);
					
       			    	oos.writeObject(this.TerracePrice);
					
       			    	oos.writeObject(this.CarparkPrice);
					
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, oos);
					
						writeDate(this.DateModified, dos, oos);
					
						writeString(this.CreatedBy, dos, oos);
					
						writeString(this.ModifiedBy, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.ProjectID, dos, objectOut);
					
					writeInteger(this.FloorPlanID, dos, objectOut);
					
					writeInteger(this.BlockID, dos, objectOut);
					
						writeString(this.UnitNo, dos, objectOut);
					
						writeString(this.Tower, dos, objectOut);
					
						writeString(this.Facing, dos, objectOut);
					
       			    	objectOut.writeObject(this.BuiltUpArea);
					
						writeString(this.LotNo, dos, objectOut);
					
						writeString(this.Level, dos, objectOut);
					
       			    	objectOut.writeObject(this.SPAPrice);
					
       			    	objectOut.writeObject(this.ActualPrice);
					
       			    	objectOut.writeObject(this.Discount);
					
       			    	objectOut.writeObject(this.PricePerSqft);
					
						writeString(this.Furnishing, dos, objectOut);
					
						writeDate(this.DateSold, dos, objectOut);
					
						writeString(this.LockedByAgentID, dos, objectOut);
					
						if(this.BumiLot == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.BumiLot);
		            	}
					
					writeInteger(this.Status, dos, objectOut);
					
						writeString(this.Remark, dos, objectOut);
					
						writeString(this.FacingCn, dos, objectOut);
					
						writeString(this.FurnishingCn, dos, objectOut);
					
       			    	objectOut.writeObject(this.ExtraTerrace);
					
						writeString(this.CarparkType, dos, objectOut);
					
						writeString(this.Orientation, dos, objectOut);
					
       			    	objectOut.writeObject(this.TerracePrice);
					
       			    	objectOut.writeObject(this.CarparkPrice);
					
						if(this.Deleted == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, objectOut);
					
						writeDate(this.DateModified, dos, objectOut);
					
						writeString(this.CreatedBy, dos, objectOut);
					
						writeString(this.ModifiedBy, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UnitID="+String.valueOf(UnitID));
		sb.append(",ProjectID="+ProjectID);
		sb.append(",FloorPlanID="+String.valueOf(FloorPlanID));
		sb.append(",BlockID="+String.valueOf(BlockID));
		sb.append(",UnitNo="+UnitNo);
		sb.append(",Tower="+Tower);
		sb.append(",Facing="+Facing);
		sb.append(",BuiltUpArea="+String.valueOf(BuiltUpArea));
		sb.append(",LotNo="+LotNo);
		sb.append(",Level="+Level);
		sb.append(",SPAPrice="+String.valueOf(SPAPrice));
		sb.append(",ActualPrice="+String.valueOf(ActualPrice));
		sb.append(",Discount="+String.valueOf(Discount));
		sb.append(",PricePerSqft="+String.valueOf(PricePerSqft));
		sb.append(",Furnishing="+Furnishing);
		sb.append(",DateSold="+String.valueOf(DateSold));
		sb.append(",LockedByAgentID="+LockedByAgentID);
		sb.append(",BumiLot="+String.valueOf(BumiLot));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",Remark="+Remark);
		sb.append(",FacingCn="+FacingCn);
		sb.append(",FurnishingCn="+FurnishingCn);
		sb.append(",ExtraTerrace="+String.valueOf(ExtraTerrace));
		sb.append(",CarparkType="+CarparkType);
		sb.append(",Orientation="+Orientation);
		sb.append(",TerracePrice="+String.valueOf(TerracePrice));
		sb.append(",CarparkPrice="+String.valueOf(CarparkPrice));
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",ModifiedBy="+ModifiedBy);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UnitID, other.UnitID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row4,row6,row5,row2,row3) outputs:(PropertyBookingPipelien,bookingDatePipeline,reservationDatePipeline)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "skyuser";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:ifxlu4fL6piLspuMHppAYQlnySUX6G2noC78NldI1oMUt1rj9o+NsDxk");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
        String properties_tDBInput_4 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_4 == null || properties_tDBInput_4.trim().length() == 0) {
            properties_tDBInput_4 = "";
        }
        String url_tDBInput_4 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_STUDENT" + "?" + properties_tDBInput_4;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  `property_units`.`UnitID`, \n  `property_units`.`ProjectID`, \n  `property_units`.`FloorPlanID`, \n  `property_u"
+"nits`.`BlockID`, \n  `property_units`.`UnitNo`, \n  `property_units`.`Tower`, \n  `property_units`.`Facing`, \n  `property_u"
+"nits`.`BuiltUpArea`, \n  `property_units`.`LotNo`, \n  `property_units`.`Level`, \n  `property_units`.`SPAPrice`, \n  `prope"
+"rty_units`.`ActualPrice`, \n  `property_units`.`Discount`, \n  `property_units`.`PricePerSqft`, \n  `property_units`.`Furni"
+"shing`, \n  `property_units`.`DateSold`, \n  `property_units`.`LockedByAgentID`, \n  `property_units`.`BumiLot`, \n  `proper"
+"ty_units`.`Status`, \n  `property_units`.`Remark`, \n  `property_units`.`FacingCn`, \n  `property_units`.`FurnishingCn`, \n "
+" `property_units`.`ExtraTerrace`, \n  `property_units`.`CarparkType`, \n  `property_units`.`Orientation`, \n  `property_uni"
+"ts`.`TerracePrice`, \n  `property_units`.`CarparkPrice`, \n  `property_units`.`Deleted`, \n  `property_units`.`DateCreated`"
+", \n  `property_units`.`DateModified`, \n  `property_units`.`CreatedBy`, \n  `property_units`.`ModifiedBy`\nFROM `property_u"
+"nits`";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.UnitID = 0;
							} else {
		                          
            row4.UnitID = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.ProjectID = null;
							} else {
	                         		
        	row4.ProjectID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row4.FloorPlanID = null;
							} else {
		                          
            row4.FloorPlanID = rs_tDBInput_4.getInt(3);
            if(rs_tDBInput_4.wasNull()){
                    row4.FloorPlanID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row4.BlockID = null;
							} else {
		                          
            row4.BlockID = rs_tDBInput_4.getInt(4);
            if(rs_tDBInput_4.wasNull()){
                    row4.BlockID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row4.UnitNo = null;
							} else {
	                         		
        	row4.UnitNo = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row4.Tower = null;
							} else {
	                         		
        	row4.Tower = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row4.Facing = null;
							} else {
	                         		
        	row4.Facing = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row4.BuiltUpArea = null;
							} else {
		                          
            row4.BuiltUpArea = rs_tDBInput_4.getBigDecimal(8);
            if(rs_tDBInput_4.wasNull()){
                    row4.BuiltUpArea = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row4.LotNo = null;
							} else {
	                         		
        	row4.LotNo = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row4.Level = null;
							} else {
	                         		
        	row4.Level = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row4.SPAPrice = null;
							} else {
		                          
            row4.SPAPrice = rs_tDBInput_4.getBigDecimal(11);
            if(rs_tDBInput_4.wasNull()){
                    row4.SPAPrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row4.ActualPrice = null;
							} else {
		                          
            row4.ActualPrice = rs_tDBInput_4.getBigDecimal(12);
            if(rs_tDBInput_4.wasNull()){
                    row4.ActualPrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row4.Discount = null;
							} else {
		                          
            row4.Discount = rs_tDBInput_4.getBigDecimal(13);
            if(rs_tDBInput_4.wasNull()){
                    row4.Discount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row4.PricePerSqft = null;
							} else {
		                          
            row4.PricePerSqft = rs_tDBInput_4.getBigDecimal(14);
            if(rs_tDBInput_4.wasNull()){
                    row4.PricePerSqft = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row4.Furnishing = null;
							} else {
	                         		
        	row4.Furnishing = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row4.DateSold = null;
							} else {
										
				if(rs_tDBInput_4.getString(16) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						row4.DateSold = rs_tDBInput_4.getTimestamp(16);
					} else {
						row4.DateSold = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					row4.DateSold =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row4.LockedByAgentID = null;
							} else {
	                         		
        	row4.LockedByAgentID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 17, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row4.BumiLot = null;
							} else {
	                         		
            row4.BumiLot = rs_tDBInput_4.getBoolean(18);
            if(rs_tDBInput_4.wasNull()){
                    row4.BumiLot = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row4.Status = null;
							} else {
		                          
            row4.Status = rs_tDBInput_4.getInt(19);
            if(rs_tDBInput_4.wasNull()){
                    row4.Status = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row4.Remark = null;
							} else {
	                         		
        	row4.Remark = routines.system.JDBCUtil.getString(rs_tDBInput_4, 20, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row4.FacingCn = null;
							} else {
	                         		
        	row4.FacingCn = routines.system.JDBCUtil.getString(rs_tDBInput_4, 21, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row4.FurnishingCn = null;
							} else {
	                         		
        	row4.FurnishingCn = routines.system.JDBCUtil.getString(rs_tDBInput_4, 22, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row4.ExtraTerrace = null;
							} else {
		                          
            row4.ExtraTerrace = rs_tDBInput_4.getBigDecimal(23);
            if(rs_tDBInput_4.wasNull()){
                    row4.ExtraTerrace = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 24) {
								row4.CarparkType = null;
							} else {
	                         		
        	row4.CarparkType = routines.system.JDBCUtil.getString(rs_tDBInput_4, 24, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 25) {
								row4.Orientation = null;
							} else {
	                         		
        	row4.Orientation = routines.system.JDBCUtil.getString(rs_tDBInput_4, 25, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 26) {
								row4.TerracePrice = null;
							} else {
		                          
            row4.TerracePrice = rs_tDBInput_4.getBigDecimal(26);
            if(rs_tDBInput_4.wasNull()){
                    row4.TerracePrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 27) {
								row4.CarparkPrice = null;
							} else {
		                          
            row4.CarparkPrice = rs_tDBInput_4.getBigDecimal(27);
            if(rs_tDBInput_4.wasNull()){
                    row4.CarparkPrice = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 28) {
								row4.Deleted = null;
							} else {
	                         		
            row4.Deleted = rs_tDBInput_4.getBoolean(28);
            if(rs_tDBInput_4.wasNull()){
                    row4.Deleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 29) {
								row4.DateCreated = null;
							} else {
										
				if(rs_tDBInput_4.getString(29) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(29);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						row4.DateCreated = rs_tDBInput_4.getTimestamp(29);
					} else {
						row4.DateCreated = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					row4.DateCreated =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_4 < 30) {
								row4.DateModified = null;
							} else {
										
				if(rs_tDBInput_4.getString(30) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(30);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						row4.DateModified = rs_tDBInput_4.getTimestamp(30);
					} else {
						row4.DateModified = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					row4.DateModified =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_4 < 31) {
								row4.CreatedBy = null;
							} else {
	                         		
        	row4.CreatedBy = routines.system.JDBCUtil.getString(rs_tDBInput_4, 31, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 32) {
								row4.ModifiedBy = null;
							} else {
	                         		
        	row4.ModifiedBy = routines.system.JDBCUtil.getString(rs_tDBInput_4, 32, false);
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.UnitID = row4.UnitID;
				
				row4_HashRow.ProjectID = row4.ProjectID;
				
				row4_HashRow.FloorPlanID = row4.FloorPlanID;
				
				row4_HashRow.BlockID = row4.BlockID;
				
				row4_HashRow.UnitNo = row4.UnitNo;
				
				row4_HashRow.Tower = row4.Tower;
				
				row4_HashRow.Facing = row4.Facing;
				
				row4_HashRow.BuiltUpArea = row4.BuiltUpArea;
				
				row4_HashRow.LotNo = row4.LotNo;
				
				row4_HashRow.Level = row4.Level;
				
				row4_HashRow.SPAPrice = row4.SPAPrice;
				
				row4_HashRow.ActualPrice = row4.ActualPrice;
				
				row4_HashRow.Discount = row4.Discount;
				
				row4_HashRow.PricePerSqft = row4.PricePerSqft;
				
				row4_HashRow.Furnishing = row4.Furnishing;
				
				row4_HashRow.DateSold = row4.DateSold;
				
				row4_HashRow.LockedByAgentID = row4.LockedByAgentID;
				
				row4_HashRow.BumiLot = row4.BumiLot;
				
				row4_HashRow.Status = row4.Status;
				
				row4_HashRow.Remark = row4.Remark;
				
				row4_HashRow.FacingCn = row4.FacingCn;
				
				row4_HashRow.FurnishingCn = row4.FurnishingCn;
				
				row4_HashRow.ExtraTerrace = row4.ExtraTerrace;
				
				row4_HashRow.CarparkType = row4.CarparkType;
				
				row4_HashRow.Orientation = row4.Orientation;
				
				row4_HashRow.TerracePrice = row4.TerracePrice;
				
				row4_HashRow.CarparkPrice = row4.CarparkPrice;
				
				row4_HashRow.Deleted = row4.Deleted;
				
				row4_HashRow.DateCreated = row4.DateCreated;
				
				row4_HashRow.DateModified = row4.DateModified;
				
				row4_HashRow.CreatedBy = row4.CreatedBy;
				
				row4_HashRow.ModifiedBy = row4.ModifiedBy;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
		


 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SoldCancellationHistoryID;

				public int getSoldCancellationHistoryID () {
					return this.SoldCancellationHistoryID;
				}
				
			    public int BookingUnitID;

				public int getBookingUnitID () {
					return this.BookingUnitID;
				}
				
			    public int UnitID;

				public int getUnitID () {
					return this.UnitID;
				}
				
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public java.util.Date SoldDate;

				public java.util.Date getSoldDate () {
					return this.SoldDate;
				}
				
			    public java.util.Date DateCancellation;

				public java.util.Date getDateCancellation () {
					return this.DateCancellation;
				}
				
			    public String AddedBy;

				public String getAddedBy () {
					return this.AddedBy;
				}
				
			    public String Reason;

				public String getReason () {
					return this.Reason;
				}
				
			    public String Remark;

				public String getRemark () {
					return this.Remark;
				}
				
			    public String CategoryID;

				public String getCategoryID () {
					return this.CategoryID;
				}
				
			    public Boolean Deleted;

				public Boolean getDeleted () {
					return this.Deleted;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.BookingUnitID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.BookingUnitID != other.BookingUnitID)
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.SoldCancellationHistoryID = this.SoldCancellationHistoryID;
	            other.BookingUnitID = this.BookingUnitID;
	            other.UnitID = this.UnitID;
	            other.ProjectID = this.ProjectID;
	            other.CustomerID = this.CustomerID;
	            other.SoldDate = this.SoldDate;
	            other.DateCancellation = this.DateCancellation;
	            other.AddedBy = this.AddedBy;
	            other.Reason = this.Reason;
	            other.Remark = this.Remark;
	            other.CategoryID = this.CategoryID;
	            other.Deleted = this.Deleted;
	            other.DateCreated = this.DateCreated;
	            other.DateModified = this.DateModified;
	            other.CreatedBy = this.CreatedBy;
	            other.ModifiedBy = this.ModifiedBy;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.BookingUnitID = this.BookingUnitID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingUnitID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingUnitID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingUnitID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingUnitID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SoldCancellationHistoryID = dis.readInt();
					
			            this.UnitID = dis.readInt();
					
						this.ProjectID = readString(dis,ois);
					
						this.CustomerID = readString(dis,ois);
					
						this.SoldDate = readDate(dis,ois);
					
						this.DateCancellation = readDate(dis,ois);
					
						this.AddedBy = readString(dis,ois);
					
						this.Reason = readString(dis,ois);
					
						this.Remark = readString(dis,ois);
					
						this.CategoryID = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,ois);
					
						this.DateModified = readDate(dis,ois);
					
						this.CreatedBy = readString(dis,ois);
					
						this.ModifiedBy = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.SoldCancellationHistoryID = objectIn.readInt();
					
			            this.UnitID = objectIn.readInt();
					
						this.ProjectID = readString(dis,objectIn);
					
						this.CustomerID = readString(dis,objectIn);
					
						this.SoldDate = readDate(dis,objectIn);
					
						this.DateCancellation = readDate(dis,objectIn);
					
						this.AddedBy = readString(dis,objectIn);
					
						this.Reason = readString(dis,objectIn);
					
						this.Remark = readString(dis,objectIn);
					
						this.CategoryID = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = objectIn.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,objectIn);
					
						this.DateModified = readDate(dis,objectIn);
					
						this.CreatedBy = readString(dis,objectIn);
					
						this.ModifiedBy = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SoldCancellationHistoryID);
					
		            	dos.writeInt(this.UnitID);
					
						writeString(this.ProjectID, dos, oos);
					
						writeString(this.CustomerID, dos, oos);
					
						writeDate(this.SoldDate, dos, oos);
					
						writeDate(this.DateCancellation, dos, oos);
					
						writeString(this.AddedBy, dos, oos);
					
						writeString(this.Reason, dos, oos);
					
						writeString(this.Remark, dos, oos);
					
						writeString(this.CategoryID, dos, oos);
					
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, oos);
					
						writeDate(this.DateModified, dos, oos);
					
						writeString(this.CreatedBy, dos, oos);
					
						writeString(this.ModifiedBy, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.SoldCancellationHistoryID);
					
					objectOut.writeInt(this.UnitID);
					
						writeString(this.ProjectID, dos, objectOut);
					
						writeString(this.CustomerID, dos, objectOut);
					
						writeDate(this.SoldDate, dos, objectOut);
					
						writeDate(this.DateCancellation, dos, objectOut);
					
						writeString(this.AddedBy, dos, objectOut);
					
						writeString(this.Reason, dos, objectOut);
					
						writeString(this.Remark, dos, objectOut);
					
						writeString(this.CategoryID, dos, objectOut);
					
						if(this.Deleted == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, objectOut);
					
						writeDate(this.DateModified, dos, objectOut);
					
						writeString(this.CreatedBy, dos, objectOut);
					
						writeString(this.ModifiedBy, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SoldCancellationHistoryID="+String.valueOf(SoldCancellationHistoryID));
		sb.append(",BookingUnitID="+String.valueOf(BookingUnitID));
		sb.append(",UnitID="+String.valueOf(UnitID));
		sb.append(",ProjectID="+ProjectID);
		sb.append(",CustomerID="+CustomerID);
		sb.append(",SoldDate="+String.valueOf(SoldDate));
		sb.append(",DateCancellation="+String.valueOf(DateCancellation));
		sb.append(",AddedBy="+AddedBy);
		sb.append(",Reason="+Reason);
		sb.append(",Remark="+Remark);
		sb.append(",CategoryID="+CategoryID);
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",ModifiedBy="+ModifiedBy);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingUnitID, other.BookingUnitID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row4,row6,row5,row2,row3) outputs:(PropertyBookingPipelien,bookingDatePipeline,reservationDatePipeline)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
		    calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "skyuser";
				
				 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:W/b1aBZaKkGmv5GViRcgf0pvgiV6iZ/PHwMd1iBv7KPdhquBIf8VEkM4");
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
        String properties_tDBInput_6 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_6 == null || properties_tDBInput_6.trim().length() == 0) {
            properties_tDBInput_6 = "";
        }
        String url_tDBInput_6 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_STUDENT" + "?" + properties_tDBInput_6;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT \n  `property_soldcancellatinohistory`.`SoldCancellationHistoryID`, \n  `property_soldcancellatinohistory`.`Bookin"
+"gUnitID`, \n  `property_soldcancellatinohistory`.`UnitID`, \n  `property_soldcancellatinohistory`.`ProjectID`, \n  `propert"
+"y_soldcancellatinohistory`.`CustomerID`, \n  `property_soldcancellatinohistory`.`SoldDate`, \n  `property_soldcancellatino"
+"history`.`DateCancellation`, \n  `property_soldcancellatinohistory`.`AddedBy`, \n  `property_soldcancellatinohistory`.`Rea"
+"son`, \n  `property_soldcancellatinohistory`.`Remark`, \n  `property_soldcancellatinohistory`.`CategoryID`, \n  `property_s"
+"oldcancellatinohistory`.`Deleted`, \n  `property_soldcancellatinohistory`.`DateCreated`, \n  `property_soldcancellatinohis"
+"tory`.`DateModified`, \n  `property_soldcancellatinohistory`.`CreatedBy`, \n  `property_soldcancellatinohistory`.`Modified"
+"By`\nFROM `property_soldcancellatinohistory`";
		    

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row6.SoldCancellationHistoryID = 0;
							} else {
		                          
            row6.SoldCancellationHistoryID = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row6.BookingUnitID = 0;
							} else {
		                          
            row6.BookingUnitID = rs_tDBInput_6.getInt(2);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row6.UnitID = 0;
							} else {
		                          
            row6.UnitID = rs_tDBInput_6.getInt(3);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row6.ProjectID = null;
							} else {
	                         		
        	row6.ProjectID = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row6.CustomerID = null;
							} else {
	                         		
        	row6.CustomerID = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 6) {
								row6.SoldDate = null;
							} else {
										
				if(rs_tDBInput_6.getString(6) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(6);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						row6.SoldDate = rs_tDBInput_6.getTimestamp(6);
					} else {
						row6.SoldDate = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					row6.SoldDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_6 < 7) {
								row6.DateCancellation = null;
							} else {
										
				if(rs_tDBInput_6.getString(7) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(7);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						row6.DateCancellation = rs_tDBInput_6.getTimestamp(7);
					} else {
						row6.DateCancellation = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					row6.DateCancellation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_6 < 8) {
								row6.AddedBy = null;
							} else {
	                         		
        	row6.AddedBy = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 9) {
								row6.Reason = null;
							} else {
	                         		
        	row6.Reason = routines.system.JDBCUtil.getString(rs_tDBInput_6, 9, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 10) {
								row6.Remark = null;
							} else {
	                         		
        	row6.Remark = routines.system.JDBCUtil.getString(rs_tDBInput_6, 10, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 11) {
								row6.CategoryID = null;
							} else {
	                         		
        	row6.CategoryID = routines.system.JDBCUtil.getString(rs_tDBInput_6, 11, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 12) {
								row6.Deleted = null;
							} else {
	                         		
            row6.Deleted = rs_tDBInput_6.getBoolean(12);
            if(rs_tDBInput_6.wasNull()){
                    row6.Deleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 13) {
								row6.DateCreated = null;
							} else {
										
				if(rs_tDBInput_6.getString(13) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(13);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						row6.DateCreated = rs_tDBInput_6.getTimestamp(13);
					} else {
						row6.DateCreated = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					row6.DateCreated =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_6 < 14) {
								row6.DateModified = null;
							} else {
										
				if(rs_tDBInput_6.getString(14) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(14);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						row6.DateModified = rs_tDBInput_6.getTimestamp(14);
					} else {
						row6.DateModified = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					row6.DateModified =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_6 < 15) {
								row6.CreatedBy = null;
							} else {
	                         		
        	row6.CreatedBy = routines.system.JDBCUtil.getString(rs_tDBInput_6, 15, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 16) {
								row6.ModifiedBy = null;
							} else {
	                         		
        	row6.ModifiedBy = routines.system.JDBCUtil.getString(rs_tDBInput_6, 16, false);
		                    }
					

 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.SoldCancellationHistoryID = row6.SoldCancellationHistoryID;
				
				row6_HashRow.BookingUnitID = row6.BookingUnitID;
				
				row6_HashRow.UnitID = row6.UnitID;
				
				row6_HashRow.ProjectID = row6.ProjectID;
				
				row6_HashRow.CustomerID = row6.CustomerID;
				
				row6_HashRow.SoldDate = row6.SoldDate;
				
				row6_HashRow.DateCancellation = row6.DateCancellation;
				
				row6_HashRow.AddedBy = row6.AddedBy;
				
				row6_HashRow.Reason = row6.Reason;
				
				row6_HashRow.Remark = row6.Remark;
				
				row6_HashRow.CategoryID = row6.CategoryID;
				
				row6_HashRow.Deleted = row6.Deleted;
				
				row6_HashRow.DateCreated = row6.DateCreated;
				
				row6_HashRow.DateModified = row6.DateModified;
				
				row6_HashRow.CreatedBy = row6.CreatedBy;
				
				row6_HashRow.ModifiedBy = row6.ModifiedBy;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
		


 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ExtensionHistoryID;

				public int getExtensionHistoryID () {
					return this.ExtensionHistoryID;
				}
				
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public int BookingUnitID;

				public int getBookingUnitID () {
					return this.BookingUnitID;
				}
				
			    public int UnitID;

				public int getUnitID () {
					return this.UnitID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public java.util.Date DateOldExpired;

				public java.util.Date getDateOldExpired () {
					return this.DateOldExpired;
				}
				
			    public java.util.Date DateExtended;

				public java.util.Date getDateExtended () {
					return this.DateExtended;
				}
				
			    public String Reason;

				public String getReason () {
					return this.Reason;
				}
				
			    public String AddedBy;

				public String getAddedBy () {
					return this.AddedBy;
				}
				
			    public String Remark;

				public String getRemark () {
					return this.Remark;
				}
				
			    public Boolean Deleted;

				public Boolean getDeleted () {
					return this.Deleted;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.BookingUnitID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.BookingUnitID != other.BookingUnitID)
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.ExtensionHistoryID = this.ExtensionHistoryID;
	            other.ProjectID = this.ProjectID;
	            other.BookingUnitID = this.BookingUnitID;
	            other.UnitID = this.UnitID;
	            other.CustomerID = this.CustomerID;
	            other.DateOldExpired = this.DateOldExpired;
	            other.DateExtended = this.DateExtended;
	            other.Reason = this.Reason;
	            other.AddedBy = this.AddedBy;
	            other.Remark = this.Remark;
	            other.Deleted = this.Deleted;
	            other.DateCreated = this.DateCreated;
	            other.DateModified = this.DateModified;
	            other.CreatedBy = this.CreatedBy;
	            other.ModifiedBy = this.ModifiedBy;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.BookingUnitID = this.BookingUnitID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingUnitID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingUnitID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingUnitID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingUnitID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ExtensionHistoryID = dis.readInt();
					
						this.ProjectID = readString(dis,ois);
					
			            this.UnitID = dis.readInt();
					
						this.CustomerID = readString(dis,ois);
					
						this.DateOldExpired = readDate(dis,ois);
					
						this.DateExtended = readDate(dis,ois);
					
						this.Reason = readString(dis,ois);
					
						this.AddedBy = readString(dis,ois);
					
						this.Remark = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,ois);
					
						this.DateModified = readDate(dis,ois);
					
						this.CreatedBy = readString(dis,ois);
					
						this.ModifiedBy = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ExtensionHistoryID = objectIn.readInt();
					
						this.ProjectID = readString(dis,objectIn);
					
			            this.UnitID = objectIn.readInt();
					
						this.CustomerID = readString(dis,objectIn);
					
						this.DateOldExpired = readDate(dis,objectIn);
					
						this.DateExtended = readDate(dis,objectIn);
					
						this.Reason = readString(dis,objectIn);
					
						this.AddedBy = readString(dis,objectIn);
					
						this.Remark = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = objectIn.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,objectIn);
					
						this.DateModified = readDate(dis,objectIn);
					
						this.CreatedBy = readString(dis,objectIn);
					
						this.ModifiedBy = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ExtensionHistoryID);
					
						writeString(this.ProjectID, dos, oos);
					
		            	dos.writeInt(this.UnitID);
					
						writeString(this.CustomerID, dos, oos);
					
						writeDate(this.DateOldExpired, dos, oos);
					
						writeDate(this.DateExtended, dos, oos);
					
						writeString(this.Reason, dos, oos);
					
						writeString(this.AddedBy, dos, oos);
					
						writeString(this.Remark, dos, oos);
					
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, oos);
					
						writeDate(this.DateModified, dos, oos);
					
						writeString(this.CreatedBy, dos, oos);
					
						writeString(this.ModifiedBy, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ExtensionHistoryID);
					
						writeString(this.ProjectID, dos, objectOut);
					
					objectOut.writeInt(this.UnitID);
					
						writeString(this.CustomerID, dos, objectOut);
					
						writeDate(this.DateOldExpired, dos, objectOut);
					
						writeDate(this.DateExtended, dos, objectOut);
					
						writeString(this.Reason, dos, objectOut);
					
						writeString(this.AddedBy, dos, objectOut);
					
						writeString(this.Remark, dos, objectOut);
					
						if(this.Deleted == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, objectOut);
					
						writeDate(this.DateModified, dos, objectOut);
					
						writeString(this.CreatedBy, dos, objectOut);
					
						writeString(this.ModifiedBy, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ExtensionHistoryID="+String.valueOf(ExtensionHistoryID));
		sb.append(",ProjectID="+ProjectID);
		sb.append(",BookingUnitID="+String.valueOf(BookingUnitID));
		sb.append(",UnitID="+String.valueOf(UnitID));
		sb.append(",CustomerID="+CustomerID);
		sb.append(",DateOldExpired="+String.valueOf(DateOldExpired));
		sb.append(",DateExtended="+String.valueOf(DateExtended));
		sb.append(",Reason="+Reason);
		sb.append(",AddedBy="+AddedBy);
		sb.append(",Remark="+Remark);
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",ModifiedBy="+ModifiedBy);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingUnitID, other.BookingUnitID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row4,row6,row5,row2,row3) outputs:(PropertyBookingPipelien,bookingDatePipeline,reservationDatePipeline)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
		    calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "skyuser";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:TONadhUtLg9T9PDJUc9CCTtPucJnxEo1OAik01CKfLG7ixVKw575dt4A");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
        String properties_tDBInput_5 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_5 == null || properties_tDBInput_5.trim().length() == 0) {
            properties_tDBInput_5 = "";
        }
        String url_tDBInput_5 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_STUDENT" + "?" + properties_tDBInput_5;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  `property_extensionhistory`.`ExtensionHistoryID`, \n  `property_extensionhistory`.`ProjectID`, \n  `property_ex"
+"tensionhistory`.`BookingUnitID`, \n  `property_extensionhistory`.`UnitID`, \n  `property_extensionhistory`.`CustomerID`, \n"
+"  `property_extensionhistory`.`DateOldExpired`, \n  `property_extensionhistory`.`DateExtended`, \n  `property_extensionhis"
+"tory`.`Reason`, \n  `property_extensionhistory`.`AddedBy`, \n  `property_extensionhistory`.`Remark`, \n  `property_extensio"
+"nhistory`.`Deleted`, \n  `property_extensionhistory`.`DateCreated`, \n  `property_extensionhistory`.`DateModified`, \n  `pr"
+"operty_extensionhistory`.`CreatedBy`, \n  `property_extensionhistory`.`ModifiedBy`\nFROM `property_extensionhistory`";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row5.ExtensionHistoryID = 0;
							} else {
		                          
            row5.ExtensionHistoryID = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row5.ProjectID = null;
							} else {
	                         		
        	row5.ProjectID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row5.BookingUnitID = 0;
							} else {
		                          
            row5.BookingUnitID = rs_tDBInput_5.getInt(3);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row5.UnitID = 0;
							} else {
		                          
            row5.UnitID = rs_tDBInput_5.getInt(4);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row5.CustomerID = null;
							} else {
	                         		
        	row5.CustomerID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row5.DateOldExpired = null;
							} else {
										
				if(rs_tDBInput_5.getString(6) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(6);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row5.DateOldExpired = rs_tDBInput_5.getTimestamp(6);
					} else {
						row5.DateOldExpired = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row5.DateOldExpired =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row5.DateExtended = null;
							} else {
										
				if(rs_tDBInput_5.getString(7) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(7);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row5.DateExtended = rs_tDBInput_5.getTimestamp(7);
					} else {
						row5.DateExtended = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row5.DateExtended =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row5.Reason = null;
							} else {
	                         		
        	row5.Reason = routines.system.JDBCUtil.getString(rs_tDBInput_5, 8, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row5.AddedBy = null;
							} else {
	                         		
        	row5.AddedBy = routines.system.JDBCUtil.getString(rs_tDBInput_5, 9, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row5.Remark = null;
							} else {
	                         		
        	row5.Remark = routines.system.JDBCUtil.getString(rs_tDBInput_5, 10, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row5.Deleted = null;
							} else {
	                         		
            row5.Deleted = rs_tDBInput_5.getBoolean(11);
            if(rs_tDBInput_5.wasNull()){
                    row5.Deleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row5.DateCreated = null;
							} else {
										
				if(rs_tDBInput_5.getString(12) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(12);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row5.DateCreated = rs_tDBInput_5.getTimestamp(12);
					} else {
						row5.DateCreated = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row5.DateCreated =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row5.DateModified = null;
							} else {
										
				if(rs_tDBInput_5.getString(13) != null) {
					String dateString_tDBInput_5 = rs_tDBInput_5.getString(13);
					if (!("0000-00-00").equals(dateString_tDBInput_5) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_5)) {
						row5.DateModified = rs_tDBInput_5.getTimestamp(13);
					} else {
						row5.DateModified = (java.util.Date) year0_tDBInput_5.clone();
					}
				} else {
					row5.DateModified =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row5.CreatedBy = null;
							} else {
	                         		
        	row5.CreatedBy = routines.system.JDBCUtil.getString(rs_tDBInput_5, 14, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row5.ModifiedBy = null;
							} else {
	                         		
        	row5.ModifiedBy = routines.system.JDBCUtil.getString(rs_tDBInput_5, 15, false);
		                    }
					

 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.ExtensionHistoryID = row5.ExtensionHistoryID;
				
				row5_HashRow.ProjectID = row5.ProjectID;
				
				row5_HashRow.BookingUnitID = row5.BookingUnitID;
				
				row5_HashRow.UnitID = row5.UnitID;
				
				row5_HashRow.CustomerID = row5.CustomerID;
				
				row5_HashRow.DateOldExpired = row5.DateOldExpired;
				
				row5_HashRow.DateExtended = row5.DateExtended;
				
				row5_HashRow.Reason = row5.Reason;
				
				row5_HashRow.AddedBy = row5.AddedBy;
				
				row5_HashRow.Remark = row5.Remark;
				
				row5_HashRow.Deleted = row5.Deleted;
				
				row5_HashRow.DateCreated = row5.DateCreated;
				
				row5_HashRow.DateModified = row5.DateModified;
				
				row5_HashRow.CreatedBy = row5.CreatedBy;
				
				row5_HashRow.ModifiedBy = row5.ModifiedBy;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
		


 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int BookingUnitID;

				public int getBookingUnitID () {
					return this.BookingUnitID;
				}
				
			    public int BookingID;

				public int getBookingID () {
					return this.BookingID;
				}
				
			    public int UnitID;

				public int getUnitID () {
					return this.UnitID;
				}
				
			    public String Type;

				public String getType () {
					return this.Type;
				}
				
			    public int ApprovalStatus;

				public int getApprovalStatus () {
					return this.ApprovalStatus;
				}
				
			    public String PerformalPath;

				public String getPerformalPath () {
					return this.PerformalPath;
				}
				
			    public boolean EmailSent;

				public boolean getEmailSent () {
					return this.EmailSent;
				}
				
			    public java.util.Date ExpiryDate;

				public java.util.Date getExpiryDate () {
					return this.ExpiryDate;
				}
				
			    public String LeadAssignedID;

				public String getLeadAssignedID () {
					return this.LeadAssignedID;
				}
				
			    public java.util.Date SUKApplicationDate;

				public java.util.Date getSUKApplicationDate () {
					return this.SUKApplicationDate;
				}
				
			    public java.util.Date SUKApproveDate;

				public java.util.Date getSUKApproveDate () {
					return this.SUKApproveDate;
				}
				
			    public java.util.Date SUKCertificateObtainDate;

				public java.util.Date getSUKCertificateObtainDate () {
					return this.SUKCertificateObtainDate;
				}
				
			    public java.util.Date DatePayDepositLinkExpiry;

				public java.util.Date getDatePayDepositLinkExpiry () {
					return this.DatePayDepositLinkExpiry;
				}
				
			    public BigDecimal PayDepositLinkAmount;

				public BigDecimal getPayDepositLinkAmount () {
					return this.PayDepositLinkAmount;
				}
				
			    public BigDecimal PayDownPaymentLinkAmount;

				public BigDecimal getPayDownPaymentLinkAmount () {
					return this.PayDownPaymentLinkAmount;
				}
				
			    public Boolean Deleted;

				public Boolean getDeleted () {
					return this.Deleted;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				
			    public java.util.Date DateReservation;

				public java.util.Date getDateReservation () {
					return this.DateReservation;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.BookingID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.BookingID != other.BookingID)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.BookingUnitID = this.BookingUnitID;
	            other.BookingID = this.BookingID;
	            other.UnitID = this.UnitID;
	            other.Type = this.Type;
	            other.ApprovalStatus = this.ApprovalStatus;
	            other.PerformalPath = this.PerformalPath;
	            other.EmailSent = this.EmailSent;
	            other.ExpiryDate = this.ExpiryDate;
	            other.LeadAssignedID = this.LeadAssignedID;
	            other.SUKApplicationDate = this.SUKApplicationDate;
	            other.SUKApproveDate = this.SUKApproveDate;
	            other.SUKCertificateObtainDate = this.SUKCertificateObtainDate;
	            other.DatePayDepositLinkExpiry = this.DatePayDepositLinkExpiry;
	            other.PayDepositLinkAmount = this.PayDepositLinkAmount;
	            other.PayDownPaymentLinkAmount = this.PayDownPaymentLinkAmount;
	            other.Deleted = this.Deleted;
	            other.DateCreated = this.DateCreated;
	            other.DateModified = this.DateModified;
	            other.CreatedBy = this.CreatedBy;
	            other.ModifiedBy = this.ModifiedBy;
	            other.DateReservation = this.DateReservation;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.BookingID = this.BookingID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.BookingUnitID = dis.readInt();
					
			            this.UnitID = dis.readInt();
					
						this.Type = readString(dis,ois);
					
			            this.ApprovalStatus = dis.readInt();
					
						this.PerformalPath = readString(dis,ois);
					
			            this.EmailSent = dis.readBoolean();
					
						this.ExpiryDate = readDate(dis,ois);
					
						this.LeadAssignedID = readString(dis,ois);
					
						this.SUKApplicationDate = readDate(dis,ois);
					
						this.SUKApproveDate = readDate(dis,ois);
					
						this.SUKCertificateObtainDate = readDate(dis,ois);
					
						this.DatePayDepositLinkExpiry = readDate(dis,ois);
					
       			    	this.PayDepositLinkAmount = (BigDecimal) ois.readObject();
					
       			    	this.PayDownPaymentLinkAmount = (BigDecimal) ois.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,ois);
					
						this.DateModified = readDate(dis,ois);
					
						this.CreatedBy = readString(dis,ois);
					
						this.ModifiedBy = readString(dis,ois);
					
						this.DateReservation = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.BookingUnitID = objectIn.readInt();
					
			            this.UnitID = objectIn.readInt();
					
						this.Type = readString(dis,objectIn);
					
			            this.ApprovalStatus = objectIn.readInt();
					
						this.PerformalPath = readString(dis,objectIn);
					
			            this.EmailSent = objectIn.readBoolean();
					
						this.ExpiryDate = readDate(dis,objectIn);
					
						this.LeadAssignedID = readString(dis,objectIn);
					
						this.SUKApplicationDate = readDate(dis,objectIn);
					
						this.SUKApproveDate = readDate(dis,objectIn);
					
						this.SUKCertificateObtainDate = readDate(dis,objectIn);
					
						this.DatePayDepositLinkExpiry = readDate(dis,objectIn);
					
       			    	this.PayDepositLinkAmount = (BigDecimal) objectIn.readObject();
					
       			    	this.PayDownPaymentLinkAmount = (BigDecimal) objectIn.readObject();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = objectIn.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,objectIn);
					
						this.DateModified = readDate(dis,objectIn);
					
						this.CreatedBy = readString(dis,objectIn);
					
						this.ModifiedBy = readString(dis,objectIn);
					
						this.DateReservation = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.BookingUnitID);
					
		            	dos.writeInt(this.UnitID);
					
						writeString(this.Type, dos, oos);
					
		            	dos.writeInt(this.ApprovalStatus);
					
						writeString(this.PerformalPath, dos, oos);
					
		            	dos.writeBoolean(this.EmailSent);
					
						writeDate(this.ExpiryDate, dos, oos);
					
						writeString(this.LeadAssignedID, dos, oos);
					
						writeDate(this.SUKApplicationDate, dos, oos);
					
						writeDate(this.SUKApproveDate, dos, oos);
					
						writeDate(this.SUKCertificateObtainDate, dos, oos);
					
						writeDate(this.DatePayDepositLinkExpiry, dos, oos);
					
       			    	oos.writeObject(this.PayDepositLinkAmount);
					
       			    	oos.writeObject(this.PayDownPaymentLinkAmount);
					
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, oos);
					
						writeDate(this.DateModified, dos, oos);
					
						writeString(this.CreatedBy, dos, oos);
					
						writeString(this.ModifiedBy, dos, oos);
					
						writeDate(this.DateReservation, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.BookingUnitID);
					
					objectOut.writeInt(this.UnitID);
					
						writeString(this.Type, dos, objectOut);
					
					objectOut.writeInt(this.ApprovalStatus);
					
						writeString(this.PerformalPath, dos, objectOut);
					
					objectOut.writeBoolean(this.EmailSent);
					
						writeDate(this.ExpiryDate, dos, objectOut);
					
						writeString(this.LeadAssignedID, dos, objectOut);
					
						writeDate(this.SUKApplicationDate, dos, objectOut);
					
						writeDate(this.SUKApproveDate, dos, objectOut);
					
						writeDate(this.SUKCertificateObtainDate, dos, objectOut);
					
						writeDate(this.DatePayDepositLinkExpiry, dos, objectOut);
					
       			    	objectOut.writeObject(this.PayDepositLinkAmount);
					
       			    	objectOut.writeObject(this.PayDownPaymentLinkAmount);
					
						if(this.Deleted == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, objectOut);
					
						writeDate(this.DateModified, dos, objectOut);
					
						writeString(this.CreatedBy, dos, objectOut);
					
						writeString(this.ModifiedBy, dos, objectOut);
					
						writeDate(this.DateReservation, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BookingUnitID="+String.valueOf(BookingUnitID));
		sb.append(",BookingID="+String.valueOf(BookingID));
		sb.append(",UnitID="+String.valueOf(UnitID));
		sb.append(",Type="+Type);
		sb.append(",ApprovalStatus="+String.valueOf(ApprovalStatus));
		sb.append(",PerformalPath="+PerformalPath);
		sb.append(",EmailSent="+String.valueOf(EmailSent));
		sb.append(",ExpiryDate="+String.valueOf(ExpiryDate));
		sb.append(",LeadAssignedID="+LeadAssignedID);
		sb.append(",SUKApplicationDate="+String.valueOf(SUKApplicationDate));
		sb.append(",SUKApproveDate="+String.valueOf(SUKApproveDate));
		sb.append(",SUKCertificateObtainDate="+String.valueOf(SUKCertificateObtainDate));
		sb.append(",DatePayDepositLinkExpiry="+String.valueOf(DatePayDepositLinkExpiry));
		sb.append(",PayDepositLinkAmount="+String.valueOf(PayDepositLinkAmount));
		sb.append(",PayDownPaymentLinkAmount="+String.valueOf(PayDownPaymentLinkAmount));
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",ModifiedBy="+ModifiedBy);
		sb.append(",DateReservation="+String.valueOf(DateReservation));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingID, other.BookingID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row4,row6,row5,row2,row3) outputs:(PropertyBookingPipelien,bookingDatePipeline,reservationDatePipeline)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "skyuser";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:akIu4d/dSuawF+ZswH4FGnEnNYW3S1ZGmBTR2rqPupZ1sua46h4Wr3E4");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
        String properties_tDBInput_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_2 == null || properties_tDBInput_2.trim().length() == 0) {
            properties_tDBInput_2 = "";
        }
        String url_tDBInput_2 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_STUDENT" + "?" + properties_tDBInput_2;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  `property_booking_units`.`BookingUnitID`, \n  `property_booking_units`.`BookingID`, \n  `property_booking_units"
+"`.`UnitID`, \n  `property_booking_units`.`Type`, \n  `property_booking_units`.`ApprovalStatus`, \n  `property_booking_units"
+"`.`PerformalPath`, \n  `property_booking_units`.`EmailSent`, \n  `property_booking_units`.`ExpiryDate`, \n  `property_booki"
+"ng_units`.`LeadAssignedID`, \n  `property_booking_units`.`SUKApplicationDate`, \n  `property_booking_units`.`SUKApproveDat"
+"e`, \n  `property_booking_units`.`SUKCertificateObtainDate`, \n  `property_booking_units`.`DatePayDepositLinkExpiry`, \n  `"
+"property_booking_units`.`PayDepositLinkAmount`, \n  `property_booking_units`.`PayDownPaymentLinkAmount`, \n  `property_boo"
+"king_units`.`Deleted`, \n  `property_booking_units`.`DateCreated`, \n  `property_booking_units`.`DateModified`, \n  `proper"
+"ty_booking_units`.`CreatedBy`, \n  `property_booking_units`.`ModifiedBy`, \n  `property_booking_units`.`DateReservation`\nF"
+"ROM `property_booking_units`";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.BookingUnitID = 0;
							} else {
		                          
            row2.BookingUnitID = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.BookingID = 0;
							} else {
		                          
            row2.BookingID = rs_tDBInput_2.getInt(2);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.UnitID = 0;
							} else {
		                          
            row2.UnitID = rs_tDBInput_2.getInt(3);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.Type = null;
							} else {
	                         		
        	row2.Type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.ApprovalStatus = 0;
							} else {
		                          
            row2.ApprovalStatus = rs_tDBInput_2.getInt(5);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.PerformalPath = null;
							} else {
	                         		
        	row2.PerformalPath = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.EmailSent = false;
							} else {
	                         		
            row2.EmailSent = rs_tDBInput_2.getBoolean(7);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.ExpiryDate = null;
							} else {
										
				if(rs_tDBInput_2.getString(8) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(8);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.ExpiryDate = rs_tDBInput_2.getTimestamp(8);
					} else {
						row2.ExpiryDate = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.ExpiryDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.LeadAssignedID = null;
							} else {
	                         		
        	row2.LeadAssignedID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.SUKApplicationDate = null;
							} else {
										
				if(rs_tDBInput_2.getString(10) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(10);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.SUKApplicationDate = rs_tDBInput_2.getTimestamp(10);
					} else {
						row2.SUKApplicationDate = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.SUKApplicationDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.SUKApproveDate = null;
							} else {
										
				if(rs_tDBInput_2.getString(11) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(11);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.SUKApproveDate = rs_tDBInput_2.getTimestamp(11);
					} else {
						row2.SUKApproveDate = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.SUKApproveDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.SUKCertificateObtainDate = null;
							} else {
										
				if(rs_tDBInput_2.getString(12) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(12);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.SUKCertificateObtainDate = rs_tDBInput_2.getTimestamp(12);
					} else {
						row2.SUKCertificateObtainDate = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.SUKCertificateObtainDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.DatePayDepositLinkExpiry = null;
							} else {
										
				if(rs_tDBInput_2.getString(13) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(13);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.DatePayDepositLinkExpiry = rs_tDBInput_2.getTimestamp(13);
					} else {
						row2.DatePayDepositLinkExpiry = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.DatePayDepositLinkExpiry =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2.PayDepositLinkAmount = null;
							} else {
		                          
            row2.PayDepositLinkAmount = rs_tDBInput_2.getBigDecimal(14);
            if(rs_tDBInput_2.wasNull()){
                    row2.PayDepositLinkAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.PayDownPaymentLinkAmount = null;
							} else {
		                          
            row2.PayDownPaymentLinkAmount = rs_tDBInput_2.getBigDecimal(15);
            if(rs_tDBInput_2.wasNull()){
                    row2.PayDownPaymentLinkAmount = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2.Deleted = null;
							} else {
	                         		
            row2.Deleted = rs_tDBInput_2.getBoolean(16);
            if(rs_tDBInput_2.wasNull()){
                    row2.Deleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.DateCreated = null;
							} else {
										
				if(rs_tDBInput_2.getString(17) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(17);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.DateCreated = rs_tDBInput_2.getTimestamp(17);
					} else {
						row2.DateCreated = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.DateCreated =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row2.DateModified = null;
							} else {
										
				if(rs_tDBInput_2.getString(18) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(18);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.DateModified = rs_tDBInput_2.getTimestamp(18);
					} else {
						row2.DateModified = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.DateModified =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row2.CreatedBy = null;
							} else {
	                         		
        	row2.CreatedBy = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row2.ModifiedBy = null;
							} else {
	                         		
        	row2.ModifiedBy = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row2.DateReservation = null;
							} else {
										
				if(rs_tDBInput_2.getString(21) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(21);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						row2.DateReservation = rs_tDBInput_2.getTimestamp(21);
					} else {
						row2.DateReservation = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					row2.DateReservation =  null;
				}
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.BookingUnitID = row2.BookingUnitID;
				
				row2_HashRow.BookingID = row2.BookingID;
				
				row2_HashRow.UnitID = row2.UnitID;
				
				row2_HashRow.Type = row2.Type;
				
				row2_HashRow.ApprovalStatus = row2.ApprovalStatus;
				
				row2_HashRow.PerformalPath = row2.PerformalPath;
				
				row2_HashRow.EmailSent = row2.EmailSent;
				
				row2_HashRow.ExpiryDate = row2.ExpiryDate;
				
				row2_HashRow.LeadAssignedID = row2.LeadAssignedID;
				
				row2_HashRow.SUKApplicationDate = row2.SUKApplicationDate;
				
				row2_HashRow.SUKApproveDate = row2.SUKApproveDate;
				
				row2_HashRow.SUKCertificateObtainDate = row2.SUKCertificateObtainDate;
				
				row2_HashRow.DatePayDepositLinkExpiry = row2.DatePayDepositLinkExpiry;
				
				row2_HashRow.PayDepositLinkAmount = row2.PayDepositLinkAmount;
				
				row2_HashRow.PayDownPaymentLinkAmount = row2.PayDownPaymentLinkAmount;
				
				row2_HashRow.Deleted = row2.Deleted;
				
				row2_HashRow.DateCreated = row2.DateCreated;
				
				row2_HashRow.DateModified = row2.DateModified;
				
				row2_HashRow.CreatedBy = row2.CreatedBy;
				
				row2_HashRow.ModifiedBy = row2.ModifiedBy;
				
				row2_HashRow.DateReservation = row2.DateReservation;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public String CustomerLeadID;

				public String getCustomerLeadID () {
					return this.CustomerLeadID;
				}
				
			    public String CustomerProfile;

				public String getCustomerProfile () {
					return this.CustomerProfile;
				}
				
			    public String CustomerGender;

				public String getCustomerGender () {
					return this.CustomerGender;
				}
				
			    public Integer CustomerConvertAge;

				public Integer getCustomerConvertAge () {
					return this.CustomerConvertAge;
				}
				
			    public String CustomerRace;

				public String getCustomerRace () {
					return this.CustomerRace;
				}
				
			    public Boolean CustomerIsBumi;

				public Boolean getCustomerIsBumi () {
					return this.CustomerIsBumi;
				}
				
			    public String CustomerMaritalStatus;

				public String getCustomerMaritalStatus () {
					return this.CustomerMaritalStatus;
				}
				
			    public String CustomerDateID;

				public String getCustomerDateID () {
					return this.CustomerDateID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CustomerID == null) ? 0 : this.CustomerID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.CustomerID == null) {
							if (other.CustomerID != null)
								return false;
						
						} else if (!this.CustomerID.equals(other.CustomerID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.CustomerID = this.CustomerID;
	            other.CustomerLeadID = this.CustomerLeadID;
	            other.CustomerProfile = this.CustomerProfile;
	            other.CustomerGender = this.CustomerGender;
	            other.CustomerConvertAge = this.CustomerConvertAge;
	            other.CustomerRace = this.CustomerRace;
	            other.CustomerIsBumi = this.CustomerIsBumi;
	            other.CustomerMaritalStatus = this.CustomerMaritalStatus;
	            other.CustomerDateID = this.CustomerDateID;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.CustomerID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.CustomerID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CustomerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CustomerLeadID = readString(dis,ois);
					
						this.CustomerProfile = readString(dis,ois);
					
						this.CustomerGender = readString(dis,ois);
					
						this.CustomerConvertAge = readInteger(dis,ois);
					
						this.CustomerRace = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CustomerIsBumi = null;
           				} else {
           			    	this.CustomerIsBumi = dis.readBoolean();
           				}
					
						this.CustomerMaritalStatus = readString(dis,ois);
					
						this.CustomerDateID = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CustomerLeadID = readString(dis,objectIn);
					
						this.CustomerProfile = readString(dis,objectIn);
					
						this.CustomerGender = readString(dis,objectIn);
					
						this.CustomerConvertAge = readInteger(dis,objectIn);
					
						this.CustomerRace = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.CustomerIsBumi = null;
           				} else {
           			    	this.CustomerIsBumi = objectIn.readBoolean();
           				}
					
						this.CustomerMaritalStatus = readString(dis,objectIn);
					
						this.CustomerDateID = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.CustomerLeadID, dos, oos);
					
						writeString(this.CustomerProfile, dos, oos);
					
						writeString(this.CustomerGender, dos, oos);
					
					writeInteger(this.CustomerConvertAge, dos, oos);
					
						writeString(this.CustomerRace, dos, oos);
					
						if(this.CustomerIsBumi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.CustomerIsBumi);
		            	}
					
						writeString(this.CustomerMaritalStatus, dos, oos);
					
						writeString(this.CustomerDateID, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.CustomerLeadID, dos, objectOut);
					
						writeString(this.CustomerProfile, dos, objectOut);
					
						writeString(this.CustomerGender, dos, objectOut);
					
					writeInteger(this.CustomerConvertAge, dos, objectOut);
					
						writeString(this.CustomerRace, dos, objectOut);
					
						if(this.CustomerIsBumi == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.CustomerIsBumi);
		            	}
					
						writeString(this.CustomerMaritalStatus, dos, objectOut);
					
						writeString(this.CustomerDateID, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+CustomerID);
		sb.append(",CustomerLeadID="+CustomerLeadID);
		sb.append(",CustomerProfile="+CustomerProfile);
		sb.append(",CustomerGender="+CustomerGender);
		sb.append(",CustomerConvertAge="+String.valueOf(CustomerConvertAge));
		sb.append(",CustomerRace="+CustomerRace);
		sb.append(",CustomerIsBumi="+String.valueOf(CustomerIsBumi));
		sb.append(",CustomerMaritalStatus="+CustomerMaritalStatus);
		sb.append(",CustomerDateID="+CustomerDateID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row7", false);
		start_Hash.put("tHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tHash_row7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tHash_row7 = 0;
		

				java.util.Map<row7Struct, row7Struct> tHash_row7 = new java.util.LinkedHashMap<row7Struct, row7Struct>();
	            globalMap.put("tHash_row7", tHash_row7);
			
            

 



/**
 * [tHash_row7 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_7 = java.util.Calendar.getInstance();
		    calendar_tDBInput_7.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_7 = calendar_tDBInput_7.getTime();
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "skyuser";
				
				 
	final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:pJhHESVV+aSkvmqD48NpRM4QO9gbZIazJExtuACGXJqYjz7FToJPDbcI");
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
        String properties_tDBInput_7 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_7 == null || properties_tDBInput_7.trim().length() == 0) {
            properties_tDBInput_7 = "";
        }
        String url_tDBInput_7 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_DataWarehouse" + "?" + properties_tDBInput_7;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT \n  `customers`.`CustomerID`, \n  `customers`.`CustomerLeadID`, \n  `customers`.`CustomerProfile`, \n  `customers`.`"
+"CustomerGender`, \n  `customers`.`CustomerConvertAge`, \n  `customers`.`CustomerRace`, \n  `customers`.`CustomerIsBumi`, \n "
+" `customers`.`CustomerMaritalStatus`, \n  `customers`.`CustomerDateID`\nFROM `customers`";
		    

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row7.CustomerID = null;
							} else {
	                         		
        	row7.CustomerID = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row7.CustomerLeadID = null;
							} else {
	                         		
        	row7.CustomerLeadID = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row7.CustomerProfile = null;
							} else {
	                         		
        	row7.CustomerProfile = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row7.CustomerGender = null;
							} else {
	                         		
        	row7.CustomerGender = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								row7.CustomerConvertAge = null;
							} else {
		                          
            row7.CustomerConvertAge = rs_tDBInput_7.getInt(5);
            if(rs_tDBInput_7.wasNull()){
                    row7.CustomerConvertAge = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								row7.CustomerRace = null;
							} else {
	                         		
        	row7.CustomerRace = routines.system.JDBCUtil.getString(rs_tDBInput_7, 6, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								row7.CustomerIsBumi = null;
							} else {
	                         		
            row7.CustomerIsBumi = rs_tDBInput_7.getBoolean(7);
            if(rs_tDBInput_7.wasNull()){
                    row7.CustomerIsBumi = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								row7.CustomerMaritalStatus = null;
							} else {
	                         		
        	row7.CustomerMaritalStatus = routines.system.JDBCUtil.getString(rs_tDBInput_7, 8, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								row7.CustomerDateID = null;
							} else {
	                         		
        	row7.CustomerDateID = routines.system.JDBCUtil.getString(rs_tDBInput_7, 9, false);
		                    }
					

 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row7 main ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

row7Struct row7_HashRow = new row7Struct();

					row7_HashRow.CustomerID = row7.CustomerID;
					row7_HashRow.CustomerLeadID = row7.CustomerLeadID;
					row7_HashRow.CustomerProfile = row7.CustomerProfile;
					row7_HashRow.CustomerGender = row7.CustomerGender;
					row7_HashRow.CustomerConvertAge = row7.CustomerConvertAge;
					row7_HashRow.CustomerRace = row7.CustomerRace;
					row7_HashRow.CustomerIsBumi = row7.CustomerIsBumi;
					row7_HashRow.CustomerMaritalStatus = row7.CustomerMaritalStatus;
					row7_HashRow.CustomerDateID = row7.CustomerDateID;
tHash_row7.put(row7_HashRow, row7_HashRow);


 


	tos_count_tHash_row7++;

/**
 * [tHash_row7 main ] stop
 */
	
	/**
	 * [tHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	

 



/**
 * [tHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	

 



/**
 * [tHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
		if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
			
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
		


 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tHash_row7 end ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tHash_row7", true);
end_Hash.put("tHash_row7", System.currentTimeMillis());




/**
 * [tHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	

 



/**
 * [tHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CancellationHIstoryID;

				public int getCancellationHIstoryID () {
					return this.CancellationHIstoryID;
				}
				
			    public int BookingUnitID;

				public int getBookingUnitID () {
					return this.BookingUnitID;
				}
				
			    public int UnitID;

				public int getUnitID () {
					return this.UnitID;
				}
				
			    public String ProjectID;

				public String getProjectID () {
					return this.ProjectID;
				}
				
			    public String CustomerID;

				public String getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Type;

				public String getType () {
					return this.Type;
				}
				
			    public java.util.Date BookingDate;

				public java.util.Date getBookingDate () {
					return this.BookingDate;
				}
				
			    public java.util.Date ExpiryDate;

				public java.util.Date getExpiryDate () {
					return this.ExpiryDate;
				}
				
			    public java.util.Date DateCancellation;

				public java.util.Date getDateCancellation () {
					return this.DateCancellation;
				}
				
			    public String Reason;

				public String getReason () {
					return this.Reason;
				}
				
			    public String Remark;

				public String getRemark () {
					return this.Remark;
				}
				
			    public String AddedBy;

				public String getAddedBy () {
					return this.AddedBy;
				}
				
			    public String CategoryID;

				public String getCategoryID () {
					return this.CategoryID;
				}
				
			    public Boolean Deleted;

				public Boolean getDeleted () {
					return this.Deleted;
				}
				
			    public java.util.Date DateCreated;

				public java.util.Date getDateCreated () {
					return this.DateCreated;
				}
				
			    public java.util.Date DateModified;

				public java.util.Date getDateModified () {
					return this.DateModified;
				}
				
			    public String CreatedBy;

				public String getCreatedBy () {
					return this.CreatedBy;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.BookingUnitID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.BookingUnitID != other.BookingUnitID)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.CancellationHIstoryID = this.CancellationHIstoryID;
	            other.BookingUnitID = this.BookingUnitID;
	            other.UnitID = this.UnitID;
	            other.ProjectID = this.ProjectID;
	            other.CustomerID = this.CustomerID;
	            other.Type = this.Type;
	            other.BookingDate = this.BookingDate;
	            other.ExpiryDate = this.ExpiryDate;
	            other.DateCancellation = this.DateCancellation;
	            other.Reason = this.Reason;
	            other.Remark = this.Remark;
	            other.AddedBy = this.AddedBy;
	            other.CategoryID = this.CategoryID;
	            other.Deleted = this.Deleted;
	            other.DateCreated = this.DateCreated;
	            other.DateModified = this.DateModified;
	            other.CreatedBy = this.CreatedBy;
	            other.ModifiedBy = this.ModifiedBy;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.BookingUnitID = this.BookingUnitID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingUnitID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.BookingUnitID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingUnitID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.BookingUnitID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.CancellationHIstoryID = dis.readInt();
					
			            this.UnitID = dis.readInt();
					
						this.ProjectID = readString(dis,ois);
					
						this.CustomerID = readString(dis,ois);
					
						this.Type = readString(dis,ois);
					
						this.BookingDate = readDate(dis,ois);
					
						this.ExpiryDate = readDate(dis,ois);
					
						this.DateCancellation = readDate(dis,ois);
					
						this.Reason = readString(dis,ois);
					
						this.Remark = readString(dis,ois);
					
						this.AddedBy = readString(dis,ois);
					
						this.CategoryID = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = dis.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,ois);
					
						this.DateModified = readDate(dis,ois);
					
						this.CreatedBy = readString(dis,ois);
					
						this.ModifiedBy = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.CancellationHIstoryID = objectIn.readInt();
					
			            this.UnitID = objectIn.readInt();
					
						this.ProjectID = readString(dis,objectIn);
					
						this.CustomerID = readString(dis,objectIn);
					
						this.Type = readString(dis,objectIn);
					
						this.BookingDate = readDate(dis,objectIn);
					
						this.ExpiryDate = readDate(dis,objectIn);
					
						this.DateCancellation = readDate(dis,objectIn);
					
						this.Reason = readString(dis,objectIn);
					
						this.Remark = readString(dis,objectIn);
					
						this.AddedBy = readString(dis,objectIn);
					
						this.CategoryID = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Deleted = null;
           				} else {
           			    	this.Deleted = objectIn.readBoolean();
           				}
					
						this.DateCreated = readDate(dis,objectIn);
					
						this.DateModified = readDate(dis,objectIn);
					
						this.CreatedBy = readString(dis,objectIn);
					
						this.ModifiedBy = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.CancellationHIstoryID);
					
		            	dos.writeInt(this.UnitID);
					
						writeString(this.ProjectID, dos, oos);
					
						writeString(this.CustomerID, dos, oos);
					
						writeString(this.Type, dos, oos);
					
						writeDate(this.BookingDate, dos, oos);
					
						writeDate(this.ExpiryDate, dos, oos);
					
						writeDate(this.DateCancellation, dos, oos);
					
						writeString(this.Reason, dos, oos);
					
						writeString(this.Remark, dos, oos);
					
						writeString(this.AddedBy, dos, oos);
					
						writeString(this.CategoryID, dos, oos);
					
						if(this.Deleted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, oos);
					
						writeDate(this.DateModified, dos, oos);
					
						writeString(this.CreatedBy, dos, oos);
					
						writeString(this.ModifiedBy, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.CancellationHIstoryID);
					
					objectOut.writeInt(this.UnitID);
					
						writeString(this.ProjectID, dos, objectOut);
					
						writeString(this.CustomerID, dos, objectOut);
					
						writeString(this.Type, dos, objectOut);
					
						writeDate(this.BookingDate, dos, objectOut);
					
						writeDate(this.ExpiryDate, dos, objectOut);
					
						writeDate(this.DateCancellation, dos, objectOut);
					
						writeString(this.Reason, dos, objectOut);
					
						writeString(this.Remark, dos, objectOut);
					
						writeString(this.AddedBy, dos, objectOut);
					
						writeString(this.CategoryID, dos, objectOut);
					
						if(this.Deleted == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.Deleted);
		            	}
					
						writeDate(this.DateCreated, dos, objectOut);
					
						writeDate(this.DateModified, dos, objectOut);
					
						writeString(this.CreatedBy, dos, objectOut);
					
						writeString(this.ModifiedBy, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CancellationHIstoryID="+String.valueOf(CancellationHIstoryID));
		sb.append(",BookingUnitID="+String.valueOf(BookingUnitID));
		sb.append(",UnitID="+String.valueOf(UnitID));
		sb.append(",ProjectID="+ProjectID);
		sb.append(",CustomerID="+CustomerID);
		sb.append(",Type="+Type);
		sb.append(",BookingDate="+String.valueOf(BookingDate));
		sb.append(",ExpiryDate="+String.valueOf(ExpiryDate));
		sb.append(",DateCancellation="+String.valueOf(DateCancellation));
		sb.append(",Reason="+Reason);
		sb.append(",Remark="+Remark);
		sb.append(",AddedBy="+AddedBy);
		sb.append(",CategoryID="+CategoryID);
		sb.append(",Deleted="+String.valueOf(Deleted));
		sb.append(",DateCreated="+String.valueOf(DateCreated));
		sb.append(",DateModified="+String.valueOf(DateModified));
		sb.append(",CreatedBy="+CreatedBy);
		sb.append(",ModifiedBy="+ModifiedBy);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BookingUnitID, other.BookingUnitID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row4,row6,row5,row2,row3) outputs:(PropertyBookingPipelien,bookingDatePipeline,reservationDatePipeline)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "skyuser";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:esaiP9zxnN/HLg5sbKYOmrEwaTBYemwHR34eM8BZv6m95ELbD+ksy7QP");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
        String properties_tDBInput_3 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_3 == null || properties_tDBInput_3.trim().length() == 0) {
            properties_tDBInput_3 = "";
        }
        String url_tDBInput_3 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_STUDENT" + "?" + properties_tDBInput_3;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  `property_cancellationhistory`.`CancellationHIstoryID`, \n  `property_cancellationhistory`.`BookingUnitID`, \n "
+" `property_cancellationhistory`.`UnitID`, \n  `property_cancellationhistory`.`ProjectID`, \n  `property_cancellationhistor"
+"y`.`CustomerID`, \n  `property_cancellationhistory`.`Type`, \n  `property_cancellationhistory`.`BookingDate`, \n  `property"
+"_cancellationhistory`.`ExpiryDate`, \n  `property_cancellationhistory`.`DateCancellation`, \n  `property_cancellationhisto"
+"ry`.`Reason`, \n  `property_cancellationhistory`.`Remark`, \n  `property_cancellationhistory`.`AddedBy`, \n  `property_canc"
+"ellationhistory`.`CategoryID`, \n  `property_cancellationhistory`.`Deleted`, \n  `property_cancellationhistory`.`DateCreat"
+"ed`, \n  `property_cancellationhistory`.`DateModified`, \n  `property_cancellationhistory`.`CreatedBy`, \n  `property_cance"
+"llationhistory`.`ModifiedBy`\nFROM `property_cancellationhistory`";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.CancellationHIstoryID = 0;
							} else {
		                          
            row3.CancellationHIstoryID = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.BookingUnitID = 0;
							} else {
		                          
            row3.BookingUnitID = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.UnitID = 0;
							} else {
		                          
            row3.UnitID = rs_tDBInput_3.getInt(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.ProjectID = null;
							} else {
	                         		
        	row3.ProjectID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.CustomerID = null;
							} else {
	                         		
        	row3.CustomerID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row3.Type = null;
							} else {
	                         		
        	row3.Type = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row3.BookingDate = null;
							} else {
										
				if(rs_tDBInput_3.getString(7) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(7);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row3.BookingDate = rs_tDBInput_3.getTimestamp(7);
					} else {
						row3.BookingDate = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row3.BookingDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row3.ExpiryDate = null;
							} else {
										
				if(rs_tDBInput_3.getString(8) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(8);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row3.ExpiryDate = rs_tDBInput_3.getTimestamp(8);
					} else {
						row3.ExpiryDate = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row3.ExpiryDate =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row3.DateCancellation = null;
							} else {
										
				if(rs_tDBInput_3.getString(9) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(9);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row3.DateCancellation = rs_tDBInput_3.getTimestamp(9);
					} else {
						row3.DateCancellation = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row3.DateCancellation =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row3.Reason = null;
							} else {
	                         		
        	row3.Reason = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row3.Remark = null;
							} else {
	                         		
        	row3.Remark = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row3.AddedBy = null;
							} else {
	                         		
        	row3.AddedBy = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row3.CategoryID = null;
							} else {
	                         		
        	row3.CategoryID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row3.Deleted = null;
							} else {
	                         		
            row3.Deleted = rs_tDBInput_3.getBoolean(14);
            if(rs_tDBInput_3.wasNull()){
                    row3.Deleted = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row3.DateCreated = null;
							} else {
										
				if(rs_tDBInput_3.getString(15) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(15);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row3.DateCreated = rs_tDBInput_3.getTimestamp(15);
					} else {
						row3.DateCreated = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row3.DateCreated =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row3.DateModified = null;
							} else {
										
				if(rs_tDBInput_3.getString(16) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						row3.DateModified = rs_tDBInput_3.getTimestamp(16);
					} else {
						row3.DateModified = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					row3.DateModified =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row3.CreatedBy = null;
							} else {
	                         		
        	row3.CreatedBy = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row3.ModifiedBy = null;
							} else {
	                         		
        	row3.ModifiedBy = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.CancellationHIstoryID = row3.CancellationHIstoryID;
				
				row3_HashRow.BookingUnitID = row3.BookingUnitID;
				
				row3_HashRow.UnitID = row3.UnitID;
				
				row3_HashRow.ProjectID = row3.ProjectID;
				
				row3_HashRow.CustomerID = row3.CustomerID;
				
				row3_HashRow.Type = row3.Type;
				
				row3_HashRow.BookingDate = row3.BookingDate;
				
				row3_HashRow.ExpiryDate = row3.ExpiryDate;
				
				row3_HashRow.DateCancellation = row3.DateCancellation;
				
				row3_HashRow.Reason = row3.Reason;
				
				row3_HashRow.Remark = row3.Remark;
				
				row3_HashRow.AddedBy = row3.AddedBy;
				
				row3_HashRow.CategoryID = row3.CategoryID;
				
				row3_HashRow.Deleted = row3.Deleted;
				
				row3_HashRow.DateCreated = row3.DateCreated;
				
				row3_HashRow.DateModified = row3.DateModified;
				
				row3_HashRow.CreatedBy = row3.CreatedBy;
				
				row3_HashRow.ModifiedBy = row3.ModifiedBy;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class pipelineStruct implements routines.system.IPersistableRow<pipelineStruct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String table_involved;

				public String getTable_involved () {
					return this.table_involved;
				}
				
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String threshold;

				public String getThreshold () {
					return this.threshold;
				}
				
			    public String duration;

				public String getDuration () {
					return this.duration;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final pipelineStruct other = (pipelineStruct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(pipelineStruct other) {

		other.ID = this.ID;
	            other.table_involved = this.table_involved;
	            other.moment = this.moment;
	            other.pid = this.pid;
	            other.father_pid = this.father_pid;
	            other.root_pid = this.root_pid;
	            other.system_pid = this.system_pid;
	            other.project = this.project;
	            other.job = this.job;
	            other.job_repository_id = this.job_repository_id;
	            other.job_version = this.job_version;
	            other.context = this.context;
	            other.origin = this.origin;
	            other.label = this.label;
	            other.count = this.count;
	            other.reference = this.reference;
	            other.threshold = this.threshold;
	            other.duration = this.duration;
	            
	}

	public void copyKeysDataTo(pipelineStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.table_involved = readString(dis);
					
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.threshold = readString(dis);
					
					this.duration = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.table_involved = readString(dis);
					
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.threshold = readString(dis);
					
					this.duration = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.table_involved,dos);
					
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.threshold,dos);
					
					// String
				
						writeString(this.duration,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.table_involved,dos);
					
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.threshold,dos);
					
					// String
				
						writeString(this.duration,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",table_involved="+table_involved);
		sb.append(",moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",threshold="+threshold);
		sb.append(",duration="+duration);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(pipelineStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_SKYWORLD_star_PropertyBooking = new byte[0];
    static byte[] commonByteArray_SKYWORLD_star_PropertyBooking = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SKYWORLD_star_PropertyBooking.length) {
				if(length < 1024 && commonByteArray_SKYWORLD_star_PropertyBooking.length == 0) {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[1024];
				} else {
   					commonByteArray_SKYWORLD_star_PropertyBooking = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length);
			strReturn = new String(commonByteArray_SKYWORLD_star_PropertyBooking, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SKYWORLD_star_PropertyBooking) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
row9Struct row10 = row9;
pipelineStruct pipeline = new pipelineStruct();






	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"pipeline");
					}
				
		int tos_count_tDBOutput_4 = 0;
		






int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

String tableName_tDBOutput_4 = "pipeline";
boolean whetherReject_tDBOutput_4 = false;

java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
long date_tDBOutput_4;

java.sql.Connection conn_tDBOutput_4 = null;
		
        String properties_tDBOutput_4 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBOutput_4 == null || properties_tDBOutput_4.trim().length() == 0) {
            properties_tDBOutput_4 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_4.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_4 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_4.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_4 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_4 = "jdbc:mysql://" + "192.168.102.164" + ":" + "3306" + "/" + "DW_DataWarehouse" + "?" + properties_tDBOutput_4;
		
		String driverClass_tDBOutput_4 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_4 = "skyuser";
		

		 
	final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:RQ7tW/a7LzDu7gftCwy8ApNE+psm39szmTIDSYGXffo1zit1pnDgVn94");

		String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
		java.lang.Class.forName(driverClass_tDBOutput_4);
		
		conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);
		
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 10000;
        int commitCounter_tDBOutput_4 = 0;

int count_tDBOutput_4=0;
    	

				String insert_tDBOutput_4 = "INSERT INTO `" + "pipeline" + "` (`ID`,`table_involved`,`moment`,`pid`,`father_pid`,`root_pid`,`system_pid`,`project`,`job`,`job_repository_id`,`job_version`,`context`,`origin`,`label`,`count`,`reference`,`threshold`,`duration`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_4 = 100;
	   			int batchSizeCounter_tDBOutput_4=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
		        resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);


 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
pipelineStruct pipeline_tmp = new pipelineStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[15];

        public void addRow(String[] row) {

            for (int i = 0; i < 15; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 14 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 14 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[14] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"moment","pid","father_pid","root_pid","system_pid","project","job","job_repository_id","job_version","context","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row9.pid = pid;
		row9.root_pid = rootPid;
		row9.father_pid = fatherPid;	
        row9.project = projectName;
        row9.job = jobName;
        row9.context = contextStr;
		row9.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row9.moment = mcm.getMoment();
		row9.job_version = mcm.getJobVersion();
		row9.job_repository_id = mcm.getJobId();
		row9.system_pid = mcm.getSystemPid();
		row9.label = mcm.getLabel();
		row9.count = mcm.getCount();
		row9.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row9.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[15];
   				
	    		if(row9.moment != null) { //              
                 row_tLogRow_1[0]=    						
								FormatterUtils.format_Date(row9.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(row9.pid != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row9.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.father_pid != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row9.father_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.root_pid != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row9.root_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.system_pid != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(row9.system_pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.project != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(row9.project)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.job != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row9.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.job_repository_id != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row9.job_repository_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.job_version != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(row9.job_version)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.context != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row9.context)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.origin != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(row9.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.label != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(row9.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.count != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(row9.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.reference != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(row9.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.thresholds != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(row9.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row10 = row9;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

pipeline = null;


// # Output table : 'pipeline'
pipeline_tmp.ID = 0;
pipeline_tmp.table_involved = "property_booking";
pipeline_tmp.moment = row10.moment;
pipeline_tmp.pid = row10.pid;
pipeline_tmp.father_pid = row10.father_pid;
pipeline_tmp.root_pid = row10.root_pid;
pipeline_tmp.system_pid = row10.system_pid;
pipeline_tmp.project = row10.project;
pipeline_tmp.job = row10.job;
pipeline_tmp.job_repository_id = row10.job_repository_id;
pipeline_tmp.job_version = row10.job_version;
pipeline_tmp.context = row10.context;
pipeline_tmp.origin = row10.origin;
pipeline_tmp.label = row10.label;
pipeline_tmp.count = row10.count;
pipeline_tmp.reference = row10.reference;
pipeline_tmp.threshold = row10.thresholds ;
pipeline_tmp.duration = context.getProperty("pipelineUUID") ;
pipeline = pipeline_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "pipeline"
if(pipeline != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"pipeline"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                            pstmt_tDBOutput_4.setInt(1, pipeline.ID);

                            if(pipeline.table_involved == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, pipeline.table_involved);
}

                            if(pipeline.moment != null) {
date_tDBOutput_4 = pipeline.moment.getTime();
if(date_tDBOutput_4 < year1_tDBOutput_4 || date_tDBOutput_4 >= year10000_tDBOutput_4) {
pstmt_tDBOutput_4.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_4.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_4));
}
} else {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.DATE);
}

                            if(pipeline.pid == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, pipeline.pid);
}

                            if(pipeline.father_pid == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, pipeline.father_pid);
}

                            if(pipeline.root_pid == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, pipeline.root_pid);
}

                            if(pipeline.system_pid == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setLong(7, pipeline.system_pid);
}

                            if(pipeline.project == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(8, pipeline.project);
}

                            if(pipeline.job == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, pipeline.job);
}

                            if(pipeline.job_repository_id == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, pipeline.job_repository_id);
}

                            if(pipeline.job_version == null) {
pstmt_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(11, pipeline.job_version);
}

                            if(pipeline.context == null) {
pstmt_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(12, pipeline.context);
}

                            if(pipeline.origin == null) {
pstmt_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(13, pipeline.origin);
}

                            if(pipeline.label == null) {
pstmt_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(14, pipeline.label);
}

                            if(pipeline.count == null) {
pstmt_tDBOutput_4.setNull(15, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(15, pipeline.count);
}

                            if(pipeline.reference == null) {
pstmt_tDBOutput_4.setNull(16, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(16, pipeline.reference);
}

                            if(pipeline.threshold == null) {
pstmt_tDBOutput_4.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(17, pipeline.threshold);
}

                            if(pipeline.duration == null) {
pstmt_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(18, pipeline.duration);
}

                    pstmt_tDBOutput_4.addBatch();
                    nb_line_tDBOutput_4++;

						
                      batchSizeCounter_tDBOutput_4++;
                if ( batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
                try {
                        int countSum_tDBOutput_4 = 0;
                        for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
                            countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
                        insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_4 = 0;
                    for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
                        countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                    }
                    rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
                    insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_4 = 0;
            }
                commitCounter_tDBOutput_4++;

                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

                try {
                        int countSum_tDBOutput_4 = 0;
                        for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
                            countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
                        insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_4 = 0;
                    for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
                        countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                    }
                    rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
                    insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
                    System.err.println(e.getMessage());

                }
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    }
                    conn_tDBOutput_4.commit();
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                        rowsToCommitCount_tDBOutput_4 = 0;
                    }
                    commitCounter_tDBOutput_4=0;

                }


 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "pipeline"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



                try {
                		if (batchSizeCounter_tDBOutput_4 != 0) {
							int countSum_tDBOutput_4 = 0;
							
							for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
								countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
							
	            	    	
	            	    		insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                    globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
					
            	    insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	    	
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_4 = 0;
    		
	

        if(pstmt_tDBOutput_4 != null) {
			
				pstmt_tDBOutput_4.close();
				resourceMap.remove("pstmt_tDBOutput_4");
			
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
    	if (commitCounter_tDBOutput_4 > 0 && rowsToCommitCount_tDBOutput_4 != 0) {
    		
    	}
    	conn_tDBOutput_4.commit();
    	if (commitCounter_tDBOutput_4 > 0 && rowsToCommitCount_tDBOutput_4 != 0) {
    		
			rowsToCommitCount_tDBOutput_4 = 0;
    	}
		commitCounter_tDBOutput_4 = 0;
    	
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"pipeline");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final star_PropertyBooking star_PropertyBookingClass = new star_PropertyBooking();

        int exitCode = star_PropertyBookingClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = star_PropertyBooking.class.getClassLoader().getResourceAsStream("skyworld/star_propertybooking_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = star_PropertyBooking.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("pipelineUUID", "id_String");
                        if(context.getStringValue("pipelineUUID") == null) {
                            context.pipelineUUID = null;
                        } else {
                            context.pipelineUUID=(String) context.getProperty("pipelineUUID");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("pipelineUUID")) {
                context.pipelineUUID = (String) parentContextMap.get("pipelineUUID");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : star_PropertyBooking");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     509103 characters generated by Talend Open Studio for Big Data 
 *     on the November 22, 2023 at 8:51:31 AM MYT
 ************************************************************************************************/